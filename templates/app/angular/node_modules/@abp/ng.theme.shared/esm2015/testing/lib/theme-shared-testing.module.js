import { BaseThemeSharedModule, DateParserFormatter, DEFAULT_VALIDATION_BLUEPRINTS, THEME_SHARED_ROUTE_PROVIDERS, } from '@abp/ng.theme.shared';
import { NgModule } from '@angular/core';
import { RouterTestingModule } from '@angular/router/testing';
import { NgbDateParserFormatter } from '@ng-bootstrap/ng-bootstrap';
import { defaultMapErrorsFn, VALIDATION_BLUEPRINTS, VALIDATION_MAP_ERRORS_FN, VALIDATION_VALIDATE_ON_SUBMIT, } from '@ngx-validate/core';
/**
 * ThemeSharedTestingModule is the module that will be used in tests
 */
export class ThemeSharedTestingModule {
    static withConfig({ validation = {} } = {}) {
        return {
            ngModule: ThemeSharedTestingModule,
            providers: [
                THEME_SHARED_ROUTE_PROVIDERS,
                { provide: NgbDateParserFormatter, useClass: DateParserFormatter },
                {
                    provide: VALIDATION_BLUEPRINTS,
                    useValue: Object.assign(Object.assign({}, DEFAULT_VALIDATION_BLUEPRINTS), (validation.blueprints || {})),
                },
                {
                    provide: VALIDATION_MAP_ERRORS_FN,
                    useValue: validation.mapErrorsFn || defaultMapErrorsFn,
                },
                {
                    provide: VALIDATION_VALIDATE_ON_SUBMIT,
                    useValue: validation.validateOnSubmit,
                },
            ],
        };
    }
}
ThemeSharedTestingModule.decorators = [
    { type: NgModule, args: [{
                exports: [RouterTestingModule, BaseThemeSharedModule],
                imports: [RouterTestingModule, BaseThemeSharedModule],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUtc2hhcmVkLXRlc3RpbmcubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvdGhlbWUtc2hhcmVkL3Rlc3Rpbmcvc3JjL2xpYi90aGVtZS1zaGFyZWQtdGVzdGluZy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHFCQUFxQixFQUNyQixtQkFBbUIsRUFDbkIsNkJBQTZCLEVBQzdCLDRCQUE0QixHQUM3QixNQUFNLHNCQUFzQixDQUFDO0FBQzlCLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFDTCxrQkFBa0IsRUFDbEIscUJBQXFCLEVBQ3JCLHdCQUF3QixFQUN4Qiw2QkFBNkIsR0FDOUIsTUFBTSxvQkFBb0IsQ0FBQztBQUc1Qjs7R0FFRztBQUtILE1BQU0sT0FBTyx3QkFBd0I7SUFDbkMsTUFBTSxDQUFDLFVBQVUsQ0FDZixFQUFFLFVBQVUsR0FBRyxFQUFFLEtBQUssRUFBWTtRQUVsQyxPQUFPO1lBQ0wsUUFBUSxFQUFFLHdCQUF3QjtZQUNsQyxTQUFTLEVBQUU7Z0JBQ1QsNEJBQTRCO2dCQUM1QixFQUFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUU7Z0JBQ2xFO29CQUNFLE9BQU8sRUFBRSxxQkFBcUI7b0JBQzlCLFFBQVEsa0NBQ0gsNkJBQTZCLEdBQzdCLENBQUMsVUFBVSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUMsQ0FDakM7aUJBQ0Y7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLHdCQUF3QjtvQkFDakMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxXQUFXLElBQUksa0JBQWtCO2lCQUN2RDtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsNkJBQTZCO29CQUN0QyxRQUFRLEVBQUUsVUFBVSxDQUFDLGdCQUFnQjtpQkFDdEM7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUE5QkYsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixFQUFFLHFCQUFxQixDQUFDO2dCQUNyRCxPQUFPLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxxQkFBcUIsQ0FBQzthQUN0RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJhc2VUaGVtZVNoYXJlZE1vZHVsZSxcbiAgRGF0ZVBhcnNlckZvcm1hdHRlcixcbiAgREVGQVVMVF9WQUxJREFUSU9OX0JMVUVQUklOVFMsXG4gIFRIRU1FX1NIQVJFRF9ST1VURV9QUk9WSURFUlMsXG59IGZyb20gJ0BhYnAvbmcudGhlbWUuc2hhcmVkJztcbmltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyL3Rlc3RpbmcnO1xuaW1wb3J0IHsgTmdiRGF0ZVBhcnNlckZvcm1hdHRlciB9IGZyb20gJ0BuZy1ib290c3RyYXAvbmctYm9vdHN0cmFwJztcbmltcG9ydCB7XG4gIGRlZmF1bHRNYXBFcnJvcnNGbixcbiAgVkFMSURBVElPTl9CTFVFUFJJTlRTLFxuICBWQUxJREFUSU9OX01BUF9FUlJPUlNfRk4sXG4gIFZBTElEQVRJT05fVkFMSURBVEVfT05fU1VCTUlULFxufSBmcm9tICdAbmd4LXZhbGlkYXRlL2NvcmUnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi9tb2RlbHMvY29uZmlnJztcblxuLyoqXG4gKiBUaGVtZVNoYXJlZFRlc3RpbmdNb2R1bGUgaXMgdGhlIG1vZHVsZSB0aGF0IHdpbGwgYmUgdXNlZCBpbiB0ZXN0c1xuICovXG5ATmdNb2R1bGUoe1xuICBleHBvcnRzOiBbUm91dGVyVGVzdGluZ01vZHVsZSwgQmFzZVRoZW1lU2hhcmVkTW9kdWxlXSxcbiAgaW1wb3J0czogW1JvdXRlclRlc3RpbmdNb2R1bGUsIEJhc2VUaGVtZVNoYXJlZE1vZHVsZV0sXG59KVxuZXhwb3J0IGNsYXNzIFRoZW1lU2hhcmVkVGVzdGluZ01vZHVsZSB7XG4gIHN0YXRpYyB3aXRoQ29uZmlnKFxuICAgIHsgdmFsaWRhdGlvbiA9IHt9IH0gPSB7fSBhcyBDb25maWcsXG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnM8VGhlbWVTaGFyZWRUZXN0aW5nTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBUaGVtZVNoYXJlZFRlc3RpbmdNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgVEhFTUVfU0hBUkVEX1JPVVRFX1BST1ZJREVSUyxcbiAgICAgICAgeyBwcm92aWRlOiBOZ2JEYXRlUGFyc2VyRm9ybWF0dGVyLCB1c2VDbGFzczogRGF0ZVBhcnNlckZvcm1hdHRlciB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogVkFMSURBVElPTl9CTFVFUFJJTlRTLFxuICAgICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgICAuLi5ERUZBVUxUX1ZBTElEQVRJT05fQkxVRVBSSU5UUyxcbiAgICAgICAgICAgIC4uLih2YWxpZGF0aW9uLmJsdWVwcmludHMgfHwge30pLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBWQUxJREFUSU9OX01BUF9FUlJPUlNfRk4sXG4gICAgICAgICAgdXNlVmFsdWU6IHZhbGlkYXRpb24ubWFwRXJyb3JzRm4gfHwgZGVmYXVsdE1hcEVycm9yc0ZuLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogVkFMSURBVElPTl9WQUxJREFURV9PTl9TVUJNSVQsXG4gICAgICAgICAgdXNlVmFsdWU6IHZhbGlkYXRpb24udmFsaWRhdGVPblN1Ym1pdCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxufVxuIl19