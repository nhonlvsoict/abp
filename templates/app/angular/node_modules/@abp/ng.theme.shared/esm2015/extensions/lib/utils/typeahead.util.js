import { RestService } from '@abp/ng.core';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
const TYPEAHEAD_TEXT_SUFFIX = '_Text';
const TYPEAHEAD_TEXT_SUFFIX_REGEX = /_Text$/;
export function createTypeaheadOptions(lookup) {
    return (data, searchText) => searchText
        ? data
            .getInjected(RestService)
            .request({
            method: 'GET',
            url: lookup.url,
            params: {
                [lookup.filterParamName]: searchText,
            },
        }, { apiName: 'Default' })
            .pipe(map(response => {
            const list = response[lookup.resultListPropertyName];
            const mapToOption = (item) => ({
                key: item[lookup.displayPropertyName],
                value: item[lookup.valuePropertyName],
            });
            return list.map(mapToOption);
        }))
        : of([]);
}
export function getTypeaheadType(lookup, name) {
    return Boolean(lookup.url)
        ? "typeahead" /* Typeahead */
        : name.endsWith(TYPEAHEAD_TEXT_SUFFIX)
            ? "hidden" /* Hidden */
            : undefined;
}
export function createTypeaheadDisplayNameGenerator(displayNameGeneratorFn, properties) {
    return (displayName, fallback) => {
        const name = removeTypeaheadTextSuffix(fallback.name);
        return displayNameGeneratorFn(displayName || properties[name].displayName, {
            name,
            resource: fallback.resource,
        });
    };
}
export function addTypeaheadTextSuffix(name) {
    return name + TYPEAHEAD_TEXT_SUFFIX;
}
export function hasTypeaheadTextSuffix(name) {
    return TYPEAHEAD_TEXT_SUFFIX_REGEX.test(name);
}
export function removeTypeaheadTextSuffix(name) {
    return name.replace(TYPEAHEAD_TEXT_SUFFIX_REGEX, '');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWFoZWFkLnV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy90aGVtZS1zaGFyZWQvZXh0ZW5zaW9ucy9zcmMvbGliL3V0aWxzL3R5cGVhaGVhZC51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBcUMsV0FBVyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzlFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3JDLE1BQU0scUJBQXFCLEdBQUcsT0FBTyxDQUFDO0FBQ3RDLE1BQU0sMkJBQTJCLEdBQUcsUUFBUSxDQUFDO0FBRTdDLE1BQU0sVUFBVSxzQkFBc0IsQ0FDcEMsTUFBb0M7SUFFcEMsT0FBTyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsRUFBRSxDQUMxQixVQUFVO1FBQ1IsQ0FBQyxDQUFDLElBQUk7YUFDRCxXQUFXLENBQUMsV0FBVyxDQUFDO2FBQ3hCLE9BQU8sQ0FDTjtZQUNFLE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHO1lBQ2YsTUFBTSxFQUFFO2dCQUNOLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxFQUFFLFVBQVU7YUFDckM7U0FDRixFQUNELEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUN2QjthQUNBLElBQUksQ0FDSCxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDYixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFDckQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ2xDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDO2dCQUNyQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQzthQUN0QyxDQUFDLENBQUM7WUFDSCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQ0g7UUFDTCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2YsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxNQUFvQyxFQUFFLElBQVk7SUFDakYsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUN4QixDQUFDO1FBQ0QsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUM7WUFDdEMsQ0FBQztZQUNELENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDaEIsQ0FBQztBQUVELE1BQU0sVUFBVSxtQ0FBbUMsQ0FDakQsc0JBQStELEVBQy9ELFVBQXNEO0lBRXRELE9BQU8sQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLEVBQUU7UUFDL0IsTUFBTSxJQUFJLEdBQUcseUJBQXlCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RELE9BQU8sc0JBQXNCLENBQUMsV0FBVyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUU7WUFDekUsSUFBSTtZQUNKLFFBQVEsRUFBRSxRQUFRLENBQUMsUUFBUTtTQUM1QixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLHNCQUFzQixDQUFDLElBQVk7SUFDakQsT0FBTyxJQUFJLEdBQUcscUJBQXFCLENBQUM7QUFDdEMsQ0FBQztBQUVELE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxJQUFZO0lBQ2pELE9BQU8sMkJBQTJCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUFFRCxNQUFNLFVBQVUseUJBQXlCLENBQUMsSUFBWTtJQUNwRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsMkJBQTJCLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDdkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFCUCwgRXh0ZW5zaW9uUHJvcGVydHlVaUxvb2t1cER0bywgUmVzdFNlcnZpY2UgfSBmcm9tICdAYWJwL25nLmNvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGVQcm9wVHlwZSB9IGZyb20gJy4uL2VudW1zL3Byb3BzLmVudW0nO1xuaW1wb3J0IHsgT2JqZWN0RXh0ZW5zaW9ucyB9IGZyb20gJy4uL21vZGVscy9vYmplY3QtZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyBQcm9wQ2FsbGJhY2sgfSBmcm9tICcuLi9tb2RlbHMvcHJvcHMnO1xuXG5jb25zdCBUWVBFQUhFQURfVEVYVF9TVUZGSVggPSAnX1RleHQnO1xuY29uc3QgVFlQRUFIRUFEX1RFWFRfU1VGRklYX1JFR0VYID0gL19UZXh0JC87XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUeXBlYWhlYWRPcHRpb25zKFxuICBsb29rdXA6IEV4dGVuc2lvblByb3BlcnR5VWlMb29rdXBEdG8sXG4pOiBQcm9wQ2FsbGJhY2s8YW55LCBPYnNlcnZhYmxlPEFCUC5PcHRpb248YW55PltdPj4ge1xuICByZXR1cm4gKGRhdGEsIHNlYXJjaFRleHQpID0+XG4gICAgc2VhcmNoVGV4dFxuICAgICAgPyBkYXRhXG4gICAgICAgICAgLmdldEluamVjdGVkKFJlc3RTZXJ2aWNlKVxuICAgICAgICAgIC5yZXF1ZXN0KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICB1cmw6IGxvb2t1cC51cmwsXG4gICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgIFtsb29rdXAuZmlsdGVyUGFyYW1OYW1lXTogc2VhcmNoVGV4dCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IGFwaU5hbWU6ICdEZWZhdWx0JyB9LFxuICAgICAgICAgIClcbiAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgIG1hcChyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGxpc3QgPSByZXNwb25zZVtsb29rdXAucmVzdWx0TGlzdFByb3BlcnR5TmFtZV07XG4gICAgICAgICAgICAgIGNvbnN0IG1hcFRvT3B0aW9uID0gKGl0ZW06IGFueSkgPT4gKHtcbiAgICAgICAgICAgICAgICBrZXk6IGl0ZW1bbG9va3VwLmRpc3BsYXlQcm9wZXJ0eU5hbWVdLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBpdGVtW2xvb2t1cC52YWx1ZVByb3BlcnR5TmFtZV0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gbGlzdC5tYXAobWFwVG9PcHRpb24pO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgKVxuICAgICAgOiBvZihbXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlYWhlYWRUeXBlKGxvb2t1cDogRXh0ZW5zaW9uUHJvcGVydHlVaUxvb2t1cER0bywgbmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiBCb29sZWFuKGxvb2t1cC51cmwpXG4gICAgPyBlUHJvcFR5cGUuVHlwZWFoZWFkXG4gICAgOiBuYW1lLmVuZHNXaXRoKFRZUEVBSEVBRF9URVhUX1NVRkZJWClcbiAgICA/IGVQcm9wVHlwZS5IaWRkZW5cbiAgICA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVR5cGVhaGVhZERpc3BsYXlOYW1lR2VuZXJhdG9yKFxuICBkaXNwbGF5TmFtZUdlbmVyYXRvckZuOiBPYmplY3RFeHRlbnNpb25zLkRpc3BsYXlOYW1lR2VuZXJhdG9yRm4sXG4gIHByb3BlcnRpZXM6IE9iamVjdEV4dGVuc2lvbnMuRW50aXR5RXh0ZW5zaW9uUHJvcGVydGllcyxcbik6IE9iamVjdEV4dGVuc2lvbnMuRGlzcGxheU5hbWVHZW5lcmF0b3JGbiB7XG4gIHJldHVybiAoZGlzcGxheU5hbWUsIGZhbGxiYWNrKSA9PiB7XG4gICAgY29uc3QgbmFtZSA9IHJlbW92ZVR5cGVhaGVhZFRleHRTdWZmaXgoZmFsbGJhY2submFtZSk7XG4gICAgcmV0dXJuIGRpc3BsYXlOYW1lR2VuZXJhdG9yRm4oZGlzcGxheU5hbWUgfHwgcHJvcGVydGllc1tuYW1lXS5kaXNwbGF5TmFtZSwge1xuICAgICAgbmFtZSxcbiAgICAgIHJlc291cmNlOiBmYWxsYmFjay5yZXNvdXJjZSxcbiAgICB9KTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFR5cGVhaGVhZFRleHRTdWZmaXgobmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiBuYW1lICsgVFlQRUFIRUFEX1RFWFRfU1VGRklYO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzVHlwZWFoZWFkVGV4dFN1ZmZpeChuYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIFRZUEVBSEVBRF9URVhUX1NVRkZJWF9SRUdFWC50ZXN0KG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVHlwZWFoZWFkVGV4dFN1ZmZpeChuYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIG5hbWUucmVwbGFjZShUWVBFQUhFQURfVEVYVF9TVUZGSVhfUkVHRVgsICcnKTtcbn1cbiJdfQ==