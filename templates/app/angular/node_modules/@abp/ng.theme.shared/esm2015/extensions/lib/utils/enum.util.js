import { LocalizationService } from '@abp/ng.core';
import { merge, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { EXTRA_PROPERTIES_KEY } from '../constants/extra-properties';
export function createEnum(members) {
    const enumObject = {};
    members.forEach(({ name, value }) => {
        enumObject[(enumObject[name] = value)] = name;
    });
    return enumObject;
}
export function createEnumValueResolver(enumType, lookupEnum, propName) {
    return data => {
        const value = data.record[EXTRA_PROPERTIES_KEY][propName];
        const key = lookupEnum.transformed[value];
        const l10n = data.getInjected(LocalizationService);
        const localizeEnum = createEnumLocalizer(l10n, enumType, lookupEnum);
        return createLocalizationStream(l10n, localizeEnum(key));
    };
}
export function createEnumOptions(enumType, lookupEnum) {
    return data => {
        const l10n = data.getInjected(LocalizationService);
        const localizeEnum = createEnumLocalizer(l10n, enumType, lookupEnum);
        return createLocalizationStream(l10n, lookupEnum.fields.map(({ name, value }) => ({
            key: localizeEnum(name),
            value,
        })));
    };
}
function createLocalizationStream(l10n, mapTarget) {
    return merge(of(null), l10n.languageChange$).pipe(map(() => mapTarget));
}
function createEnumLocalizer(l10n, enumType, lookupEnum) {
    const resource = lookupEnum.localizationResource;
    const shortType = getShortEnumType(enumType);
    return key => l10n.localizeWithFallbackSync([resource], ['Enum:' + shortType + '.' + key, shortType + '.' + key, key], key);
}
function getShortEnumType(enumType) {
    return enumType.split('.').pop();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bS51dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvdGhlbWUtc2hhcmVkL2V4dGVuc2lvbnMvc3JjL2xpYi91dGlscy9lbnVtLnV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFPLG1CQUFtQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3hELE9BQU8sRUFBRSxLQUFLLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUlyRSxNQUFNLFVBQVUsVUFBVSxDQUFDLE9BQWlEO0lBQzFFLE1BQU0sVUFBVSxHQUFRLEVBQUUsQ0FBQztJQUUzQixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUNsQyxVQUFVLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBWSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDdkQsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUNyQyxRQUFnQixFQUNoQixVQUE2QyxFQUM3QyxRQUFnQjtJQUVoQixPQUFPLElBQUksQ0FBQyxFQUFFO1FBQ1osTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFELE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sWUFBWSxHQUFHLG1CQUFtQixDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFckUsT0FBTyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FDL0IsUUFBZ0IsRUFDaEIsVUFBNkM7SUFFN0MsT0FBTyxJQUFJLENBQUMsRUFBRTtRQUNaLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNuRCxNQUFNLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRXJFLE9BQU8sd0JBQXdCLENBQzdCLElBQUksRUFDSixVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzFDLEdBQUcsRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDO1lBQ3ZCLEtBQUs7U0FDTixDQUFDLENBQUMsQ0FDSixDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsd0JBQXdCLENBQUMsSUFBeUIsRUFBRSxTQUFjO0lBQ3pFLE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQzFFLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUMxQixJQUF5QixFQUN6QixRQUFnQixFQUNoQixVQUE2QztJQUU3QyxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsb0JBQW9CLENBQUM7SUFDakQsTUFBTSxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFN0MsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUNYLElBQUksQ0FBQyx3QkFBd0IsQ0FDM0IsQ0FBQyxRQUFRLENBQUMsRUFDVixDQUFDLE9BQU8sR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFDN0QsR0FBRyxDQUNKLENBQUM7QUFDTixDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxRQUFnQjtJQUN4QyxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDbkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFCUCwgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0BhYnAvbmcuY29yZSc7XG5pbXBvcnQgeyBtZXJnZSwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEVYVFJBX1BST1BFUlRJRVNfS0VZIH0gZnJvbSAnLi4vY29uc3RhbnRzL2V4dHJhLXByb3BlcnRpZXMnO1xuaW1wb3J0IHsgT2JqZWN0RXh0ZW5zaW9ucyB9IGZyb20gJy4uL21vZGVscy9vYmplY3QtZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyBQcm9wQ2FsbGJhY2sgfSBmcm9tICcuLi9tb2RlbHMvcHJvcHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW51bShtZW1iZXJzOiBPYmplY3RFeHRlbnNpb25zLkV4dGVuc2lvbkVudW1GaWVsZER0b1tdKSB7XG4gIGNvbnN0IGVudW1PYmplY3Q6IGFueSA9IHt9O1xuXG4gIG1lbWJlcnMuZm9yRWFjaCgoeyBuYW1lLCB2YWx1ZSB9KSA9PiB7XG4gICAgZW51bU9iamVjdFsoZW51bU9iamVjdFtuYW1lXSA9IHZhbHVlIGFzIGFueSldID0gbmFtZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVudW1PYmplY3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbnVtVmFsdWVSZXNvbHZlcjxUID0gYW55PihcbiAgZW51bVR5cGU6IHN0cmluZyxcbiAgbG9va3VwRW51bTogT2JqZWN0RXh0ZW5zaW9ucy5FeHRlbnNpb25FbnVtRHRvLFxuICBwcm9wTmFtZTogc3RyaW5nLFxuKTogUHJvcENhbGxiYWNrPFQsIE9ic2VydmFibGU8c3RyaW5nPj4ge1xuICByZXR1cm4gZGF0YSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBkYXRhLnJlY29yZFtFWFRSQV9QUk9QRVJUSUVTX0tFWV1bcHJvcE5hbWVdO1xuICAgIGNvbnN0IGtleSA9IGxvb2t1cEVudW0udHJhbnNmb3JtZWRbdmFsdWVdO1xuICAgIGNvbnN0IGwxMG4gPSBkYXRhLmdldEluamVjdGVkKExvY2FsaXphdGlvblNlcnZpY2UpO1xuICAgIGNvbnN0IGxvY2FsaXplRW51bSA9IGNyZWF0ZUVudW1Mb2NhbGl6ZXIobDEwbiwgZW51bVR5cGUsIGxvb2t1cEVudW0pO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2FsaXphdGlvblN0cmVhbShsMTBuLCBsb2NhbGl6ZUVudW0oa2V5KSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbnVtT3B0aW9uczxUID0gYW55PihcbiAgZW51bVR5cGU6IHN0cmluZyxcbiAgbG9va3VwRW51bTogT2JqZWN0RXh0ZW5zaW9ucy5FeHRlbnNpb25FbnVtRHRvLFxuKTogUHJvcENhbGxiYWNrPFQsIE9ic2VydmFibGU8QUJQLk9wdGlvbjxhbnk+W10+PiB7XG4gIHJldHVybiBkYXRhID0+IHtcbiAgICBjb25zdCBsMTBuID0gZGF0YS5nZXRJbmplY3RlZChMb2NhbGl6YXRpb25TZXJ2aWNlKTtcbiAgICBjb25zdCBsb2NhbGl6ZUVudW0gPSBjcmVhdGVFbnVtTG9jYWxpemVyKGwxMG4sIGVudW1UeXBlLCBsb29rdXBFbnVtKTtcblxuICAgIHJldHVybiBjcmVhdGVMb2NhbGl6YXRpb25TdHJlYW0oXG4gICAgICBsMTBuLFxuICAgICAgbG9va3VwRW51bS5maWVsZHMubWFwKCh7IG5hbWUsIHZhbHVlIH0pID0+ICh7XG4gICAgICAgIGtleTogbG9jYWxpemVFbnVtKG5hbWUpLFxuICAgICAgICB2YWx1ZSxcbiAgICAgIH0pKSxcbiAgICApO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhbGl6YXRpb25TdHJlYW0obDEwbjogTG9jYWxpemF0aW9uU2VydmljZSwgbWFwVGFyZ2V0OiBhbnkpIHtcbiAgcmV0dXJuIG1lcmdlKG9mKG51bGwpLCBsMTBuLmxhbmd1YWdlQ2hhbmdlJCkucGlwZShtYXAoKCkgPT4gbWFwVGFyZ2V0KSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVudW1Mb2NhbGl6ZXIoXG4gIGwxMG46IExvY2FsaXphdGlvblNlcnZpY2UsXG4gIGVudW1UeXBlOiBzdHJpbmcsXG4gIGxvb2t1cEVudW06IE9iamVjdEV4dGVuc2lvbnMuRXh0ZW5zaW9uRW51bUR0byxcbik6IChrZXk6IHN0cmluZykgPT4gc3RyaW5nIHtcbiAgY29uc3QgcmVzb3VyY2UgPSBsb29rdXBFbnVtLmxvY2FsaXphdGlvblJlc291cmNlO1xuICBjb25zdCBzaG9ydFR5cGUgPSBnZXRTaG9ydEVudW1UeXBlKGVudW1UeXBlKTtcblxuICByZXR1cm4ga2V5ID0+XG4gICAgbDEwbi5sb2NhbGl6ZVdpdGhGYWxsYmFja1N5bmMoXG4gICAgICBbcmVzb3VyY2VdLFxuICAgICAgWydFbnVtOicgKyBzaG9ydFR5cGUgKyAnLicgKyBrZXksIHNob3J0VHlwZSArICcuJyArIGtleSwga2V5XSxcbiAgICAgIGtleSxcbiAgICApO1xufVxuXG5mdW5jdGlvbiBnZXRTaG9ydEVudW1UeXBlKGVudW1UeXBlOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gZW51bVR5cGUuc3BsaXQoJy4nKS5wb3AoKTtcbn1cbiJdfQ==