import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, Optional, SkipSelf, ViewChild, } from '@angular/core';
import { ControlContainer } from '@angular/forms';
import { NgbDateAdapter, NgbInputDatepicker, NgbTimeAdapter, NgbTimepicker, } from '@ng-bootstrap/ng-bootstrap';
import { DateTimeAdapter } from '../../adapters/date-time.adapter';
import { selfFactory } from '../../utils/factory.util';
const ɵ0 = selfFactory;
export class DateTimePickerComponent {
    constructor(cdRef) {
        this.cdRef = cdRef;
        this.meridian = false;
    }
    setDate(datestr) {
        this.date.writeValue(datestr);
    }
    setTime(datestr) {
        this.time.writeValue(datestr);
    }
}
DateTimePickerComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'abpDateTimePicker',
                selector: 'abp-date-time-picker',
                template: `
    <input
      [id]="prop.id"
      [formControlName]="prop.name"
      (ngModelChange)="setTime($event)"
      (click)="datepicker.open()"
      (keyup.space)="datepicker.open()"
      ngbDatepicker
      #datepicker="ngbDatepicker"
      type="text"
      class="form-control"
    />
    <ngb-timepicker
      #timepicker
      [formControlName]="prop.name"
      (ngModelChange)="setDate($event)"
      [meridian]="meridian"
    ></ngb-timepicker>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                viewProviders: [
                    {
                        provide: ControlContainer,
                        useFactory: ɵ0,
                        deps: [[new Optional(), new SkipSelf(), ControlContainer]],
                    },
                    {
                        provide: NgbDateAdapter,
                        useClass: DateTimeAdapter,
                    },
                    {
                        provide: NgbTimeAdapter,
                        useClass: DateTimeAdapter,
                    },
                ]
            },] }
];
DateTimePickerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
DateTimePickerComponent.propDecorators = {
    prop: [{ type: Input }],
    meridian: [{ type: Input }],
    date: [{ type: ViewChild, args: [NgbInputDatepicker,] }],
    time: [{ type: ViewChild, args: [NgbTimepicker,] }]
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10aW1lLXBpY2tlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy90aGVtZS1zaGFyZWQvZXh0ZW5zaW9ucy9zcmMvbGliL2NvbXBvbmVudHMvZGF0ZS10aW1lLXBpY2tlci9kYXRlLXRpbWUtcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsS0FBSyxFQUNMLFFBQVEsRUFDUixRQUFRLEVBQ1IsU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xELE9BQU8sRUFDTCxjQUFjLEVBQ2Qsa0JBQWtCLEVBQ2xCLGNBQWMsRUFDZCxhQUFhLEdBQ2QsTUFBTSw0QkFBNEIsQ0FBQztBQUNwQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFbkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDBCQUEwQixDQUFDO1dBNEJyQyxXQUFXO0FBYTdCLE1BQU0sT0FBTyx1QkFBdUI7SUFPbEMsWUFBNEIsS0FBd0I7UUFBeEIsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFMM0MsYUFBUSxHQUFHLEtBQUssQ0FBQztJQUs2QixDQUFDO0lBRXhELE9BQU8sQ0FBQyxPQUFlO1FBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxPQUFPLENBQUMsT0FBZTtRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7WUF0REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBa0JUO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxhQUFhLEVBQUU7b0JBQ2I7d0JBQ0UsT0FBTyxFQUFFLGdCQUFnQjt3QkFDekIsVUFBVSxJQUFhO3dCQUN2QixJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsSUFBSSxRQUFRLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO3FCQUMzRDtvQkFDRDt3QkFDRSxPQUFPLEVBQUUsY0FBYzt3QkFDdkIsUUFBUSxFQUFFLGVBQWU7cUJBQzFCO29CQUNEO3dCQUNFLE9BQU8sRUFBRSxjQUFjO3dCQUN2QixRQUFRLEVBQUUsZUFBZTtxQkFDMUI7aUJBQ0Y7YUFDRjs7O1lBeERDLGlCQUFpQjs7O21CQTBEaEIsS0FBSzt1QkFDTCxLQUFLO21CQUVMLFNBQVMsU0FBQyxrQkFBa0I7bUJBQzVCLFNBQVMsU0FBQyxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBPcHRpb25hbCxcbiAgU2tpcFNlbGYsXG4gIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sQ29udGFpbmVyIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtcbiAgTmdiRGF0ZUFkYXB0ZXIsXG4gIE5nYklucHV0RGF0ZXBpY2tlcixcbiAgTmdiVGltZUFkYXB0ZXIsXG4gIE5nYlRpbWVwaWNrZXIsXG59IGZyb20gJ0BuZy1ib290c3RyYXAvbmctYm9vdHN0cmFwJztcbmltcG9ydCB7IERhdGVUaW1lQWRhcHRlciB9IGZyb20gJy4uLy4uL2FkYXB0ZXJzL2RhdGUtdGltZS5hZGFwdGVyJztcbmltcG9ydCB7IEZvcm1Qcm9wIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2Zvcm0tcHJvcHMnO1xuaW1wb3J0IHsgc2VsZkZhY3RvcnkgfSBmcm9tICcuLi8uLi91dGlscy9mYWN0b3J5LnV0aWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgZXhwb3J0QXM6ICdhYnBEYXRlVGltZVBpY2tlcicsXG4gIHNlbGVjdG9yOiAnYWJwLWRhdGUtdGltZS1waWNrZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxpbnB1dFxuICAgICAgW2lkXT1cInByb3AuaWRcIlxuICAgICAgW2Zvcm1Db250cm9sTmFtZV09XCJwcm9wLm5hbWVcIlxuICAgICAgKG5nTW9kZWxDaGFuZ2UpPVwic2V0VGltZSgkZXZlbnQpXCJcbiAgICAgIChjbGljayk9XCJkYXRlcGlja2VyLm9wZW4oKVwiXG4gICAgICAoa2V5dXAuc3BhY2UpPVwiZGF0ZXBpY2tlci5vcGVuKClcIlxuICAgICAgbmdiRGF0ZXBpY2tlclxuICAgICAgI2RhdGVwaWNrZXI9XCJuZ2JEYXRlcGlja2VyXCJcbiAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICAvPlxuICAgIDxuZ2ItdGltZXBpY2tlclxuICAgICAgI3RpbWVwaWNrZXJcbiAgICAgIFtmb3JtQ29udHJvbE5hbWVdPVwicHJvcC5uYW1lXCJcbiAgICAgIChuZ01vZGVsQ2hhbmdlKT1cInNldERhdGUoJGV2ZW50KVwiXG4gICAgICBbbWVyaWRpYW5dPVwibWVyaWRpYW5cIlxuICAgID48L25nYi10aW1lcGlja2VyPlxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdmlld1Byb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IENvbnRyb2xDb250YWluZXIsXG4gICAgICB1c2VGYWN0b3J5OiBzZWxmRmFjdG9yeSxcbiAgICAgIGRlcHM6IFtbbmV3IE9wdGlvbmFsKCksIG5ldyBTa2lwU2VsZigpLCBDb250cm9sQ29udGFpbmVyXV0sXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBOZ2JEYXRlQWRhcHRlcixcbiAgICAgIHVzZUNsYXNzOiBEYXRlVGltZUFkYXB0ZXIsXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBOZ2JUaW1lQWRhcHRlcixcbiAgICAgIHVzZUNsYXNzOiBEYXRlVGltZUFkYXB0ZXIsXG4gICAgfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgRGF0ZVRpbWVQaWNrZXJDb21wb25lbnQge1xuICBASW5wdXQoKSBwcm9wOiBGb3JtUHJvcDtcbiAgQElucHV0KCkgbWVyaWRpYW4gPSBmYWxzZTtcblxuICBAVmlld0NoaWxkKE5nYklucHV0RGF0ZXBpY2tlcikgZGF0ZTogTmdiSW5wdXREYXRlcGlja2VyO1xuICBAVmlld0NoaWxkKE5nYlRpbWVwaWNrZXIpIHRpbWU6IE5nYlRpbWVwaWNrZXI7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBzZXREYXRlKGRhdGVzdHI6IHN0cmluZykge1xuICAgIHRoaXMuZGF0ZS53cml0ZVZhbHVlKGRhdGVzdHIpO1xuICB9XG5cbiAgc2V0VGltZShkYXRlc3RyOiBzdHJpbmcpIHtcbiAgICB0aGlzLnRpbWUud3JpdGVWYWx1ZShkYXRlc3RyKTtcbiAgfVxufVxuIl19