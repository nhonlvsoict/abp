import { Prop, PropData, PropList, Props, PropsFactory, } from './props';
export class FormPropList extends PropList {
}
export class FormProps extends Props {
    constructor() {
        super(...arguments);
        this._ctor = FormPropList;
    }
}
export class CreateFormPropsFactory extends PropsFactory {
    constructor() {
        super(...arguments);
        this._ctor = FormProps;
    }
}
export class EditFormPropsFactory extends PropsFactory {
    constructor() {
        super(...arguments);
        this._ctor = FormProps;
    }
}
export class FormProp extends Prop {
    constructor(options) {
        super(options.type, options.name, options.displayName, options.permission, options.visible, options.isExtra);
        this.asyncValidators = options.asyncValidators || (_ => []);
        this.validators = options.validators || (_ => []);
        this.disabled = options.disabled || (_ => false);
        this.readonly = options.readonly || (_ => false);
        this.autocomplete = options.autocomplete || 'off';
        this.options = options.options;
        this.id = options.id || options.name;
        const defaultValue = options.defaultValue;
        this.defaultValue = isFalsyValue(defaultValue) ? defaultValue : defaultValue || null;
    }
    static create(options) {
        return new FormProp(options);
    }
    static createMany(arrayOfOptions) {
        return arrayOfOptions.map(FormProp.create);
    }
}
export class FormPropData extends PropData {
    constructor(injector, record) {
        super();
        this.record = record;
        // tslint:disable-next-line
        this.getInjected = injector.get.bind(injector);
    }
}
function isFalsyValue(defaultValue) {
    return [0, '', false].indexOf(defaultValue) > -1;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1wcm9wcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RoZW1lLXNoYXJlZC9leHRlbnNpb25zL3NyYy9saWIvbW9kZWxzL2Zvcm0tcHJvcHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsT0FBTyxFQUNMLElBQUksRUFJSixRQUFRLEVBQ1IsUUFBUSxFQUVSLEtBQUssRUFDTCxZQUFZLEdBQ2IsTUFBTSxTQUFTLENBQUM7QUFFakIsTUFBTSxPQUFPLFlBQXNCLFNBQVEsUUFBd0I7Q0FBRztBQUV0RSxNQUFNLE9BQU8sU0FBbUIsU0FBUSxLQUFzQjtJQUE5RDs7UUFDWSxVQUFLLEdBQTBCLFlBQVksQ0FBQztJQUN4RCxDQUFDO0NBQUE7QUFFRCxNQUFNLE9BQU8sc0JBQWdDLFNBQVEsWUFBMEI7SUFBL0U7O1FBQ1ksVUFBSyxHQUF1QixTQUFTLENBQUM7SUFDbEQsQ0FBQztDQUFBO0FBRUQsTUFBTSxPQUFPLG9CQUE4QixTQUFRLFlBQTBCO0lBQTdFOztRQUNZLFVBQUssR0FBdUIsU0FBUyxDQUFDO0lBQ2xELENBQUM7Q0FBQTtBQUVELE1BQU0sT0FBTyxRQUFrQixTQUFRLElBQU87SUFVNUMsWUFBWSxPQUEyQjtRQUNyQyxLQUFLLENBQ0gsT0FBTyxDQUFDLElBQUksRUFDWixPQUFPLENBQUMsSUFBSSxFQUNaLE9BQU8sQ0FBQyxXQUFXLEVBQ25CLE9BQU8sQ0FBQyxVQUFVLEVBQ2xCLE9BQU8sQ0FBQyxPQUFPLEVBQ2YsT0FBTyxDQUFDLE9BQU8sQ0FDaEIsQ0FBQztRQUVGLElBQUksQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDLGVBQWUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsWUFBWSxJQUFJLEtBQUssQ0FBQztRQUNsRCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDL0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDckMsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztRQUMxQyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDO0lBQ3ZGLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFVLE9BQTJCO1FBQ2hELE9BQU8sSUFBSSxRQUFRLENBQUksT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQVUsY0FBb0M7UUFDN0QsT0FBTyxjQUFjLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sWUFBc0IsU0FBUSxRQUFXO0lBR3BELFlBQVksUUFBa0IsRUFBa0IsTUFBUztRQUN2RCxLQUFLLEVBQUUsQ0FBQztRQURzQyxXQUFNLEdBQU4sTUFBTSxDQUFHO1FBR3ZELDJCQUEyQjtRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FDRjtBQXlCRCxTQUFTLFlBQVksQ0FBQyxZQUFzQztJQUMxRCxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzFELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lICovXG5pbXBvcnQgeyBBQlAgfSBmcm9tICdAYWJwL25nLmNvcmUnO1xuaW1wb3J0IHsgSW5qZWN0b3IsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFzeW5jVmFsaWRhdG9yRm4sIFZhbGlkYXRvckZuIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTyB9IGZyb20gJ3RzLXRvb2xiZWx0JztcbmltcG9ydCB7XG4gIFByb3AsXG4gIFByb3BDYWxsYmFjayxcbiAgUHJvcENvbnRyaWJ1dG9yQ2FsbGJhY2ssXG4gIFByb3BDb250cmlidXRvckNhbGxiYWNrcyxcbiAgUHJvcERhdGEsXG4gIFByb3BMaXN0LFxuICBQcm9wUHJlZGljYXRlLFxuICBQcm9wcyxcbiAgUHJvcHNGYWN0b3J5LFxufSBmcm9tICcuL3Byb3BzJztcblxuZXhwb3J0IGNsYXNzIEZvcm1Qcm9wTGlzdDxSID0gYW55PiBleHRlbmRzIFByb3BMaXN0PFIsIEZvcm1Qcm9wPFI+PiB7fVxuXG5leHBvcnQgY2xhc3MgRm9ybVByb3BzPFIgPSBhbnk+IGV4dGVuZHMgUHJvcHM8Rm9ybVByb3BMaXN0PFI+PiB7XG4gIHByb3RlY3RlZCBfY3RvcjogVHlwZTxGb3JtUHJvcExpc3Q8Uj4+ID0gRm9ybVByb3BMaXN0O1xufVxuXG5leHBvcnQgY2xhc3MgQ3JlYXRlRm9ybVByb3BzRmFjdG9yeTxSID0gYW55PiBleHRlbmRzIFByb3BzRmFjdG9yeTxGb3JtUHJvcHM8Uj4+IHtcbiAgcHJvdGVjdGVkIF9jdG9yOiBUeXBlPEZvcm1Qcm9wczxSPj4gPSBGb3JtUHJvcHM7XG59XG5cbmV4cG9ydCBjbGFzcyBFZGl0Rm9ybVByb3BzRmFjdG9yeTxSID0gYW55PiBleHRlbmRzIFByb3BzRmFjdG9yeTxGb3JtUHJvcHM8Uj4+IHtcbiAgcHJvdGVjdGVkIF9jdG9yOiBUeXBlPEZvcm1Qcm9wczxSPj4gPSBGb3JtUHJvcHM7XG59XG5cbmV4cG9ydCBjbGFzcyBGb3JtUHJvcDxSID0gYW55PiBleHRlbmRzIFByb3A8Uj4ge1xuICByZWFkb25seSB2YWxpZGF0b3JzOiBQcm9wQ2FsbGJhY2s8UiwgVmFsaWRhdG9yRm5bXT47XG4gIHJlYWRvbmx5IGFzeW5jVmFsaWRhdG9yczogUHJvcENhbGxiYWNrPFIsIEFzeW5jVmFsaWRhdG9yRm5bXT47XG4gIHJlYWRvbmx5IGRpc2FibGVkOiBQcm9wUHJlZGljYXRlPFI+O1xuICByZWFkb25seSByZWFkb25seTogUHJvcFByZWRpY2F0ZTxSPjtcbiAgcmVhZG9ubHkgYXV0b2NvbXBsZXRlOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGRlZmF1bHRWYWx1ZTogYm9vbGVhbiB8IG51bWJlciB8IHN0cmluZyB8IERhdGU7XG4gIHJlYWRvbmx5IG9wdGlvbnM6IFByb3BDYWxsYmFjazxSLCBPYnNlcnZhYmxlPEFCUC5PcHRpb248YW55PltdPj4gfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IGlkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogRm9ybVByb3BPcHRpb25zPFI+KSB7XG4gICAgc3VwZXIoXG4gICAgICBvcHRpb25zLnR5cGUsXG4gICAgICBvcHRpb25zLm5hbWUsXG4gICAgICBvcHRpb25zLmRpc3BsYXlOYW1lLFxuICAgICAgb3B0aW9ucy5wZXJtaXNzaW9uLFxuICAgICAgb3B0aW9ucy52aXNpYmxlLFxuICAgICAgb3B0aW9ucy5pc0V4dHJhLFxuICAgICk7XG5cbiAgICB0aGlzLmFzeW5jVmFsaWRhdG9ycyA9IG9wdGlvbnMuYXN5bmNWYWxpZGF0b3JzIHx8IChfID0+IFtdKTtcbiAgICB0aGlzLnZhbGlkYXRvcnMgPSBvcHRpb25zLnZhbGlkYXRvcnMgfHwgKF8gPT4gW10pO1xuICAgIHRoaXMuZGlzYWJsZWQgPSBvcHRpb25zLmRpc2FibGVkIHx8IChfID0+IGZhbHNlKTtcbiAgICB0aGlzLnJlYWRvbmx5ID0gb3B0aW9ucy5yZWFkb25seSB8fCAoXyA9PiBmYWxzZSk7XG4gICAgdGhpcy5hdXRvY29tcGxldGUgPSBvcHRpb25zLmF1dG9jb21wbGV0ZSB8fCAnb2ZmJztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zLm9wdGlvbnM7XG4gICAgdGhpcy5pZCA9IG9wdGlvbnMuaWQgfHwgb3B0aW9ucy5uYW1lO1xuICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IG9wdGlvbnMuZGVmYXVsdFZhbHVlO1xuICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gaXNGYWxzeVZhbHVlKGRlZmF1bHRWYWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiBkZWZhdWx0VmFsdWUgfHwgbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGU8UiA9IGFueT4ob3B0aW9uczogRm9ybVByb3BPcHRpb25zPFI+KSB7XG4gICAgcmV0dXJuIG5ldyBGb3JtUHJvcDxSPihvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVNYW55PFIgPSBhbnk+KGFycmF5T2ZPcHRpb25zOiBGb3JtUHJvcE9wdGlvbnM8Uj5bXSkge1xuICAgIHJldHVybiBhcnJheU9mT3B0aW9ucy5tYXAoRm9ybVByb3AuY3JlYXRlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRm9ybVByb3BEYXRhPFIgPSBhbnk+IGV4dGVuZHMgUHJvcERhdGE8Uj4ge1xuICBnZXRJbmplY3RlZDogUHJvcERhdGE8Uj5bJ2dldEluamVjdGVkJ107XG5cbiAgY29uc3RydWN0b3IoaW5qZWN0b3I6IEluamVjdG9yLCBwdWJsaWMgcmVhZG9ubHkgcmVjb3JkOiBSKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgIHRoaXMuZ2V0SW5qZWN0ZWQgPSBpbmplY3Rvci5nZXQuYmluZChpbmplY3Rvcik7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgRm9ybVByb3BPcHRpb25zPFIgPSBhbnk+ID0gTy5PcHRpb25hbDxcbiAgTy5Xcml0YWJsZTxGb3JtUHJvcDxSPj4sXG4gIHwgJ3Blcm1pc3Npb24nXG4gIHwgJ3Zpc2libGUnXG4gIHwgJ2Rpc3BsYXlOYW1lJ1xuICB8ICdpc0V4dHJhJ1xuICB8ICd2YWxpZGF0b3JzJ1xuICB8ICdhc3luY1ZhbGlkYXRvcnMnXG4gIHwgJ2Rpc2FibGVkJ1xuICB8ICdyZWFkb25seSdcbiAgfCAnYXV0b2NvbXBsZXRlJ1xuICB8ICdkZWZhdWx0VmFsdWUnXG4gIHwgJ29wdGlvbnMnXG4gIHwgJ2lkJ1xuPjtcblxuZXhwb3J0IHR5cGUgQ3JlYXRlRm9ybVByb3BEZWZhdWx0czxSID0gYW55PiA9IFJlY29yZDxzdHJpbmcsIEZvcm1Qcm9wPFI+W10+O1xuZXhwb3J0IHR5cGUgQ3JlYXRlRm9ybVByb3BDb250cmlidXRvckNhbGxiYWNrPFIgPSBhbnk+ID0gUHJvcENvbnRyaWJ1dG9yQ2FsbGJhY2s8Rm9ybVByb3BMaXN0PFI+PjtcbmV4cG9ydCB0eXBlIENyZWF0ZUZvcm1Qcm9wQ29udHJpYnV0b3JDYWxsYmFja3M8UiA9IGFueT4gPSBQcm9wQ29udHJpYnV0b3JDYWxsYmFja3M8Rm9ybVByb3BMaXN0PFI+PjtcbmV4cG9ydCB0eXBlIEVkaXRGb3JtUHJvcERlZmF1bHRzPFIgPSBhbnk+ID0gUmVjb3JkPHN0cmluZywgRm9ybVByb3A8Uj5bXT47XG5leHBvcnQgdHlwZSBFZGl0Rm9ybVByb3BDb250cmlidXRvckNhbGxiYWNrPFIgPSBhbnk+ID0gUHJvcENvbnRyaWJ1dG9yQ2FsbGJhY2s8Rm9ybVByb3BMaXN0PFI+PjtcbmV4cG9ydCB0eXBlIEVkaXRGb3JtUHJvcENvbnRyaWJ1dG9yQ2FsbGJhY2tzPFIgPSBhbnk+ID0gUHJvcENvbnRyaWJ1dG9yQ2FsbGJhY2tzPEZvcm1Qcm9wTGlzdDxSPj47XG5cbmZ1bmN0aW9uIGlzRmFsc3lWYWx1ZShkZWZhdWx0VmFsdWU6IEZvcm1Qcm9wWydkZWZhdWx0VmFsdWUnXSk6IGJvb2xlYW4ge1xuICByZXR1cm4gWzAsICcnLCBmYWxzZV0uaW5kZXhPZihkZWZhdWx0VmFsdWUgYXMgYW55KSA+IC0xO1xufVxuIl19