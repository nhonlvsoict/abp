import { getLocaleDirection, LazyLoadService, LOADING_STRATEGY, LocalizationService, } from '@abp/ng.core';
import { Injectable, Injector } from '@angular/core';
import { startWith } from 'rxjs/operators';
import { BOOTSTRAP } from '../constants/styles';
import { LAZY_STYLES } from '../tokens/lazy-styles.token';
import * as i0 from "@angular/core";
export class LazyStyleHandler {
    constructor(injector) {
        this._dir = 'ltr';
        this.loaded = new Map();
        this.setStyles(injector);
        this.setLazyLoad(injector);
        this.listenToLanguageChanges(injector);
    }
    set dir(dir) {
        if (dir === this._dir)
            return;
        this.switchCSS(dir);
        this.setBodyDir(dir);
        this._dir = dir;
    }
    get dir() {
        return this._dir;
    }
    getHrefFromLink(link) {
        if (!link)
            return '';
        const a = document.createElement('a');
        a.href = link.href;
        return a.pathname.replace(/^\//, '');
    }
    getLoadedBootstrap() {
        const href = createLazyStyleHref(BOOTSTRAP, this.dir);
        const selector = `[href*="${href.replace(/\.css$/, '')}"]`;
        const link = document.querySelector(selector);
        return { href, link };
    }
    listenToLanguageChanges(injector) {
        const l10n = injector.get(LocalizationService);
        // will always listen, no need to unsubscribe
        l10n.languageChange$.pipe(startWith(l10n.currentLang)).subscribe(locale => {
            this.dir = getLocaleDirection(locale);
        });
    }
    setBodyDir(dir) {
        document.body.dir = dir;
    }
    setLazyLoad(injector) {
        this.lazyLoad = injector.get(LazyLoadService);
        const { href, link } = this.getLoadedBootstrap();
        this.lazyLoad.loaded.set(href, link);
    }
    setStyles(injector) {
        this.styles = injector.get(LAZY_STYLES, [BOOTSTRAP]);
    }
    switchCSS(dir) {
        this.styles.forEach(style => {
            const oldHref = createLazyStyleHref(style, this.dir);
            const newHref = createLazyStyleHref(style, dir);
            const link = this.loaded.get(newHref);
            const href = this.getHrefFromLink(link) || newHref;
            const strategy = LOADING_STRATEGY.PrependAnonymousStyleToHead(href);
            this.lazyLoad.load(strategy).subscribe(() => {
                const oldLink = this.lazyLoad.loaded.get(oldHref);
                this.loaded.delete(newHref);
                this.loaded.set(oldHref, oldLink);
                const newLink = this.lazyLoad.loaded.get(href);
                this.lazyLoad.loaded.delete(href);
                this.lazyLoad.loaded.set(newHref, newLink);
                this.lazyLoad.remove(oldHref);
            });
        });
    }
}
LazyStyleHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function LazyStyleHandler_Factory() { return new LazyStyleHandler(i0.ɵɵinject(i0.INJECTOR)); }, token: LazyStyleHandler, providedIn: "root" });
LazyStyleHandler.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
LazyStyleHandler.ctorParameters = () => [
    { type: Injector }
];
export function createLazyStyleHref(style, dir) {
    return style.replace(/{{\s*dir\s*}}/g, dir);
}
export function initLazyStyleHandler(injector) {
    return () => new LazyStyleHandler(injector);
}
//# sourceMappingURL=data:application/json;base64,