import { ConfigStateService } from '@abp/ng.core';
import { Validators } from '@angular/forms';
import { validatePassword } from '@ngx-validate/core';
const { minLength, maxLength } = Validators;
export function getPasswordValidators(injector) {
    const getRule = getRuleFn(injector);
    const passwordRulesArr = [];
    let requiredLength = 1;
    if (getRule('RequireDigit') === 'true') {
        passwordRulesArr.push('number');
    }
    if (getRule('RequireLowercase') === 'true') {
        passwordRulesArr.push('small');
    }
    if (getRule('RequireUppercase') === 'true') {
        passwordRulesArr.push('capital');
    }
    if (getRule('RequireNonAlphanumeric') === 'true') {
        passwordRulesArr.push('special');
    }
    if (Number.isInteger(+getRule('RequiredLength'))) {
        requiredLength = +getRule('RequiredLength');
    }
    return [validatePassword(passwordRulesArr), minLength(requiredLength), maxLength(128)];
}
function getRuleFn(injector) {
    const configState = injector.get(ConfigStateService);
    return (key) => {
        const passwordRules = configState.getSettings('Identity.Password');
        return (passwordRules[`Abp.Identity.Password.${key}`] || '').toLowerCase();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RoZW1lLXNoYXJlZC9zcmMvbGliL3V0aWxzL3ZhbGlkYXRpb24tdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFPLGtCQUFrQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXZELE9BQU8sRUFBZSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RCxPQUFPLEVBQWlCLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFckUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsR0FBRyxVQUFVLENBQUM7QUFFNUMsTUFBTSxVQUFVLHFCQUFxQixDQUFDLFFBQWtCO0lBQ3RELE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVwQyxNQUFNLGdCQUFnQixHQUFHLEVBQW1CLENBQUM7SUFDN0MsSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDO0lBRXZCLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLE1BQU0sRUFBRTtRQUN0QyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDakM7SUFFRCxJQUFJLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLE1BQU0sRUFBRTtRQUMxQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDaEM7SUFFRCxJQUFJLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLE1BQU0sRUFBRTtRQUMxQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDbEM7SUFFRCxJQUFJLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLE1BQU0sRUFBRTtRQUNoRCxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDbEM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFO1FBQ2hELGNBQWMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0tBQzdDO0lBRUQsT0FBTyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLEVBQUUsU0FBUyxDQUFDLGNBQWMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3pGLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxRQUFrQjtJQUNuQyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFFckQsT0FBTyxDQUFDLEdBQVcsRUFBRSxFQUFFO1FBQ3JCLE1BQU0sYUFBYSxHQUEyQixXQUFXLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFFM0YsT0FBTyxDQUFDLGFBQWEsQ0FBQyx5QkFBeUIsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM3RSxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQUJQLCBDb25maWdTdGF0ZVNlcnZpY2UgfSBmcm9tICdAYWJwL25nLmNvcmUnO1xuaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZhbGlkYXRvckZuLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgUGFzc3dvcmRSdWxlcywgdmFsaWRhdGVQYXNzd29yZCB9IGZyb20gJ0BuZ3gtdmFsaWRhdGUvY29yZSc7XG5cbmNvbnN0IHsgbWluTGVuZ3RoLCBtYXhMZW5ndGggfSA9IFZhbGlkYXRvcnM7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXNzd29yZFZhbGlkYXRvcnMoaW5qZWN0b3I6IEluamVjdG9yKTogVmFsaWRhdG9yRm5bXSB7XG4gIGNvbnN0IGdldFJ1bGUgPSBnZXRSdWxlRm4oaW5qZWN0b3IpO1xuXG4gIGNvbnN0IHBhc3N3b3JkUnVsZXNBcnIgPSBbXSBhcyBQYXNzd29yZFJ1bGVzO1xuICBsZXQgcmVxdWlyZWRMZW5ndGggPSAxO1xuXG4gIGlmIChnZXRSdWxlKCdSZXF1aXJlRGlnaXQnKSA9PT0gJ3RydWUnKSB7XG4gICAgcGFzc3dvcmRSdWxlc0Fyci5wdXNoKCdudW1iZXInKTtcbiAgfVxuXG4gIGlmIChnZXRSdWxlKCdSZXF1aXJlTG93ZXJjYXNlJykgPT09ICd0cnVlJykge1xuICAgIHBhc3N3b3JkUnVsZXNBcnIucHVzaCgnc21hbGwnKTtcbiAgfVxuXG4gIGlmIChnZXRSdWxlKCdSZXF1aXJlVXBwZXJjYXNlJykgPT09ICd0cnVlJykge1xuICAgIHBhc3N3b3JkUnVsZXNBcnIucHVzaCgnY2FwaXRhbCcpO1xuICB9XG5cbiAgaWYgKGdldFJ1bGUoJ1JlcXVpcmVOb25BbHBoYW51bWVyaWMnKSA9PT0gJ3RydWUnKSB7XG4gICAgcGFzc3dvcmRSdWxlc0Fyci5wdXNoKCdzcGVjaWFsJyk7XG4gIH1cblxuICBpZiAoTnVtYmVyLmlzSW50ZWdlcigrZ2V0UnVsZSgnUmVxdWlyZWRMZW5ndGgnKSkpIHtcbiAgICByZXF1aXJlZExlbmd0aCA9ICtnZXRSdWxlKCdSZXF1aXJlZExlbmd0aCcpO1xuICB9XG5cbiAgcmV0dXJuIFt2YWxpZGF0ZVBhc3N3b3JkKHBhc3N3b3JkUnVsZXNBcnIpLCBtaW5MZW5ndGgocmVxdWlyZWRMZW5ndGgpLCBtYXhMZW5ndGgoMTI4KV07XG59XG5cbmZ1bmN0aW9uIGdldFJ1bGVGbihpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgY29uc3QgY29uZmlnU3RhdGUgPSBpbmplY3Rvci5nZXQoQ29uZmlnU3RhdGVTZXJ2aWNlKTtcblxuICByZXR1cm4gKGtleTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgcGFzc3dvcmRSdWxlczogQUJQLkRpY3Rpb25hcnk8c3RyaW5nPiA9IGNvbmZpZ1N0YXRlLmdldFNldHRpbmdzKCdJZGVudGl0eS5QYXNzd29yZCcpO1xuXG4gICAgcmV0dXJuIChwYXNzd29yZFJ1bGVzW2BBYnAuSWRlbnRpdHkuUGFzc3dvcmQuJHtrZXl9YF0gfHwgJycpLnRvTG93ZXJDYXNlKCk7XG4gIH07XG59XG4iXX0=