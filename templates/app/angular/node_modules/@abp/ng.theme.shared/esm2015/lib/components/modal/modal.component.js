import { SubscriptionService, uuid } from '@abp/ng.core';
import { Component, ContentChild, ElementRef, EventEmitter, Inject, Input, isDevMode, Optional, Output, ViewChild } from '@angular/core';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { fromEvent, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, takeUntil } from 'rxjs/operators';
import { Confirmation } from '../../models/confirmation';
import { ConfirmationService } from '../../services/confirmation.service';
import { SUPPRESS_UNSAVED_CHANGES_WARNING } from '../../tokens/suppress-unsaved-changes-warning.token';
import { ButtonComponent } from '../button/button.component';
import { ModalRefService } from './modal-ref.service';
export class ModalComponent {
    constructor(confirmationService, subscription, suppressUnsavedChangesWarningToken, modal, modalRefService) {
        this.confirmationService = confirmationService;
        this.subscription = subscription;
        this.suppressUnsavedChangesWarningToken = suppressUnsavedChangesWarningToken;
        this.modal = modal;
        this.modalRefService = modalRefService;
        /**
         * @deprecated Use centered property of options input instead. To be deleted in v5.0.
         */
        this.centered = false;
        /**
         * @deprecated Use windowClass property of options input instead. To be deleted in v5.0.
         */
        this.modalClass = '';
        /**
         * @deprecated Use size property of options input instead. To be deleted in v5.0.
         */
        this.size = 'lg';
        this.options = {};
        this.suppressUnsavedChangesWarning = this.suppressUnsavedChangesWarningToken;
        this.visibleChange = new EventEmitter();
        this.init = new EventEmitter();
        this.appear = new EventEmitter();
        this.disappear = new EventEmitter();
        this._visible = false;
        this._busy = false;
        this.isConfirmationOpen = false;
        this.destroy$ = new Subject();
        this.modalIdentifier = `modal-${uuid()}`;
        this.toggle$ = new Subject();
        this.initToggleStream();
    }
    get visible() {
        return this._visible;
    }
    set visible(value) {
        if (typeof value !== 'boolean')
            return;
        this.toggle$.next(value);
    }
    get busy() {
        return this._busy;
    }
    set busy(value) {
        if (this.abpSubmit && this.abpSubmit instanceof ButtonComponent) {
            this.abpSubmit.loading = value;
        }
        this._busy = value;
    }
    get modalWindowRef() {
        return document.querySelector(`ngb-modal-window.${this.modalIdentifier}`);
    }
    get isFormDirty() {
        return Boolean(this.modalWindowRef.querySelector('.ng-dirty'));
    }
    ngOnInit() {
        this.modalRefService.register(this);
    }
    dismiss(mode) {
        switch (mode) {
            case 'hard':
                this.visible = false;
                break;
            case 'soft':
                this.close();
                break;
            default:
                break;
        }
    }
    initToggleStream() {
        this.subscription.addOne(this.toggle$.pipe(debounceTime(0), distinctUntilChanged()), value => this.toggle(value));
    }
    toggle(value) {
        var _a;
        this._visible = value;
        this.visibleChange.emit(value);
        if (!value) {
            (_a = this.modalRef) === null || _a === void 0 ? void 0 : _a.dismiss();
            this.disappear.emit();
            this.destroy$.next();
            return;
        }
        setTimeout(() => this.listen(), 0);
        this.modalRef = this.modal.open(this.modalContent, Object.assign(Object.assign({ 
            // TODO: set size to 'lg' when removed the size variable
            size: this.size, centered: this.centered, keyboard: false, scrollable: true, beforeDismiss: () => {
                if (!this.visible)
                    return true;
                this.close();
                return !this.visible;
            } }, this.options), { windowClass: `${this.modalClass} ${this.options.windowClass || ''} ${this.modalIdentifier}` }));
        this.appear.emit();
    }
    ngOnDestroy() {
        this.modalRefService.unregister(this);
        this.toggle(false);
        this.destroy$.next();
    }
    close() {
        if (this.busy)
            return;
        if (this.isFormDirty && !this.suppressUnsavedChangesWarning) {
            if (this.isConfirmationOpen)
                return;
            this.isConfirmationOpen = true;
            this.confirmationService
                .warn('AbpAccount::AreYouSureYouWantToCancelEditingWarningMessage', 'AbpAccount::AreYouSure', { dismissible: false })
                .subscribe((status) => {
                this.isConfirmationOpen = false;
                if (status === Confirmation.Status.confirm) {
                    this.visible = false;
                }
            });
        }
        else {
            this.visible = false;
        }
    }
    listen() {
        fromEvent(this.modalWindowRef, 'keyup')
            .pipe(takeUntil(this.destroy$), debounceTime(150), filter((key) => key && key.key === 'Escape'))
            .subscribe(() => this.close());
        fromEvent(window, 'beforeunload')
            .pipe(takeUntil(this.destroy$))
            .subscribe(event => {
            event.preventDefault();
            if (this.isFormDirty && !this.suppressUnsavedChangesWarning) {
                event.returnValue = true;
            }
            else {
                delete event.returnValue;
            }
        });
        setTimeout(() => {
            if (!this.abpClose)
                return;
            this.warnForDeprecatedClose();
            fromEvent(this.abpClose.nativeElement, 'click')
                .pipe(takeUntil(this.destroy$))
                .subscribe(() => this.close());
        }, 0);
        this.init.emit();
    }
    warnForDeprecatedClose() {
        if (isDevMode()) {
            console.warn('Please use abpClose directive instead of #abpClose template variable. #abpClose will be removed in v5.0');
        }
    }
}
ModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-modal',
                template: "<ng-content></ng-content>\n\n<ng-template #modalContent let-modal>\n  <div id=\"abp-modal-header\" class=\"modal-header\">\n    <ng-container *ngTemplateOutlet=\"abpHeader\"></ng-container>\n    \u200B\n    <button\n      id=\"abp-modal-close-button\"\n      type=\"button\"\n      class=\"close\"\n      aria-label=\"Close\"\n      (click)=\"modal.dismiss()\"\n    >\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div id=\"abp-modal-body\" class=\"modal-body\">\n    <ng-container *ngTemplateOutlet=\"abpBody\"></ng-container>\n  </div>\n  <div *ngIf=\"abpFooter\" id=\"abp-modal-footer\" class=\"modal-footer\">\n    <ng-container *ngTemplateOutlet=\"abpFooter\"></ng-container>\n  </div>\n</ng-template>\n",
                providers: [SubscriptionService],
                styles: [".modal.show{display:block!important}.modal-backdrop{opacity:.8}.modal::-webkit-scrollbar{width:7px}.modal::-webkit-scrollbar-track{background:#ddd}.modal::-webkit-scrollbar-thumb{background:#8a8686}.modal-dialog{z-index:1050}"]
            },] }
];
ModalComponent.ctorParameters = () => [
    { type: ConfirmationService },
    { type: SubscriptionService },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [SUPPRESS_UNSAVED_CHANGES_WARNING,] }] },
    { type: NgbModal },
    { type: ModalRefService }
];
ModalComponent.propDecorators = {
    centered: [{ type: Input }],
    modalClass: [{ type: Input }],
    size: [{ type: Input }],
    visible: [{ type: Input }],
    busy: [{ type: Input }],
    options: [{ type: Input }],
    suppressUnsavedChangesWarning: [{ type: Input }],
    modalContent: [{ type: ViewChild, args: ['modalContent',] }],
    abpHeader: [{ type: ContentChild, args: ['abpHeader', { static: false },] }],
    abpBody: [{ type: ContentChild, args: ['abpBody', { static: false },] }],
    abpFooter: [{ type: ContentChild, args: ['abpFooter', { static: false },] }],
    abpSubmit: [{ type: ContentChild, args: [ButtonComponent, { static: false, read: ButtonComponent },] }],
    abpClose: [{ type: ContentChild, args: ['abpClose', { static: false, read: ElementRef },] }],
    visibleChange: [{ type: Output }],
    init: [{ type: Output }],
    appear: [{ type: Output }],
    disappear: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,