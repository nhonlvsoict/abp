import { DOCUMENT } from '@angular/common';
import { Directive, HostBinding, Inject, Input } from '@angular/core';
import { ColumnMode, DatatableComponent } from '@swimlane/ngx-datatable';
import { fromEvent, Subscription } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
export class NgxDatatableDefaultDirective {
    constructor(table, document) {
        this.table = table;
        this.document = document;
        this.subscription = new Subscription();
        this.resizeDiff = 0;
        this.class = 'material bordered';
        this.table.columnMode = ColumnMode.force;
        this.table.footerHeight = 50;
        this.table.headerHeight = 50;
        this.table.rowHeight = 'auto';
        this.table.scrollbarH = true;
        this.table.virtualization = false;
    }
    get classes() {
        return `ngx-datatable ${this.class}`;
    }
    fixHorizontalGap(scroller) {
        const { body, documentElement } = this.document;
        if (documentElement.scrollHeight !== documentElement.clientHeight) {
            if (this.resizeDiff === 0) {
                this.resizeDiff = window.innerWidth - body.offsetWidth;
                scroller.scrollWidth -= this.resizeDiff;
            }
        }
        else {
            scroller.scrollWidth += this.resizeDiff;
            this.resizeDiff = 0;
        }
    }
    fixStyleOnWindowResize() {
        // avoided @HostListener('window:resize') in favor of performance
        const subscription = fromEvent(window, 'resize')
            .pipe(debounceTime(500))
            .subscribe(() => {
            const { scroller } = this.table.bodyComponent;
            if (!scroller)
                return;
            this.fixHorizontalGap(scroller);
        });
        this.subscription.add(subscription);
    }
    ngAfterViewInit() {
        this.fixStyleOnWindowResize();
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
NgxDatatableDefaultDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line
                selector: 'ngx-datatable[default]',
                exportAs: 'ngxDatatableDefault',
            },] }
];
NgxDatatableDefaultDirective.ctorParameters = () => [
    { type: DatatableComponent },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
NgxDatatableDefaultDirective.propDecorators = {
    class: [{ type: Input }],
    classes: [{ type: HostBinding, args: ['class',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRhdGF0YWJsZS1kZWZhdWx0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RoZW1lLXNoYXJlZC9zcmMvbGliL2RpcmVjdGl2ZXMvbmd4LWRhdGF0YWJsZS1kZWZhdWx0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFpQixTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBcUIsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RixPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFPOUMsTUFBTSxPQUFPLDRCQUE0QjtJQVl2QyxZQUFvQixLQUF5QixFQUE0QixRQUFzQjtRQUEzRSxVQUFLLEdBQUwsS0FBSyxDQUFvQjtRQUE0QixhQUFRLEdBQVIsUUFBUSxDQUFjO1FBWHZGLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVsQyxlQUFVLEdBQUcsQ0FBQyxDQUFDO1FBRWQsVUFBSyxHQUFHLG1CQUFtQixDQUFDO1FBUW5DLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7UUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztJQUNwQyxDQUFDO0lBWkQsSUFDSSxPQUFPO1FBQ1QsT0FBTyxpQkFBaUIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFXTyxnQkFBZ0IsQ0FBQyxRQUEyQjtRQUNsRCxNQUFNLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFaEQsSUFBSSxlQUFlLENBQUMsWUFBWSxLQUFLLGVBQWUsQ0FBQyxZQUFZLEVBQUU7WUFDakUsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLENBQUMsRUFBRTtnQkFDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7Z0JBQ3ZELFFBQVEsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQzthQUN6QztTQUNGO2FBQU07WUFDTCxRQUFRLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDeEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7U0FDckI7SUFDSCxDQUFDO0lBRU8sc0JBQXNCO1FBQzVCLGlFQUFpRTtRQUNqRSxNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQzthQUM3QyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3ZCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDZCxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUM7WUFFOUMsSUFBSSxDQUFDLFFBQVE7Z0JBQUUsT0FBTztZQUV0QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFFTCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzs7WUE3REYsU0FBUyxTQUFDO2dCQUNULDJCQUEyQjtnQkFDM0IsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsUUFBUSxFQUFFLHFCQUFxQjthQUNoQzs7O1lBUm9CLGtCQUFrQjs0Q0FxQlcsTUFBTSxTQUFDLFFBQVE7OztvQkFQOUQsS0FBSztzQkFFTCxXQUFXLFNBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIEluamVjdCwgSW5wdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29sdW1uTW9kZSwgRGF0YXRhYmxlQ29tcG9uZW50LCBTY3JvbGxlckNvbXBvbmVudCB9IGZyb20gJ0Bzd2ltbGFuZS9uZ3gtZGF0YXRhYmxlJztcbmltcG9ydCB7IGZyb21FdmVudCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBEaXJlY3RpdmUoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgc2VsZWN0b3I6ICduZ3gtZGF0YXRhYmxlW2RlZmF1bHRdJyxcbiAgZXhwb3J0QXM6ICduZ3hEYXRhdGFibGVEZWZhdWx0Jyxcbn0pXG5leHBvcnQgY2xhc3MgTmd4RGF0YXRhYmxlRGVmYXVsdERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIHByaXZhdGUgcmVzaXplRGlmZiA9IDA7XG5cbiAgQElucHV0KCkgY2xhc3MgPSAnbWF0ZXJpYWwgYm9yZGVyZWQnO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKVxuICBnZXQgY2xhc3NlcygpOiBzdHJpbmcge1xuICAgIHJldHVybiBgbmd4LWRhdGF0YWJsZSAke3RoaXMuY2xhc3N9YDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGFibGU6IERhdGF0YWJsZUNvbXBvbmVudCwgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogTW9ja0RvY3VtZW50KSB7XG4gICAgdGhpcy50YWJsZS5jb2x1bW5Nb2RlID0gQ29sdW1uTW9kZS5mb3JjZTtcbiAgICB0aGlzLnRhYmxlLmZvb3RlckhlaWdodCA9IDUwO1xuICAgIHRoaXMudGFibGUuaGVhZGVySGVpZ2h0ID0gNTA7XG4gICAgdGhpcy50YWJsZS5yb3dIZWlnaHQgPSAnYXV0byc7XG4gICAgdGhpcy50YWJsZS5zY3JvbGxiYXJIID0gdHJ1ZTtcbiAgICB0aGlzLnRhYmxlLnZpcnR1YWxpemF0aW9uID0gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIGZpeEhvcml6b250YWxHYXAoc2Nyb2xsZXI6IFNjcm9sbGVyQ29tcG9uZW50KSB7XG4gICAgY29uc3QgeyBib2R5LCBkb2N1bWVudEVsZW1lbnQgfSA9IHRoaXMuZG9jdW1lbnQ7XG5cbiAgICBpZiAoZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCAhPT0gZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCkge1xuICAgICAgaWYgKHRoaXMucmVzaXplRGlmZiA9PT0gMCkge1xuICAgICAgICB0aGlzLnJlc2l6ZURpZmYgPSB3aW5kb3cuaW5uZXJXaWR0aCAtIGJvZHkub2Zmc2V0V2lkdGg7XG4gICAgICAgIHNjcm9sbGVyLnNjcm9sbFdpZHRoIC09IHRoaXMucmVzaXplRGlmZjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2Nyb2xsZXIuc2Nyb2xsV2lkdGggKz0gdGhpcy5yZXNpemVEaWZmO1xuICAgICAgdGhpcy5yZXNpemVEaWZmID0gMDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGZpeFN0eWxlT25XaW5kb3dSZXNpemUoKSB7XG4gICAgLy8gYXZvaWRlZCBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJykgaW4gZmF2b3Igb2YgcGVyZm9ybWFuY2VcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBmcm9tRXZlbnQod2luZG93LCAncmVzaXplJylcbiAgICAgIC5waXBlKGRlYm91bmNlVGltZSg1MDApKVxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgc2Nyb2xsZXIgfSA9IHRoaXMudGFibGUuYm9keUNvbXBvbmVudDtcblxuICAgICAgICBpZiAoIXNjcm9sbGVyKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5maXhIb3Jpem9udGFsR2FwKHNjcm9sbGVyKTtcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKHN1YnNjcmlwdGlvbik7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5maXhTdHlsZU9uV2luZG93UmVzaXplKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG59XG5cbi8vIGZpeDogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMjAzNTFcbmludGVyZmFjZSBNb2NrRG9jdW1lbnQge1xuICBib2R5OiBNb2NrQm9keTtcbiAgZG9jdW1lbnRFbGVtZW50OiBNb2NrRG9jdW1lbnRFbGVtZW50O1xufVxuXG5pbnRlcmZhY2UgTW9ja0JvZHkge1xuICBvZmZzZXRXaWR0aDogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgTW9ja0RvY3VtZW50RWxlbWVudCB7XG4gIGNsaWVudEhlaWdodDogbnVtYmVyO1xuICBzY3JvbGxIZWlnaHQ6IG51bWJlcjtcbn1cbiJdfQ==