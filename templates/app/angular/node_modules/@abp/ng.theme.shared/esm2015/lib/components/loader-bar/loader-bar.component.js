import { HttpWaitService, RouterWaitService, SubscriptionService } from '@abp/ng.core';
import { ChangeDetectorRef, Component, Input } from '@angular/core';
import { Router } from '@angular/router';
import { combineLatest, Subscription, timer } from 'rxjs';
export class LoaderBarComponent {
    constructor(router, cdRef, subscription, httpWaitService, routerWaitService) {
        this.router = router;
        this.cdRef = cdRef;
        this.subscription = subscription;
        this.httpWaitService = httpWaitService;
        this.routerWaitService = routerWaitService;
        this.containerClass = 'abp-loader-bar';
        this.color = '#77b6ff';
        this.progressLevel = 0;
        this.interval = new Subscription();
        this.timer = new Subscription();
        this.intervalPeriod = 350;
        this.stopDelay = 800;
        this.clearProgress = () => {
            this.progressLevel = 0;
            this.cdRef.detectChanges();
        };
        this.reportProgress = () => {
            if (this.progressLevel < 75) {
                this.progressLevel += 1 + Math.random() * 9;
            }
            else if (this.progressLevel < 90) {
                this.progressLevel += 0.4;
            }
            else if (this.progressLevel < 100) {
                this.progressLevel += 0.1;
            }
            else {
                this.interval.unsubscribe();
            }
            this.cdRef.detectChanges();
        };
    }
    set isLoading(value) {
        this._isLoading = value;
        this.cdRef.detectChanges();
    }
    get isLoading() {
        return this._isLoading;
    }
    get boxShadow() {
        return `0 0 10px rgba(${this.color}, 0.5)`;
    }
    ngOnInit() {
        this.subscribeLoading();
    }
    subscribeLoading() {
        this.subscription.addOne(combineLatest([this.httpWaitService.getLoading$(), this.routerWaitService.getLoading$()]), ([httpLoading, routerLoading]) => {
            if (httpLoading || routerLoading)
                this.startLoading();
            else
                this.stopLoading();
        });
    }
    ngOnDestroy() {
        this.interval.unsubscribe();
    }
    startLoading() {
        if (this.isLoading || !this.interval.closed)
            return;
        this.isLoading = true;
        this.progressLevel = 0;
        this.cdRef.detectChanges();
        this.interval = timer(0, this.intervalPeriod).subscribe(this.reportProgress);
        this.timer.unsubscribe();
    }
    stopLoading() {
        this.interval.unsubscribe();
        this.progressLevel = 100;
        this.isLoading = false;
        if (!this.timer.closed)
            return;
        this.timer = timer(this.stopDelay).subscribe(this.clearProgress);
    }
}
LoaderBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-loader-bar',
                template: `
    <div id="abp-loader-bar" [ngClass]="containerClass" [class.is-loading]="isLoading">
      <div
        class="abp-progress"
        [class.progressing]="progressLevel"
        [style.width.vw]="progressLevel"
        [ngStyle]="{
          'background-color': color,
          'box-shadow': boxShadow
        }"
      ></div>
    </div>
  `,
                providers: [SubscriptionService],
                styles: [".abp-loader-bar{left:0;opacity:0;position:fixed;top:0;transition:opacity .4s linear .4s;z-index:99999}.abp-loader-bar.is-loading{opacity:1;transition:none}.abp-loader-bar .abp-progress{height:3px;left:0;position:fixed;top:0}.abp-loader-bar .abp-progress.progressing{transition:width .4s ease}"]
            },] }
];
LoaderBarComponent.ctorParameters = () => [
    { type: Router },
    { type: ChangeDetectorRef },
    { type: SubscriptionService },
    { type: HttpWaitService },
    { type: RouterWaitService }
];
LoaderBarComponent.propDecorators = {
    isLoading: [{ type: Input }],
    containerClass: [{ type: Input }],
    color: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,