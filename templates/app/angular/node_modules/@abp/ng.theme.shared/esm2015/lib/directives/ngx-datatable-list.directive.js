import { LocalizationService } from '@abp/ng.core';
import { ChangeDetectorRef, Directive, Inject, Input, Optional, } from '@angular/core';
import { DatatableComponent } from '@swimlane/ngx-datatable';
import { Subscription } from 'rxjs';
import { defaultNgxDatatableMessages, NGX_DATATABLE_MESSAGES, } from '../tokens/ngx-datatable-messages.token';
export class NgxDatatableListDirective {
    constructor(table, cdRef, localizationService, ngxDatatableMessages) {
        this.table = table;
        this.cdRef = cdRef;
        this.localizationService = localizationService;
        this.ngxDatatableMessages = ngxDatatableMessages;
        this.subscription = new Subscription();
        this.querySubscription = new Subscription();
        this.setInitialValues();
    }
    setInitialValues() {
        this.table.externalPaging = true;
        this.table.externalSorting = true;
        const { emptyMessage, selectedMessage, totalMessage } = this.ngxDatatableMessages || defaultNgxDatatableMessages;
        this.table.messages = {
            emptyMessage: this.localizationService.instant(emptyMessage),
            totalMessage: this.localizationService.instant(totalMessage),
            selectedMessage: this.localizationService.instant(selectedMessage),
        };
    }
    subscribeToPage() {
        const sub = this.table.page.subscribe(({ offset }) => {
            this.list.page = offset;
            this.table.offset = offset;
        });
        this.subscription.add(sub);
    }
    subscribeToSort() {
        const sub = this.table.sort.subscribe(({ sorts: [{ prop, dir }] }) => {
            if (prop === this.list.sortKey && this.list.sortOrder === 'desc') {
                this.list.sortKey = '';
                this.list.sortOrder = '';
                this.table.sorts = [];
                this.cdRef.detectChanges();
            }
            else {
                this.list.sortKey = prop;
                this.list.sortOrder = dir;
            }
        });
        this.subscription.add(sub);
    }
    subscribeToQuery() {
        if (!this.querySubscription.closed)
            this.querySubscription.unsubscribe();
        this.querySubscription = this.list.query$.subscribe(() => {
            const offset = this.list.page;
            if (this.table.offset !== offset)
                this.table.offset = offset;
        });
    }
    ngOnChanges({ list }) {
        this.subscribeToQuery();
        if (!list.firstChange)
            return;
        const { maxResultCount, page } = list.currentValue;
        this.table.limit = maxResultCount;
        this.table.offset = page;
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        this.querySubscription.unsubscribe();
    }
    ngOnInit() {
        this.subscribeToPage();
        this.subscribeToSort();
    }
}
NgxDatatableListDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line
                selector: 'ngx-datatable[list]',
                exportAs: 'ngxDatatableList',
            },] }
];
NgxDatatableListDirective.ctorParameters = () => [
    { type: DatatableComponent },
    { type: ChangeDetectorRef },
    { type: LocalizationService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_DATATABLE_MESSAGES,] }] }
];
NgxDatatableListDirective.propDecorators = {
    list: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,