{"version":3,"file":"toaster.service.d.ts","sources":["toaster.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA","sourcesContent":["import { ContentProjectionService, LocalizationParam, Strict } from '@abp/ng.core';\r\nimport { Toaster } from '../models';\r\nexport declare class ToasterService implements ToasterContract {\r\n    private contentProjectionService;\r\n    private toasts$;\r\n    private lastId;\r\n    private toasts;\r\n    private containerComponentRef;\r\n    constructor(contentProjectionService: ContentProjectionService);\r\n    private setContainer;\r\n    /**\r\n     * Creates an info toast with given parameters.\r\n     * @param message Content of the toast\r\n     * @param title Title of the toast\r\n     * @param options Spesific style or structural options for individual toast\r\n     */\r\n    info(message: LocalizationParam, title?: LocalizationParam, options?: Partial<Toaster.ToastOptions>): Toaster.ToasterId;\r\n    /**\r\n     * Creates a success toast with given parameters.\r\n     * @param message Content of the toast\r\n     * @param title Title of the toast\r\n     * @param options Spesific style or structural options for individual toast\r\n     */\r\n    success(message: LocalizationParam, title?: LocalizationParam, options?: Partial<Toaster.ToastOptions>): Toaster.ToasterId;\r\n    /**\r\n     * Creates a warning toast with given parameters.\r\n     * @param message Content of the toast\r\n     * @param title Title of the toast\r\n     * @param options Spesific style or structural options for individual toast\r\n     */\r\n    warn(message: LocalizationParam, title?: LocalizationParam, options?: Partial<Toaster.ToastOptions>): Toaster.ToasterId;\r\n    /**\r\n     * Creates an error toast with given parameters.\r\n     * @param message Content of the toast\r\n     * @param title Title of the toast\r\n     * @param options Spesific style or structural options for individual toast\r\n     */\r\n    error(message: LocalizationParam, title?: LocalizationParam, options?: Partial<Toaster.ToastOptions>): Toaster.ToasterId;\r\n    /**\r\n     * Creates a toast with given parameters.\r\n     * @param message Content of the toast\r\n     * @param title Title of the toast\r\n     * @param severity Sets color of the toast. \"success\", \"warning\" etc.\r\n     * @param options Spesific style or structural options for individual toast\r\n     */\r\n    show(message: LocalizationParam, title?: LocalizationParam, severity?: Toaster.Severity, options?: Partial<Toaster.ToastOptions>): Toaster.ToasterId;\r\n    /**\r\n     * Removes the toast with given id.\r\n     * @param id ID of the toast to be removed.\r\n     */\r\n    remove(id: number): void;\r\n    /**\r\n     * Removes all open toasts at once.\r\n     */\r\n    clear(containerKey?: string): void;\r\n}\r\nexport declare type ToasterContract = Strict<ToasterService, Toaster.Service>;\r\n"]}