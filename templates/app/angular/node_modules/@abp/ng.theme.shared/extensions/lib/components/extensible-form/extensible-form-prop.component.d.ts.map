{"version":3,"file":"extensible-form-prop.component.d.ts","sources":["extensible-form-prop.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ABP, ConfigStateService, TrackByService } from '@abp/ng.core';\r\nimport { AfterViewInit, ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { FormGroupDirective, ValidatorFn } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { FormProp } from '../../models/form-props';\r\nimport { PropData } from '../../models/props';\r\nexport declare class ExtensibleFormPropComponent implements OnChanges, AfterViewInit {\r\n    readonly cdRef: ChangeDetectorRef;\r\n    readonly track: TrackByService;\r\n    protected configState: ConfigStateService;\r\n    data: PropData;\r\n    prop: FormProp;\r\n    first: boolean;\r\n    private fieldRef;\r\n    asterisk: string;\r\n    options$: Observable<ABP.Option<any>[]>;\r\n    validators: ValidatorFn[];\r\n    readonly: boolean;\r\n    disabled: boolean;\r\n    private readonly form;\r\n    typeaheadModel: any;\r\n    setTypeaheadValue(selectedOption: ABP.Option<string>): void;\r\n    search: (text$: Observable<string>) => Observable<any[]>;\r\n    typeaheadFormatter: (option: ABP.Option<any>) => string;\r\n    get meridian(): any;\r\n    get isInvalid(): boolean;\r\n    constructor(cdRef: ChangeDetectorRef, track: TrackByService, configState: ConfigStateService, groupDirective: FormGroupDirective);\r\n    private getTypeaheadControls;\r\n    private setAsterisk;\r\n    ngAfterViewInit(): void;\r\n    getComponent(prop: FormProp): string;\r\n    getType(prop: FormProp): string;\r\n    ngOnChanges({ prop }: SimpleChanges): void;\r\n}\r\n"]}