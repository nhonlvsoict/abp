{"version":3,"file":"permission-management.component.d.ts","sources":["permission-management.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { AbpApplicationConfigurationService, ConfigStateService } from '@abp/ng.core';\r\nimport { EventEmitter, TrackByFunction } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { PermissionManagement } from '../models/permission-management';\r\nimport { GetPermissionListResultDto, PermissionGrantInfoDto, PermissionGroupDto, ProviderInfoDto } from '../proxy/models';\r\ndeclare type PermissionWithStyle = PermissionGrantInfoDto & {\r\n    style: string;\r\n};\r\nexport declare class PermissionManagementComponent implements PermissionManagement.PermissionManagementComponentInputs, PermissionManagement.PermissionManagementComponentOutputs {\r\n    protected store: Store;\r\n    protected configState: ConfigStateService;\r\n    protected appConfigService: AbpApplicationConfigurationService;\r\n    readonly providerName: string;\r\n    readonly providerKey: string;\r\n    readonly hideBadges = false;\r\n    protected _visible: boolean;\r\n    get visible(): boolean;\r\n    set visible(value: boolean);\r\n    readonly visibleChange: EventEmitter<boolean>;\r\n    groups$: Observable<PermissionGroupDto[]>;\r\n    entityName$: Observable<string>;\r\n    selectedGroup: PermissionGroupDto;\r\n    permissions: PermissionGrantInfoDto[];\r\n    selectThisTab: boolean;\r\n    selectAllTab: boolean;\r\n    modalBusy: boolean;\r\n    trackByFn: TrackByFunction<PermissionGroupDto>;\r\n    get selectedGroupPermissions$(): Observable<PermissionWithStyle[]>;\r\n    constructor(store: Store, configState: ConfigStateService, appConfigService: AbpApplicationConfigurationService);\r\n    getChecked(name: string): boolean;\r\n    isGrantedByOtherProviderName(grantedProviders: ProviderInfoDto[]): boolean;\r\n    onClickCheckbox(clickedPermission: PermissionGrantInfoDto, value: any): void;\r\n    setTabCheckboxState(): void;\r\n    setGrantCheckboxState(): void;\r\n    onClickSelectThisTab(): void;\r\n    onClickSelectAll(): void;\r\n    onChangeGroup(group: PermissionGroupDto): void;\r\n    submit(): void;\r\n    openModal(): Observable<GetPermissionListResultDto>;\r\n    initModal(): void;\r\n    getAssignedCount(groupName: string): number;\r\n    shouldFetchAppConfig(): boolean;\r\n}\r\nexport {};\r\n"]}