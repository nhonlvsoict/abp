import { AbpApplicationConfigurationService, ConfigStateService } from '@abp/ng.core';
import { EventEmitter, TrackByFunction } from '@angular/core';
import { Store } from '@ngxs/store';
import { Observable } from 'rxjs';
import { PermissionManagement } from '../models/permission-management';
import { GetPermissionListResultDto, PermissionGrantInfoDto, PermissionGroupDto, ProviderInfoDto } from '../proxy/models';
import * as ɵngcc0 from '@angular/core';
declare type PermissionWithStyle = PermissionGrantInfoDto & {
    style: string;
};
export declare class PermissionManagementComponent implements PermissionManagement.PermissionManagementComponentInputs, PermissionManagement.PermissionManagementComponentOutputs {
    protected store: Store;
    protected configState: ConfigStateService;
    protected appConfigService: AbpApplicationConfigurationService;
    readonly providerName: string;
    readonly providerKey: string;
    readonly hideBadges = false;
    protected _visible: boolean;
    get visible(): boolean;
    set visible(value: boolean);
    readonly visibleChange: EventEmitter<boolean>;
    groups$: Observable<PermissionGroupDto[]>;
    entityName$: Observable<string>;
    selectedGroup: PermissionGroupDto;
    permissions: PermissionGrantInfoDto[];
    selectThisTab: boolean;
    selectAllTab: boolean;
    modalBusy: boolean;
    trackByFn: TrackByFunction<PermissionGroupDto>;
    get selectedGroupPermissions$(): Observable<PermissionWithStyle[]>;
    constructor(store: Store, configState: ConfigStateService, appConfigService: AbpApplicationConfigurationService);
    getChecked(name: string): boolean;
    isGrantedByOtherProviderName(grantedProviders: ProviderInfoDto[]): boolean;
    onClickCheckbox(clickedPermission: PermissionGrantInfoDto, value: any): void;
    setTabCheckboxState(): void;
    setGrantCheckboxState(): void;
    onClickSelectThisTab(): void;
    onClickSelectAll(): void;
    onChangeGroup(group: PermissionGroupDto): void;
    submit(): void;
    openModal(): Observable<GetPermissionListResultDto>;
    initModal(): void;
    getAssignedCount(groupName: string): number;
    shouldFetchAppConfig(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<PermissionManagementComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<PermissionManagementComponent, "abp-permission-management", ["abpPermissionManagement"], { "hideBadges": "hideBadges"; "visible": "visible"; "providerName": "providerName"; "providerKey": "providerKey"; }, { "visibleChange": "visibleChange"; }, never, never>;
}
export {};

//# sourceMappingURL=permission-management.component.d.ts.map