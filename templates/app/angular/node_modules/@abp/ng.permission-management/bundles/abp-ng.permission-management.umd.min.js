!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ngxs/store"),require("rxjs"),require("rxjs/operators")):"function"==typeof define&&define.amd?define("@abp/ng.permission-management",["exports","@abp/ng.core","@abp/ng.theme.shared","@angular/core","@ngxs/store","rxjs","rxjs/operators"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng["permission-management"]={}),e.i1,e.ng_theme_shared,e.ng.core,e.i1$1,e.rxjs,e.rxjs.operators)}(this,(function(e,t,n,i,r,s,o){"use strict";function a(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var i=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,i.get?i:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var c=a(t),p=a(i),l=a(r);function u(e,t,n,i){var r,s=arguments.length,o=s<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,i);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(s<3?r(o):s>3?r(t,n,o):r(t,n))||o);return s>3&&o&&Object.defineProperty(t,n,o),o}Object.create;function m(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var i,r,s=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(i=s.next()).done;)o.push(i.value)}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=s.return)&&n.call(s)}finally{if(r)throw r.error}}return o}function d(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]));return e}Object.create;var b=function(e){this.payload=e};b.type="[PermissionManagement] Get Permissions";var h=function(e){this.payload=e};h.type="[PermissionManagement] Update Permissions";var f=function(e){var t=this;this.restService=e,this.apiName="AbpPermissionManagement",this.get=function(e,n){return t.restService.request({method:"GET",url:"/api/permission-management/permissions",params:{providerName:e,providerKey:n}},{apiName:t.apiName})},this.update=function(e,n,i){return t.restService.request({method:"PUT",url:"/api/permission-management/permissions",params:{providerName:e,providerKey:n},body:i},{apiName:t.apiName})}};f.ɵprov=p.ɵɵdefineInjectable({factory:function(){return new f(p.ɵɵinject(c.RestService))},token:f,providedIn:"root"}),f.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],f.ctorParameters=function(){return[{type:t.RestService}]},e.ɵb=function(){function e(e){this.service=e}return e.getPermissionGroups=function(e){return e.permissionRes.groups||[]},e.getEntityDisplayName=function(e){return e.permissionRes.entityDisplayName},e.prototype.permissionManagementGet=function(e,t){var n=e.patchState,i=t.payload,r=void 0===i?{}:i,s=r.providerKey,a=r.providerName;return this.service.get(a,s).pipe(o.tap((function(e){return n({permissionRes:e})})))},e.prototype.permissionManagementUpdate=function(e,t){var n=t.payload;return this.service.update(n.providerName,n.providerKey,{permissions:n.permissions})},e}(),e.ɵb.decorators=[{type:i.Injectable}],e.ɵb.ctorParameters=function(){return[{type:f}]},u([r.Action(b)],e.ɵb.prototype,"permissionManagementGet",null),u([r.Action(h)],e.ɵb.prototype,"permissionManagementUpdate",null),u([r.Selector()],e.ɵb,"getPermissionGroups",null),u([r.Selector()],e.ɵb,"getEntityDisplayName",null),e.ɵb=u([r.State({name:"PermissionManagementState",defaults:{permissionRes:{}}})],e.ɵb);var g=function(){function t(e,t,n){this.store=e,this.configState=t,this.appConfigService=n,this.hideBadges=!1,this._visible=!1,this.visibleChange=new i.EventEmitter,this.permissions=[],this.selectThisTab=!1,this.selectAllTab=!1,this.modalBusy=!1,this.trackByFn=function(e,t){return t.name}}return Object.defineProperty(t.prototype,"visible",{get:function(){return this._visible},set:function(e){var t=this;e!==this._visible&&(e?this.openModal().subscribe((function(){t._visible=!0,t.visibleChange.emit(!0)})):(this.selectedGroup=null,this._visible=!1,this.visibleChange.emit(!1)))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"selectedGroupPermissions$",{get:function(){var e=this,t="margin-"+("rtl"===document.body.dir?"right":"left")+".px";return this.groups$.pipe(o.map((function(t){return e.selectedGroup?t.find((function(t){return t.name===e.selectedGroup.name})).permissions:[]})),o.map((function(n){return n.map((function(i){var r;return Object.assign(Object.assign({},i),{style:(r={},r[t]=v(n,i),r),isGranted:e.permissions.find((function(e){return e.name===i.name})).isGranted})}))})))},enumerable:!1,configurable:!0}),t.prototype.getChecked=function(e){return(this.permissions.find((function(t){return t.name===e}))||{isGranted:!1}).isGranted},t.prototype.isGrantedByOtherProviderName=function(e){var t=this;return!!e.length&&e.findIndex((function(e){return e.providerName!==t.providerName}))>-1},t.prototype.onClickCheckbox=function(e,t){var n=this;e.isGranted&&this.isGrantedByOtherProviderName(e.grantedProviders)||setTimeout((function(){n.permissions=n.permissions.map((function(t){return e.name===t.name?Object.assign(Object.assign({},t),{isGranted:!t.isGranted}):e.name===t.parentName&&e.isGranted?Object.assign(Object.assign({},t),{isGranted:!1}):e.parentName!==t.name||e.isGranted?t:Object.assign(Object.assign({},t),{isGranted:!0})})),n.setTabCheckboxState(),n.setGrantCheckboxState()}),0)},t.prototype.setTabCheckboxState=function(){var e=this;this.selectedGroupPermissions$.pipe(o.take(1)).subscribe((function(t){var n=t.filter((function(e){return e.isGranted})),i=document.querySelector("#select-all-in-this-tabs");n.length===t.length?(i.indeterminate=!1,e.selectThisTab=!0):0===n.length?(i.indeterminate=!1,e.selectThisTab=!1):i.indeterminate=!0}))},t.prototype.setGrantCheckboxState=function(){var e=this.permissions.filter((function(e){return e.isGranted})),t=document.querySelector("#select-all-in-all-tabs");e.length===this.permissions.length?(t.indeterminate=!1,this.selectAllTab=!0):0===e.length?(t.indeterminate=!1,this.selectAllTab=!1):t.indeterminate=!0},t.prototype.onClickSelectThisTab=function(){var e=this;this.selectedGroupPermissions$.pipe(o.take(1)).subscribe((function(t){t.forEach((function(t){if(!t.isGranted||!e.isGrantedByOtherProviderName(t.grantedProviders)){var n=e.permissions.findIndex((function(e){return e.name===t.name}));e.permissions=d(e.permissions.slice(0,n),[Object.assign(Object.assign({},e.permissions[n]),{isGranted:!e.selectThisTab})],e.permissions.slice(n+1))}}))})),this.setGrantCheckboxState()},t.prototype.onClickSelectAll=function(){var e=this;this.permissions=this.permissions.map((function(t){return Object.assign(Object.assign({},t),{isGranted:e.isGrantedByOtherProviderName(t.grantedProviders)||!e.selectAllTab})})),this.selectThisTab=!this.selectAllTab},t.prototype.onChangeGroup=function(e){this.selectedGroup=e,this.setTabCheckboxState()},t.prototype.submit=function(){var t=this,n=y(this.store.selectSnapshot(e.ɵb.getPermissionGroups)),i=this.permissions.filter((function(e){return n.find((function(t){return t.name===e.name})).isGranted!==e.isGranted})).map((function(e){return{name:e.name,isGranted:e.isGranted}}));i.length?(this.modalBusy=!0,this.store.dispatch(new h({providerKey:this.providerKey,providerName:this.providerName,permissions:i})).pipe(o.switchMap((function(){return t.shouldFetchAppConfig()?t.appConfigService.get().pipe(o.tap((function(e){return t.configState.setState(e)}))):s.of(null)})),o.finalize((function(){return t.modalBusy=!1}))).subscribe((function(){t.visible=!1}))):this.visible=!1},t.prototype.openModal=function(){var e=this;if(!this.providerKey||!this.providerName)throw new Error("Provider Key and Provider Name are required.");return this.store.dispatch(new b({providerKey:this.providerKey,providerName:this.providerName})).pipe(o.pluck("PermissionManagementState","permissionRes"),o.tap((function(t){e.selectedGroup=t.groups[0],e.permissions=y(t.groups)})))},t.prototype.initModal=function(){this.setTabCheckboxState(),this.setGrantCheckboxState()},t.prototype.getAssignedCount=function(e){return this.permissions.reduce((function(t,n){return n.name.split(".")[0]===e&&n.isGranted?t+1:t}),0)},t.prototype.shouldFetchAppConfig=function(){var e=this,t=this.configState.getOne("currentUser");return"R"===this.providerName?t.roles.some((function(t){return t===e.providerKey})):"U"===this.providerName&&t.id===this.providerKey},t}();function v(e,t){var n=e.find((function(e){return e.name===t.parentName}));return n&&n.parentName?20+v(e,n):n?20:0}function y(e){return e.reduce((function(e,t){return d(e,t.permissions)}),[])}g.decorators=[{type:i.Component,args:[{selector:"abp-permission-management",template:'<abp-modal [(visible)]="visible" (init)="initModal()" [busy]="modalBusy">\n  <ng-container *ngIf="{ entityName: entityName$ | async } as data">\n    <ng-template #abpHeader>\n      <h4>\n        {{ \'AbpPermissionManagement::Permissions\' | abpLocalization }} - {{ data.entityName }}\n      </h4>\n    </ng-template>\n    <ng-template #abpBody>\n      <div class="custom-checkbox custom-control mb-2">\n        <input\n          type="checkbox"\n          id="select-all-in-all-tabs"\n          name="select-all-in-all-tabs"\n          class="custom-control-input"\n          [(ngModel)]="selectAllTab"\n          (click)="onClickSelectAll()"\n        />\n        <label class="custom-control-label" for="select-all-in-all-tabs">{{\n          \'AbpPermissionManagement::SelectAllInAllTabs\' | abpLocalization\n        }}</label>\n      </div>\n\n      <hr class="mt-2 mb-2" />\n      <div class="row">\n        <div class="overflow-scroll col-md-4">\n          <ul class="nav nav-pills flex-column">\n            <li *ngFor="let group of groups$ | async; trackBy: trackByFn" class="nav-item">\n              <a\n                *ngIf="{ assignedCount: getAssignedCount(group.name) } as data"\n                class="nav-link pointer"\n                [class.active]="selectedGroup?.name === group?.name"\n                (click)="onChangeGroup(group)"\n              >\n                <div [class.font-weight-bold]="data.assignedCount">\n                  {{ group?.displayName }}\n                  <span>({{ data.assignedCount }})</span>\n                </div>\n              </a>\n            </li>\n          </ul>\n        </div>\n        <div class="col-md-8 overflow-scroll">\n          <h4>{{ selectedGroup?.displayName }}</h4>\n          <hr class="mt-2 mb-3" />\n          <div class="pl-1 pt-1">\n            <div class="custom-checkbox custom-control mb-2">\n              <input\n                type="checkbox"\n                id="select-all-in-this-tabs"\n                name="select-all-in-this-tabs"\n                class="custom-control-input"\n                [(ngModel)]="selectThisTab"\n                (click)="onClickSelectThisTab()"\n              />\n              <label class="custom-control-label" for="select-all-in-this-tabs">{{\n                \'AbpPermissionManagement::SelectAllInThisTab\' | abpLocalization\n              }}</label>\n            </div>\n            <hr class="mb-3" />\n            <div\n              *ngFor="\n                let permission of selectedGroupPermissions$ | async;\n                let i = index;\n                trackBy: trackByFn\n              "\n              [ngStyle]="permission.style"\n              class="custom-checkbox custom-control mb-2"\n            >\n              <input\n                #permissionCheckbox\n                type="checkbox"\n                [checked]="getChecked(permission.name)"\n                [value]="getChecked(permission.name)"\n                [attr.id]="permission.name"\n                class="custom-control-input"\n                [disabled]="isGrantedByOtherProviderName(permission.grantedProviders)"\n              />\n              <label\n                class="custom-control-label"\n                [attr.for]="permission.name"\n                (click)="onClickCheckbox(permission, permissionCheckbox.value)"\n                >{{ permission.displayName }}\n                <ng-container *ngIf="!hideBadges">\n                  <span\n                    *ngFor="let provider of permission.grantedProviders"\n                    class="badge badge-light"\n                    >{{ provider.providerName }}: {{ provider.providerKey }}</span\n                  >\n                </ng-container>\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template #abpFooter>\n      <button type="button" class="btn btn-secondary" abpClose>\n        {{ \'AbpIdentity::Cancel\' | abpLocalization }}\n      </button>\n      <abp-button iconClass="fa fa-check" (click)="submit()">{{\n        \'AbpIdentity::Save\' | abpLocalization\n      }}</abp-button>\n    </ng-template>\n  </ng-container>\n</abp-modal>\n',exportAs:"abpPermissionManagement",styles:["\n      .overflow-scroll {\n        max-height: 70vh;\n        overflow-y: scroll;\n      }\n    "]}]}],g.ctorParameters=function(){return[{type:r.Store},{type:t.ConfigStateService},{type:t.AbpApplicationConfigurationService}]},g.propDecorators={providerName:[{type:i.Input}],providerKey:[{type:i.Input}],hideBadges:[{type:i.Input}],visible:[{type:i.Input}],visibleChange:[{type:i.Output}]},u([r.Select(e.ɵb.getPermissionGroups)],g.prototype,"groups$",void 0),u([r.Select(e.ɵb.getEntityDisplayName)],g.prototype,"entityName$",void 0);var G=function(){};G.decorators=[{type:i.NgModule,args:[{declarations:[g],imports:[t.CoreModule,n.ThemeSharedModule,r.NgxsModule.forFeature([e.ɵb])],exports:[g]}]}];var P=function(){function t(e){this.store=e}return t.prototype.getPermissionGroups=function(){return this.store.selectSnapshot(e.ɵb.getPermissionGroups)},t.prototype.getEntityDisplayName=function(){return this.store.selectSnapshot(e.ɵb.getEntityDisplayName)},t.prototype.dispatchGetPermissions=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(b.bind.apply(b,d([void 0],e))))},t.prototype.dispatchUpdatePermissions=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(h.bind.apply(h,d([void 0],e))))},t}();P.ɵprov=p.ɵɵdefineInjectable({factory:function(){return new P(p.ɵɵinject(l.Store))},token:P,providedIn:"root"}),P.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],P.ctorParameters=function(){return[{type:r.Store}]},e.GetPermissions=b,e.PermissionManagementComponent=g,e.PermissionManagementModule=G,e.PermissionManagementState=e.ɵb,e.PermissionManagementStateService=P,e.PermissionsService=f,e.UpdatePermissions=h,e.ɵa=g,e.ɵc=f,e.ɵd=b,e.ɵe=h,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=abp-ng.permission-management.umd.min.js.map