import * as i1 from '@abp/ng.core';
import { RestService, ConfigStateService, AbpApplicationConfigurationService, CoreModule } from '@abp/ng.core';
import { ThemeSharedModule } from '@abp/ng.theme.shared';
import * as i0 from '@angular/core';
import { Injectable, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';
import * as i1$1 from '@ngxs/store';
import { Action, Selector, State, Store, Select, NgxsModule } from '@ngxs/store';
import { __decorate } from 'tslib';
import { of } from 'rxjs';
import { tap, map, take, switchMap, finalize, pluck } from 'rxjs/operators';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@abp/ng.core';
import * as ɵngcc2 from '@ngxs/store';
import * as ɵngcc3 from '@abp/ng.theme.shared';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/forms';

function PermissionManagementComponent_ng_container_1_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h4");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const data_r1 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "AbpPermissionManagement::Permissions"), " - ", data_r1.entityName, " ");
} }
function PermissionManagementComponent_ng_container_1_ng_template_3_li_9_a_1_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 22);
    ɵngcc0.ɵɵlistener("click", function PermissionManagementComponent_ng_container_1_ng_template_3_li_9_a_1_Template_a_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r16); const group_r11 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r14 = ɵngcc0.ɵɵnextContext(3); return ctx_r14.onChangeGroup(group_r11); });
    ɵngcc0.ɵɵelementStart(1, "div");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const data_r13 = ctx.ngIf;
    const group_r11 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassProp("active", (ctx_r12.selectedGroup == null ? null : ctx_r12.selectedGroup.name) === (group_r11 == null ? null : group_r11.name));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("font-weight-bold", data_r13.assignedCount);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", group_r11 == null ? null : group_r11.displayName, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("(", data_r13.assignedCount, ")");
} }
const _c0 = function (a0) { return { assignedCount: a0 }; };
function PermissionManagementComponent_ng_container_1_ng_template_3_li_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 20);
    ɵngcc0.ɵɵtemplate(1, PermissionManagementComponent_ng_container_1_ng_template_3_li_9_a_1_Template, 5, 6, "a", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const group_r11 = ctx.$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpureFunction1(1, _c0, ctx_r9.getAssignedCount(group_r11.name)));
} }
function PermissionManagementComponent_ng_container_1_ng_template_3_div_22_ng_container_5_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 28);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const provider_r23 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2("", provider_r23.providerName, ": ", provider_r23.providerKey, "");
} }
function PermissionManagementComponent_ng_container_1_ng_template_3_div_22_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, PermissionManagementComponent_ng_container_1_ng_template_3_div_22_ng_container_5_span_1_Template, 2, 2, "span", 27);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const permission_r18 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", permission_r18.grantedProviders);
} }
function PermissionManagementComponent_ng_container_1_ng_template_3_div_22_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵelement(1, "input", 24, 25);
    ɵngcc0.ɵɵelementStart(3, "label", 26);
    ɵngcc0.ɵɵlistener("click", function PermissionManagementComponent_ng_container_1_ng_template_3_div_22_Template_label_click_3_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r26); const permission_r18 = restoredCtx.$implicit; const _r20 = ɵngcc0.ɵɵreference(2); const ctx_r25 = ɵngcc0.ɵɵnextContext(3); return ctx_r25.onClickCheckbox(permission_r18, _r20.value); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵtemplate(5, PermissionManagementComponent_ng_container_1_ng_template_3_div_22_ng_container_5_Template, 2, 1, "ng-container", 1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const permission_r18 = ctx.$implicit;
    const ctx_r10 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngStyle", permission_r18.style);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("checked", ctx_r10.getChecked(permission_r18.name))("value", ctx_r10.getChecked(permission_r18.name))("disabled", ctx_r10.isGrantedByOtherProviderName(permission_r18.grantedProviders));
    ɵngcc0.ɵɵattribute("id", permission_r18.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵattribute("for", permission_r18.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", permission_r18.displayName, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r10.hideBadges);
} }
function PermissionManagementComponent_ng_container_1_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "input", 6);
    ɵngcc0.ɵɵlistener("ngModelChange", function PermissionManagementComponent_ng_container_1_ng_template_3_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r27 = ɵngcc0.ɵɵnextContext(2); return ctx_r27.selectAllTab = $event; })("click", function PermissionManagementComponent_ng_container_1_ng_template_3_Template_input_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r29 = ɵngcc0.ɵɵnextContext(2); return ctx_r29.onClickSelectAll(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "label", 7);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(5, "hr", 8);
    ɵngcc0.ɵɵelementStart(6, "div", 9);
    ɵngcc0.ɵɵelementStart(7, "div", 10);
    ɵngcc0.ɵɵelementStart(8, "ul", 11);
    ɵngcc0.ɵɵtemplate(9, PermissionManagementComponent_ng_container_1_ng_template_3_li_9_Template, 2, 3, "li", 12);
    ɵngcc0.ɵɵpipe(10, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "div", 13);
    ɵngcc0.ɵɵelementStart(12, "h4");
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(14, "hr", 14);
    ɵngcc0.ɵɵelementStart(15, "div", 15);
    ɵngcc0.ɵɵelementStart(16, "div", 5);
    ɵngcc0.ɵɵelementStart(17, "input", 16);
    ɵngcc0.ɵɵlistener("ngModelChange", function PermissionManagementComponent_ng_container_1_ng_template_3_Template_input_ngModelChange_17_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r30 = ɵngcc0.ɵɵnextContext(2); return ctx_r30.selectThisTab = $event; })("click", function PermissionManagementComponent_ng_container_1_ng_template_3_Template_input_click_17_listener() { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r31 = ɵngcc0.ɵɵnextContext(2); return ctx_r31.onClickSelectThisTab(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "label", 17);
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(21, "hr", 18);
    ɵngcc0.ɵɵtemplate(22, PermissionManagementComponent_ng_container_1_ng_template_3_div_22_Template, 6, 8, "div", 19);
    ɵngcc0.ɵɵpipe(23, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r5.selectAllTab);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 9, "AbpPermissionManagement::SelectAllInAllTabs"));
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(10, 11, ctx_r5.groups$))("ngForTrackBy", ctx_r5.trackByFn);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r5.selectedGroup == null ? null : ctx_r5.selectedGroup.displayName);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r5.selectThisTab);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(20, 13, "AbpPermissionManagement::SelectAllInThisTab"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(23, 15, ctx_r5.selectedGroupPermissions$))("ngForTrackBy", ctx_r5.trackByFn);
} }
function PermissionManagementComponent_ng_container_1_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    const _r33 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 29);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "abp-button", 30);
    ɵngcc0.ɵɵlistener("click", function PermissionManagementComponent_ng_container_1_ng_template_5_Template_abp_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r33); const ctx_r32 = ɵngcc0.ɵɵnextContext(2); return ctx_r32.submit(); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "AbpIdentity::Cancel"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 4, "AbpIdentity::Save"));
} }
function PermissionManagementComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, PermissionManagementComponent_ng_container_1_ng_template_1_Template, 3, 4, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(3, PermissionManagementComponent_ng_container_1_ng_template_3_Template, 24, 17, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(5, PermissionManagementComponent_ng_container_1_ng_template_5_Template, 6, 6, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} }
const _c1 = function (a0) { return { entityName: a0 }; };
class GetPermissions {
    constructor(payload) {
        this.payload = payload;
    }
}
GetPermissions.type = '[PermissionManagement] Get Permissions';
class UpdatePermissions {
    constructor(payload) {
        this.payload = payload;
    }
}
UpdatePermissions.type = '[PermissionManagement] Update Permissions';

class PermissionsService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpPermissionManagement';
        this.get = (providerName, providerKey) => this.restService.request({
            method: 'GET',
            url: '/api/permission-management/permissions',
            params: { providerName, providerKey },
        }, { apiName: this.apiName });
        this.update = (providerName, providerKey, input) => this.restService.request({
            method: 'PUT',
            url: '/api/permission-management/permissions',
            params: { providerName, providerKey },
            body: input,
        }, { apiName: this.apiName });
    }
}
PermissionsService.ɵfac = function PermissionsService_Factory(t) { return new (t || PermissionsService)(ɵngcc0.ɵɵinject(ɵngcc1.RestService)); };
PermissionsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PermissionsService_Factory() { return new PermissionsService(i0.ɵɵinject(i1.RestService)); }, token: PermissionsService, providedIn: "root" });
PermissionsService.ctorParameters = () => [
    { type: RestService }
];

let PermissionManagementState = class PermissionManagementState {
    constructor(service) {
        this.service = service;
    }
    static getPermissionGroups({ permissionRes }) {
        return permissionRes.groups || [];
    }
    static getEntityDisplayName({ permissionRes }) {
        return permissionRes.entityDisplayName;
    }
    permissionManagementGet({ patchState }, { payload: { providerKey, providerName } = {} }) {
        return this.service.get(providerName, providerKey).pipe(tap(permissionResponse => patchState({
            permissionRes: permissionResponse,
        })));
    }
    permissionManagementUpdate(_, { payload }) {
        return this.service.update(payload.providerName, payload.providerKey, {
            permissions: payload.permissions,
        });
    }
};
PermissionManagementState.ɵfac = function PermissionManagementState_Factory(t) { return new (t || PermissionManagementState)(ɵngcc0.ɵɵinject(PermissionsService)); };
PermissionManagementState.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: PermissionManagementState, factory: function (t) { return PermissionManagementState.ɵfac(t); } });
PermissionManagementState.ctorParameters = () => [
    { type: PermissionsService }
];
__decorate([
    Action(GetPermissions)
], PermissionManagementState.prototype, "permissionManagementGet", null);
__decorate([
    Action(UpdatePermissions)
], PermissionManagementState.prototype, "permissionManagementUpdate", null);
__decorate([
    Selector()
], PermissionManagementState, "getPermissionGroups", null);
__decorate([
    Selector()
], PermissionManagementState, "getEntityDisplayName", null);
PermissionManagementState = __decorate([
    State({
        name: 'PermissionManagementState',
        defaults: { permissionRes: {} },
    })
], PermissionManagementState);

class PermissionManagementComponent {
    constructor(store, configState, appConfigService) {
        this.store = store;
        this.configState = configState;
        this.appConfigService = appConfigService;
        this.hideBadges = false;
        this._visible = false;
        this.visibleChange = new EventEmitter();
        this.permissions = [];
        this.selectThisTab = false;
        this.selectAllTab = false;
        this.modalBusy = false;
        this.trackByFn = (_, item) => item.name;
    }
    get visible() {
        return this._visible;
    }
    set visible(value) {
        if (value === this._visible)
            return;
        if (value) {
            this.openModal().subscribe(() => {
                this._visible = true;
                this.visibleChange.emit(true);
            });
        }
        else {
            this.selectedGroup = null;
            this._visible = false;
            this.visibleChange.emit(false);
        }
    }
    get selectedGroupPermissions$() {
        const margin = `margin-${document.body.dir === 'rtl' ? 'right' : 'left'}.px`;
        return this.groups$.pipe(map(groups => this.selectedGroup
            ? groups.find(group => group.name === this.selectedGroup.name).permissions
            : []), map(permissions => permissions.map(permission => (Object.assign(Object.assign({}, permission), { style: { [margin]: findMargin(permissions, permission) }, isGranted: this.permissions.find(per => per.name === permission.name).isGranted })))));
    }
    getChecked(name) {
        return (this.permissions.find(per => per.name === name) || { isGranted: false }).isGranted;
    }
    isGrantedByOtherProviderName(grantedProviders) {
        if (grantedProviders.length) {
            return grantedProviders.findIndex(p => p.providerName !== this.providerName) > -1;
        }
        return false;
    }
    onClickCheckbox(clickedPermission, value) {
        if (clickedPermission.isGranted &&
            this.isGrantedByOtherProviderName(clickedPermission.grantedProviders))
            return;
        setTimeout(() => {
            this.permissions = this.permissions.map(per => {
                if (clickedPermission.name === per.name) {
                    return Object.assign(Object.assign({}, per), { isGranted: !per.isGranted });
                }
                else if (clickedPermission.name === per.parentName && clickedPermission.isGranted) {
                    return Object.assign(Object.assign({}, per), { isGranted: false });
                }
                else if (clickedPermission.parentName === per.name && !clickedPermission.isGranted) {
                    return Object.assign(Object.assign({}, per), { isGranted: true });
                }
                return per;
            });
            this.setTabCheckboxState();
            this.setGrantCheckboxState();
        }, 0);
    }
    setTabCheckboxState() {
        this.selectedGroupPermissions$.pipe(take(1)).subscribe(permissions => {
            const selectedPermissions = permissions.filter(per => per.isGranted);
            const element = document.querySelector('#select-all-in-this-tabs');
            if (selectedPermissions.length === permissions.length) {
                element.indeterminate = false;
                this.selectThisTab = true;
            }
            else if (selectedPermissions.length === 0) {
                element.indeterminate = false;
                this.selectThisTab = false;
            }
            else {
                element.indeterminate = true;
            }
        });
    }
    setGrantCheckboxState() {
        const selectedAllPermissions = this.permissions.filter(per => per.isGranted);
        const checkboxElement = document.querySelector('#select-all-in-all-tabs');
        if (selectedAllPermissions.length === this.permissions.length) {
            checkboxElement.indeterminate = false;
            this.selectAllTab = true;
        }
        else if (selectedAllPermissions.length === 0) {
            checkboxElement.indeterminate = false;
            this.selectAllTab = false;
        }
        else {
            checkboxElement.indeterminate = true;
        }
    }
    onClickSelectThisTab() {
        this.selectedGroupPermissions$.pipe(take(1)).subscribe(permissions => {
            permissions.forEach(permission => {
                if (permission.isGranted && this.isGrantedByOtherProviderName(permission.grantedProviders))
                    return;
                const index = this.permissions.findIndex(per => per.name === permission.name);
                this.permissions = [
                    ...this.permissions.slice(0, index),
                    Object.assign(Object.assign({}, this.permissions[index]), { isGranted: !this.selectThisTab }),
                    ...this.permissions.slice(index + 1),
                ];
            });
        });
        this.setGrantCheckboxState();
    }
    onClickSelectAll() {
        this.permissions = this.permissions.map(permission => (Object.assign(Object.assign({}, permission), { isGranted: this.isGrantedByOtherProviderName(permission.grantedProviders) || !this.selectAllTab })));
        this.selectThisTab = !this.selectAllTab;
    }
    onChangeGroup(group) {
        this.selectedGroup = group;
        this.setTabCheckboxState();
    }
    submit() {
        const unchangedPermissions = getPermissions(this.store.selectSnapshot(PermissionManagementState.getPermissionGroups));
        const changedPermissions = this.permissions
            .filter(per => unchangedPermissions.find(unchanged => unchanged.name === per.name).isGranted ===
            per.isGranted
            ? false
            : true)
            .map(({ name, isGranted }) => ({ name, isGranted }));
        if (!changedPermissions.length) {
            this.visible = false;
            return;
        }
        this.modalBusy = true;
        this.store
            .dispatch(new UpdatePermissions({
            providerKey: this.providerKey,
            providerName: this.providerName,
            permissions: changedPermissions,
        }))
            .pipe(switchMap(() => this.shouldFetchAppConfig()
            ? this.appConfigService.get().pipe(tap(res => this.configState.setState(res)))
            : of(null)), finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.visible = false;
        });
    }
    openModal() {
        if (!this.providerKey || !this.providerName) {
            throw new Error('Provider Key and Provider Name are required.');
        }
        return this.store
            .dispatch(new GetPermissions({
            providerKey: this.providerKey,
            providerName: this.providerName,
        }))
            .pipe(pluck('PermissionManagementState', 'permissionRes'), tap((permissionRes) => {
            this.selectedGroup = permissionRes.groups[0];
            this.permissions = getPermissions(permissionRes.groups);
        }));
    }
    initModal() {
        this.setTabCheckboxState();
        this.setGrantCheckboxState();
    }
    getAssignedCount(groupName) {
        return this.permissions.reduce((acc, val) => (val.name.split('.')[0] === groupName && val.isGranted ? acc + 1 : acc), 0);
    }
    shouldFetchAppConfig() {
        const currentUser = this.configState.getOne('currentUser');
        if (this.providerName === 'R')
            return currentUser.roles.some(role => role === this.providerKey);
        if (this.providerName === 'U')
            return currentUser.id === this.providerKey;
        return false;
    }
}
PermissionManagementComponent.ɵfac = function PermissionManagementComponent_Factory(t) { return new (t || PermissionManagementComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Store), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ConfigStateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AbpApplicationConfigurationService)); };
PermissionManagementComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PermissionManagementComponent, selectors: [["abp-permission-management"]], inputs: { hideBadges: "hideBadges", visible: "visible", providerName: "providerName", providerKey: "providerKey" }, outputs: { visibleChange: "visibleChange" }, exportAs: ["abpPermissionManagement"], decls: 3, vars: 7, consts: [[3, "visible", "busy", "visibleChange", "init"], [4, "ngIf"], ["abpHeader", ""], ["abpBody", ""], ["abpFooter", ""], [1, "custom-checkbox", "custom-control", "mb-2"], ["type", "checkbox", "id", "select-all-in-all-tabs", "name", "select-all-in-all-tabs", 1, "custom-control-input", 3, "ngModel", "ngModelChange", "click"], ["for", "select-all-in-all-tabs", 1, "custom-control-label"], [1, "mt-2", "mb-2"], [1, "row"], [1, "overflow-scroll", "col-md-4"], [1, "nav", "nav-pills", "flex-column"], ["class", "nav-item", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "col-md-8", "overflow-scroll"], [1, "mt-2", "mb-3"], [1, "pl-1", "pt-1"], ["type", "checkbox", "id", "select-all-in-this-tabs", "name", "select-all-in-this-tabs", 1, "custom-control-input", 3, "ngModel", "ngModelChange", "click"], ["for", "select-all-in-this-tabs", 1, "custom-control-label"], [1, "mb-3"], ["class", "custom-checkbox custom-control mb-2", 3, "ngStyle", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "nav-item"], ["class", "nav-link pointer", 3, "active", "click", 4, "ngIf"], [1, "nav-link", "pointer", 3, "click"], [1, "custom-checkbox", "custom-control", "mb-2", 3, "ngStyle"], ["type", "checkbox", 1, "custom-control-input", 3, "checked", "value", "disabled"], ["permissionCheckbox", ""], [1, "custom-control-label", 3, "click"], ["class", "badge badge-light", 4, "ngFor", "ngForOf"], [1, "badge", "badge-light"], ["type", "button", "abpClose", "", 1, "btn", "btn-secondary"], ["iconClass", "fa fa-check", 3, "click"]], template: function PermissionManagementComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "abp-modal", 0);
        ɵngcc0.ɵɵlistener("visibleChange", function PermissionManagementComponent_Template_abp_modal_visibleChange_0_listener($event) { return ctx.visible = $event; })("init", function PermissionManagementComponent_Template_abp_modal_init_0_listener() { return ctx.initModal(); });
        ɵngcc0.ɵɵtemplate(1, PermissionManagementComponent_ng_container_1_Template, 7, 0, "ng-container", 1);
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("visible", ctx.visible)("busy", ctx.modalBusy);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpureFunction1(5, _c1, ɵngcc0.ɵɵpipeBind1(2, 3, ctx.entityName$)));
    } }, directives: [ɵngcc3.ModalComponent, ɵngcc4.NgIf, ɵngcc5.CheckboxControlValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.NgModel, ɵngcc4.NgForOf, ɵngcc4.NgStyle, ɵngcc3.ModalCloseDirective, ɵngcc3.ButtonComponent], pipes: [ɵngcc4.AsyncPipe, ɵngcc1.LocalizationPipe], styles: [".overflow-scroll[_ngcontent-%COMP%] {\n        max-height: 70vh;\n        overflow-y: scroll;\n      }"] });
PermissionManagementComponent.ctorParameters = () => [
    { type: Store },
    { type: ConfigStateService },
    { type: AbpApplicationConfigurationService }
];
PermissionManagementComponent.propDecorators = {
    providerName: [{ type: Input }],
    providerKey: [{ type: Input }],
    hideBadges: [{ type: Input }],
    visible: [{ type: Input }],
    visibleChange: [{ type: Output }]
};
__decorate([
    Select(PermissionManagementState.getPermissionGroups)
], PermissionManagementComponent.prototype, "groups$", void 0);
__decorate([
    Select(PermissionManagementState.getEntityDisplayName)
], PermissionManagementComponent.prototype, "entityName$", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PermissionsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.RestService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PermissionManagementState, [{
        type: Injectable
    }], function () { return [{ type: PermissionsService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PermissionManagementComponent, [{
        type: Component,
        args: [{
                selector: 'abp-permission-management',
                template: "<abp-modal [(visible)]=\"visible\" (init)=\"initModal()\" [busy]=\"modalBusy\">\n  <ng-container *ngIf=\"{ entityName: entityName$ | async } as data\">\n    <ng-template #abpHeader>\n      <h4>\n        {{ 'AbpPermissionManagement::Permissions' | abpLocalization }} - {{ data.entityName }}\n      </h4>\n    </ng-template>\n    <ng-template #abpBody>\n      <div class=\"custom-checkbox custom-control mb-2\">\n        <input\n          type=\"checkbox\"\n          id=\"select-all-in-all-tabs\"\n          name=\"select-all-in-all-tabs\"\n          class=\"custom-control-input\"\n          [(ngModel)]=\"selectAllTab\"\n          (click)=\"onClickSelectAll()\"\n        />\n        <label class=\"custom-control-label\" for=\"select-all-in-all-tabs\">{{\n          'AbpPermissionManagement::SelectAllInAllTabs' | abpLocalization\n        }}</label>\n      </div>\n\n      <hr class=\"mt-2 mb-2\" />\n      <div class=\"row\">\n        <div class=\"overflow-scroll col-md-4\">\n          <ul class=\"nav nav-pills flex-column\">\n            <li *ngFor=\"let group of groups$ | async; trackBy: trackByFn\" class=\"nav-item\">\n              <a\n                *ngIf=\"{ assignedCount: getAssignedCount(group.name) } as data\"\n                class=\"nav-link pointer\"\n                [class.active]=\"selectedGroup?.name === group?.name\"\n                (click)=\"onChangeGroup(group)\"\n              >\n                <div [class.font-weight-bold]=\"data.assignedCount\">\n                  {{ group?.displayName }}\n                  <span>({{ data.assignedCount }})</span>\n                </div>\n              </a>\n            </li>\n          </ul>\n        </div>\n        <div class=\"col-md-8 overflow-scroll\">\n          <h4>{{ selectedGroup?.displayName }}</h4>\n          <hr class=\"mt-2 mb-3\" />\n          <div class=\"pl-1 pt-1\">\n            <div class=\"custom-checkbox custom-control mb-2\">\n              <input\n                type=\"checkbox\"\n                id=\"select-all-in-this-tabs\"\n                name=\"select-all-in-this-tabs\"\n                class=\"custom-control-input\"\n                [(ngModel)]=\"selectThisTab\"\n                (click)=\"onClickSelectThisTab()\"\n              />\n              <label class=\"custom-control-label\" for=\"select-all-in-this-tabs\">{{\n                'AbpPermissionManagement::SelectAllInThisTab' | abpLocalization\n              }}</label>\n            </div>\n            <hr class=\"mb-3\" />\n            <div\n              *ngFor=\"\n                let permission of selectedGroupPermissions$ | async;\n                let i = index;\n                trackBy: trackByFn\n              \"\n              [ngStyle]=\"permission.style\"\n              class=\"custom-checkbox custom-control mb-2\"\n            >\n              <input\n                #permissionCheckbox\n                type=\"checkbox\"\n                [checked]=\"getChecked(permission.name)\"\n                [value]=\"getChecked(permission.name)\"\n                [attr.id]=\"permission.name\"\n                class=\"custom-control-input\"\n                [disabled]=\"isGrantedByOtherProviderName(permission.grantedProviders)\"\n              />\n              <label\n                class=\"custom-control-label\"\n                [attr.for]=\"permission.name\"\n                (click)=\"onClickCheckbox(permission, permissionCheckbox.value)\"\n                >{{ permission.displayName }}\n                <ng-container *ngIf=\"!hideBadges\">\n                  <span\n                    *ngFor=\"let provider of permission.grantedProviders\"\n                    class=\"badge badge-light\"\n                    >{{ provider.providerName }}: {{ provider.providerKey }}</span\n                  >\n                </ng-container>\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template #abpFooter>\n      <button type=\"button\" class=\"btn btn-secondary\" abpClose>\n        {{ 'AbpIdentity::Cancel' | abpLocalization }}\n      </button>\n      <abp-button iconClass=\"fa fa-check\" (click)=\"submit()\">{{\n        'AbpIdentity::Save' | abpLocalization\n      }}</abp-button>\n    </ng-template>\n  </ng-container>\n</abp-modal>\n",
                exportAs: 'abpPermissionManagement',
                styles: [`
      .overflow-scroll {
        max-height: 70vh;
        overflow-y: scroll;
      }
    `]
            }]
    }], function () { return [{ type: ɵngcc2.Store }, { type: ɵngcc1.ConfigStateService }, { type: ɵngcc1.AbpApplicationConfigurationService }]; }, { hideBadges: [{
            type: Input
        }], visibleChange: [{
            type: Output
        }], visible: [{
            type: Input
        }], providerName: [{
            type: Input
        }], providerKey: [{
            type: Input
        }] }); })();
function findMargin(permissions, permission) {
    const parentPermission = permissions.find(per => per.name === permission.parentName);
    if (parentPermission && parentPermission.parentName) {
        let margin = 20;
        return (margin += findMargin(permissions, parentPermission));
    }
    return parentPermission ? 20 : 0;
}
function getPermissions(groups) {
    return groups.reduce((acc, val) => [...acc, ...val.permissions], []);
}

class PermissionManagementModule {
}
PermissionManagementModule.ɵfac = function PermissionManagementModule_Factory(t) { return new (t || PermissionManagementModule)(); };
PermissionManagementModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: PermissionManagementModule });
PermissionManagementModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CoreModule, ThemeSharedModule, NgxsModule.forFeature([PermissionManagementState])]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PermissionManagementModule, [{
        type: NgModule,
        args: [{
                declarations: [PermissionManagementComponent],
                imports: [CoreModule, ThemeSharedModule, NgxsModule.forFeature([PermissionManagementState])],
                exports: [PermissionManagementComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PermissionManagementModule, { declarations: function () { return [PermissionManagementComponent]; }, imports: function () { return [CoreModule, ThemeSharedModule, ɵngcc2.ɵbc]; }, exports: function () { return [PermissionManagementComponent]; } }); })();

class PermissionManagementStateService {
    constructor(store) {
        this.store = store;
    }
    getPermissionGroups() {
        return this.store.selectSnapshot(PermissionManagementState.getPermissionGroups);
    }
    getEntityDisplayName() {
        return this.store.selectSnapshot(PermissionManagementState.getEntityDisplayName);
    }
    dispatchGetPermissions(...args) {
        return this.store.dispatch(new GetPermissions(...args));
    }
    dispatchUpdatePermissions(...args) {
        return this.store.dispatch(new UpdatePermissions(...args));
    }
}
PermissionManagementStateService.ɵfac = function PermissionManagementStateService_Factory(t) { return new (t || PermissionManagementStateService)(ɵngcc0.ɵɵinject(ɵngcc2.Store)); };
PermissionManagementStateService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PermissionManagementStateService_Factory() { return new PermissionManagementStateService(i0.ɵɵinject(i1$1.Store)); }, token: PermissionManagementStateService, providedIn: "root" });
PermissionManagementStateService.ctorParameters = () => [
    { type: Store }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PermissionManagementStateService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc2.Store }]; }, null); })();

/*
 * Public API Surface of permission-management
 */

/**
 * Generated bundle index. Do not edit.
 */

export { GetPermissions, PermissionManagementComponent, PermissionManagementModule, PermissionManagementState, PermissionManagementStateService, PermissionsService, UpdatePermissions, PermissionManagementComponent as ɵa, PermissionManagementState as ɵb, PermissionsService as ɵc, GetPermissions as ɵd, UpdatePermissions as ɵe };

//# sourceMappingURL=abp-ng.permission-management.js.map