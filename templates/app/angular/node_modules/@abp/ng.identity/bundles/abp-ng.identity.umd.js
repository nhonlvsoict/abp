(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@abp/ng.core'), require('@abp/ng.theme.shared'), require('@abp/ng.theme.shared/extensions'), require('@angular/core'), require('@ngxs/store'), require('rxjs/operators'), require('@angular/forms'), require('snq'), require('rxjs'), require('@abp/ng.permission-management'), require('@ng-bootstrap/ng-bootstrap'), require('@ngx-validate/core'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('@abp/ng.identity', ['exports', '@abp/ng.core', '@abp/ng.theme.shared', '@abp/ng.theme.shared/extensions', '@angular/core', '@ngxs/store', 'rxjs/operators', '@angular/forms', 'snq', 'rxjs', '@abp/ng.permission-management', '@ng-bootstrap/ng-bootstrap', '@ngx-validate/core', '@angular/router'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.abp = global.abp || {}, global.abp.ng = global.abp.ng || {}, global.abp.ng.identity = {}), global.i1, global.ng_theme_shared, global.extensions, global.ng.core, global.i1$1, global.rxjs.operators, global.ng.forms, global.snq, global.rxjs, global.ng_permissionManagement, global.ngBootstrap, global.core, global.ng.router));
}(this, (function (exports, i1, ng_theme_shared, extensions, i0, i1$1, operators, forms, snq, rxjs, ng_permissionManagement, ngBootstrap, core, router) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var snq__default = /*#__PURE__*/_interopDefaultLegacy(snq);

    var GetRoles = /** @class */ (function () {
        function GetRoles(payload) {
            this.payload = payload;
        }
        return GetRoles;
    }());
    GetRoles.type = '[Identity] Get Roles';
    var GetRoleById = /** @class */ (function () {
        function GetRoleById(payload) {
            this.payload = payload;
        }
        return GetRoleById;
    }());
    GetRoleById.type = '[Identity] Get Role By Id';
    var DeleteRole = /** @class */ (function () {
        function DeleteRole(payload) {
            this.payload = payload;
        }
        return DeleteRole;
    }());
    DeleteRole.type = '[Identity] Delete Role';
    var CreateRole = /** @class */ (function () {
        function CreateRole(payload) {
            this.payload = payload;
        }
        return CreateRole;
    }());
    CreateRole.type = '[Identity] Create Role';
    var UpdateRole = /** @class */ (function () {
        function UpdateRole(payload) {
            this.payload = payload;
        }
        return UpdateRole;
    }());
    UpdateRole.type = '[Identity] Update Role';
    var GetUsers = /** @class */ (function () {
        function GetUsers(payload) {
            this.payload = payload;
        }
        return GetUsers;
    }());
    GetUsers.type = '[Identity] Get Users';
    var GetUserById = /** @class */ (function () {
        function GetUserById(payload) {
            this.payload = payload;
        }
        return GetUserById;
    }());
    GetUserById.type = '[Identity] Get User By Id';
    var DeleteUser = /** @class */ (function () {
        function DeleteUser(payload) {
            this.payload = payload;
        }
        return DeleteUser;
    }());
    DeleteUser.type = '[Identity] Delete User';
    var CreateUser = /** @class */ (function () {
        function CreateUser(payload) {
            this.payload = payload;
        }
        return CreateUser;
    }());
    CreateUser.type = '[Identity] Create User';
    var UpdateUser = /** @class */ (function () {
        function UpdateUser(payload) {
            this.payload = payload;
        }
        return UpdateUser;
    }());
    UpdateUser.type = '[Identity] Update User';
    var GetUserRoles = /** @class */ (function () {
        function GetUserRoles(payload) {
            this.payload = payload;
        }
        return GetUserRoles;
    }());
    GetUserRoles.type = '[Identity] Get User Roles';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var IdentityRoleService = /** @class */ (function () {
        function IdentityRoleService(restService) {
            var _this = this;
            this.restService = restService;
            this.apiName = 'AbpIdentity';
            this.create = function (input) { return _this.restService.request({
                method: 'POST',
                url: '/api/identity/roles',
                body: input,
            }, { apiName: _this.apiName }); };
            this.delete = function (id) { return _this.restService.request({
                method: 'DELETE',
                url: "/api/identity/roles/" + id,
            }, { apiName: _this.apiName }); };
            this.get = function (id) { return _this.restService.request({
                method: 'GET',
                url: "/api/identity/roles/" + id,
            }, { apiName: _this.apiName }); };
            this.getAllList = function () { return _this.restService.request({
                method: 'GET',
                url: '/api/identity/roles/all',
            }, { apiName: _this.apiName }); };
            this.getList = function (input) { return _this.restService.request({
                method: 'GET',
                url: '/api/identity/roles',
                params: { sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
            }, { apiName: _this.apiName }); };
            this.update = function (id, input) { return _this.restService.request({
                method: 'PUT',
                url: "/api/identity/roles/" + id,
                body: input,
            }, { apiName: _this.apiName }); };
        }
        return IdentityRoleService;
    }());
    IdentityRoleService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function IdentityRoleService_Factory() { return new IdentityRoleService(i0__namespace.ɵɵinject(i1__namespace.RestService)); }, token: IdentityRoleService, providedIn: "root" });
    IdentityRoleService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    IdentityRoleService.ctorParameters = function () { return [
        { type: i1.RestService }
    ]; };

    var IdentityUserService = /** @class */ (function () {
        function IdentityUserService(restService) {
            var _this = this;
            this.restService = restService;
            this.apiName = 'AbpIdentity';
            this.create = function (input) { return _this.restService.request({
                method: 'POST',
                url: '/api/identity/users',
                body: input,
            }, { apiName: _this.apiName }); };
            this.delete = function (id) { return _this.restService.request({
                method: 'DELETE',
                url: "/api/identity/users/" + id,
            }, { apiName: _this.apiName }); };
            this.findByEmail = function (email) { return _this.restService.request({
                method: 'GET',
                url: "/api/identity/users/by-email/" + email,
            }, { apiName: _this.apiName }); };
            this.findByUsername = function (username) { return _this.restService.request({
                method: 'GET',
                url: '/api/identity/users/by-username/{userName}',
            }, { apiName: _this.apiName }); };
            this.get = function (id) { return _this.restService.request({
                method: 'GET',
                url: "/api/identity/users/" + id,
            }, { apiName: _this.apiName }); };
            this.getAssignableRoles = function () { return _this.restService.request({
                method: 'GET',
                url: '/api/identity/users/assignable-roles',
            }, { apiName: _this.apiName }); };
            this.getList = function (input) { return _this.restService.request({
                method: 'GET',
                url: '/api/identity/users',
                params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
            }, { apiName: _this.apiName }); };
            this.getRoles = function (id) { return _this.restService.request({
                method: 'GET',
                url: "/api/identity/users/" + id + "/roles",
            }, { apiName: _this.apiName }); };
            this.update = function (id, input) { return _this.restService.request({
                method: 'PUT',
                url: "/api/identity/users/" + id,
                body: input,
            }, { apiName: _this.apiName }); };
            this.updateRoles = function (id, input) { return _this.restService.request({
                method: 'PUT',
                url: "/api/identity/users/" + id + "/roles",
                body: input,
            }, { apiName: _this.apiName }); };
        }
        return IdentityUserService;
    }());
    IdentityUserService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function IdentityUserService_Factory() { return new IdentityUserService(i0__namespace.ɵɵinject(i1__namespace.RestService)); }, token: IdentityUserService, providedIn: "root" });
    IdentityUserService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    IdentityUserService.ctorParameters = function () { return [
        { type: i1.RestService }
    ]; };

    exports.ɵc = /** @class */ (function () {
        function IdentityState(identityUserService, identityRoleService) {
            this.identityUserService = identityUserService;
            this.identityRoleService = identityRoleService;
        }
        IdentityState.getRoles = function (_a) {
            var roles = _a.roles;
            return roles.items || [];
        };
        IdentityState.getRolesTotalCount = function (_a) {
            var roles = _a.roles;
            return roles.totalCount || 0;
        };
        IdentityState.getUsers = function (_a) {
            var users = _a.users;
            return users.items || [];
        };
        IdentityState.getUsersTotalCount = function (_a) {
            var users = _a.users;
            return users.totalCount || 0;
        };
        IdentityState.prototype.getRoles = function (_a, _b) {
            var patchState = _a.patchState;
            var payload = _b.payload;
            return this.identityRoleService.getList(payload).pipe(operators.tap(function (roles) { return patchState({
                roles: roles,
            }); }));
        };
        IdentityState.prototype.getRole = function (_a, _b) {
            var patchState = _a.patchState;
            var payload = _b.payload;
            return this.identityRoleService.get(payload).pipe(operators.tap(function (selectedRole) { return patchState({
                selectedRole: selectedRole,
            }); }));
        };
        IdentityState.prototype.deleteRole = function (_, _a) {
            var payload = _a.payload;
            return this.identityRoleService.delete(payload);
        };
        IdentityState.prototype.addRole = function (_, _a) {
            var payload = _a.payload;
            return this.identityRoleService.create(payload);
        };
        IdentityState.prototype.updateRole = function (_a, _b) {
            var getState = _a.getState;
            var payload = _b.payload;
            return this.identityRoleService.update(payload.id, Object.assign(Object.assign({}, getState().selectedRole), payload));
        };
        IdentityState.prototype.getUsers = function (_a, _b) {
            var patchState = _a.patchState;
            var payload = _b.payload;
            return this.identityUserService.getList(payload).pipe(operators.tap(function (users) { return patchState({
                users: users,
            }); }));
        };
        IdentityState.prototype.getUser = function (_a, _b) {
            var patchState = _a.patchState;
            var payload = _b.payload;
            return this.identityUserService.get(payload).pipe(operators.tap(function (selectedUser) { return patchState({
                selectedUser: selectedUser,
            }); }));
        };
        IdentityState.prototype.deleteUser = function (_, _a) {
            var payload = _a.payload;
            return this.identityUserService.delete(payload);
        };
        IdentityState.prototype.addUser = function (_, _a) {
            var payload = _a.payload;
            return this.identityUserService.create(payload);
        };
        IdentityState.prototype.updateUser = function (_a, _b) {
            var getState = _a.getState;
            var payload = _b.payload;
            return this.identityUserService.update(payload.id, Object.assign(Object.assign({}, getState().selectedUser), payload));
        };
        IdentityState.prototype.getUserRoles = function (_a, _b) {
            var patchState = _a.patchState;
            var payload = _b.payload;
            return this.identityUserService.getRoles(payload).pipe(operators.pluck('items'), operators.tap(function (selectedUserRoles) { return patchState({
                selectedUserRoles: selectedUserRoles,
            }); }));
        };
        return IdentityState;
    }());
    exports.ɵc.decorators = [
        { type: i0.Injectable }
    ];
    exports.ɵc.ctorParameters = function () { return [
        { type: IdentityUserService },
        { type: IdentityRoleService }
    ]; };
    __decorate([
        i1$1.Action(GetRoles)
    ], exports.ɵc.prototype, "getRoles", null);
    __decorate([
        i1$1.Action(GetRoleById)
    ], exports.ɵc.prototype, "getRole", null);
    __decorate([
        i1$1.Action(DeleteRole)
    ], exports.ɵc.prototype, "deleteRole", null);
    __decorate([
        i1$1.Action(CreateRole)
    ], exports.ɵc.prototype, "addRole", null);
    __decorate([
        i1$1.Action(UpdateRole)
    ], exports.ɵc.prototype, "updateRole", null);
    __decorate([
        i1$1.Action(GetUsers)
    ], exports.ɵc.prototype, "getUsers", null);
    __decorate([
        i1$1.Action(GetUserById)
    ], exports.ɵc.prototype, "getUser", null);
    __decorate([
        i1$1.Action(DeleteUser)
    ], exports.ɵc.prototype, "deleteUser", null);
    __decorate([
        i1$1.Action(CreateUser)
    ], exports.ɵc.prototype, "addUser", null);
    __decorate([
        i1$1.Action(UpdateUser)
    ], exports.ɵc.prototype, "updateUser", null);
    __decorate([
        i1$1.Action(GetUserRoles)
    ], exports.ɵc.prototype, "getUserRoles", null);
    __decorate([
        i1$1.Selector()
    ], exports.ɵc, "getRoles", null);
    __decorate([
        i1$1.Selector()
    ], exports.ɵc, "getRolesTotalCount", null);
    __decorate([
        i1$1.Selector()
    ], exports.ɵc, "getUsers", null);
    __decorate([
        i1$1.Selector()
    ], exports.ɵc, "getUsersTotalCount", null);
    exports.ɵc = __decorate([
        i1$1.State({
            name: 'IdentityState',
            defaults: { roles: {}, selectedRole: {}, users: {}, selectedUser: {} },
        })
    ], exports.ɵc);

    var ɵ0$9 = "Identity.RolesComponent" /* Roles */;
    var RolesComponent = /** @class */ (function () {
        function RolesComponent(list, confirmationService, store, injector) {
            var _this = this;
            this.list = list;
            this.confirmationService = confirmationService;
            this.store = store;
            this.injector = injector;
            this.visiblePermissions = false;
            this.modalBusy = false;
            this.permissionManagementKey = "PermissionManagement.PermissionManagementComponent" /* PermissionManagement */;
            this.onVisiblePermissionChange = function (event) {
                _this.visiblePermissions = event;
            };
        }
        RolesComponent.prototype.ngOnInit = function () {
            this.hookToQuery();
        };
        RolesComponent.prototype.buildForm = function () {
            var data = new extensions.FormPropData(this.injector, this.selected);
            this.form = extensions.generateFormFromProps(data);
        };
        RolesComponent.prototype.openModal = function () {
            this.buildForm();
            this.isModalVisible = true;
        };
        RolesComponent.prototype.add = function () {
            this.selected = {};
            this.openModal();
        };
        RolesComponent.prototype.edit = function (id) {
            var _this = this;
            this.store
                .dispatch(new GetRoleById(id))
                .pipe(operators.pluck('IdentityState', 'selectedRole'))
                .subscribe(function (selectedRole) {
                _this.selected = selectedRole;
                _this.openModal();
            });
        };
        RolesComponent.prototype.save = function () {
            var _this = this;
            if (!this.form.valid)
                return;
            this.modalBusy = true;
            this.store
                .dispatch(this.selected.id
                ? new UpdateRole(Object.assign(Object.assign(Object.assign({}, this.selected), this.form.value), { id: this.selected.id }))
                : new CreateRole(this.form.value))
                .pipe(operators.finalize(function () { return (_this.modalBusy = false); }))
                .subscribe(function () {
                _this.isModalVisible = false;
                _this.list.get();
            });
        };
        RolesComponent.prototype.delete = function (id, name) {
            var _this = this;
            this.confirmationService
                .warn('AbpIdentity::RoleDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {
                messageLocalizationParams: [name],
            })
                .subscribe(function (status) {
                if (status === ng_theme_shared.Confirmation.Status.confirm) {
                    _this.store.dispatch(new DeleteRole(id)).subscribe(function () { return _this.list.get(); });
                }
            });
        };
        RolesComponent.prototype.hookToQuery = function () {
            var _this = this;
            this.list.hookToQuery(function (query) { return _this.store.dispatch(new GetRoles(query)); }).subscribe();
        };
        RolesComponent.prototype.openPermissionsModal = function (providerKey) {
            var _this = this;
            this.providerKey = providerKey;
            setTimeout(function () {
                _this.visiblePermissions = true;
            }, 0);
        };
        RolesComponent.prototype.sort = function (data) {
            var _a = data.sorts[0], prop = _a.prop, dir = _a.dir;
            this.list.sortKey = prop;
            this.list.sortOrder = dir;
        };
        return RolesComponent;
    }());
    RolesComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'abp-roles',
                    template: "<div id=\"identity-roles-wrapper\" class=\"card\">\n  <div class=\"card-header\">\n    <div class=\"row\">\n      <div class=\"col col-md-6\">\n        <h5 class=\"card-title\">{{ 'AbpIdentity::Roles' | abpLocalization }}</h5>\n      </div>\n      <div class=\"text-right col col-md-6\">\n        <abp-page-toolbar [record]=\"data$ | async\"></abp-page-toolbar>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card-body\">\n    <abp-extensible-table\n      [data]=\"data$ | async\"\n      [recordsTotal]=\"totalCount$ | async\"\n      [list]=\"list\"\n    ></abp-extensible-table>\n  </div>\n</div>\n\n<abp-modal size=\"md\" [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\n  <ng-template #abpHeader>\n    <h3>{{ (selected?.id ? 'AbpIdentity::Edit' : 'AbpIdentity::NewRole') | abpLocalization }}</h3>\n  </ng-template>\n\n  <ng-template #abpBody>\n    <form [formGroup]=\"form\" (ngSubmit)=\"save()\" validateOnSubmit>\n      <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\n    </form>\n  </ng-template>\n\n  <ng-template #abpFooter>\n    <button type=\"button\" class=\"btn btn-secondary\" abpClose>\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\n    </button>\n    <abp-button iconClass=\"fa fa-check\" [disabled]=\"form?.invalid\" (click)=\"save()\">{{\n      'AbpIdentity::Save' | abpLocalization\n    }}</abp-button>\n  </ng-template>\n</abp-modal>\n\n<abp-permission-management\n  #abpPermissionManagement=\"abpPermissionManagement\"\n  *abpReplaceableTemplate=\"\n    {\n      inputs: {\n        providerName: { value: 'R' },\n        providerKey: { value: providerKey },\n        visible: { value: visiblePermissions, twoWay: true },\n        hideBadges: { value: true }\n      },\n      outputs: { visibleChange: onVisiblePermissionChange },\n      componentKey: permissionManagementKey\n    };\n    let init = initTemplate\n  \"\n  (abpInit)=\"init(abpPermissionManagement)\"\n>\n</abp-permission-management>\n",
                    providers: [
                        i1.ListService,
                        {
                            provide: extensions.EXTENSIONS_IDENTIFIER,
                            useValue: ɵ0$9,
                        },
                    ]
                },] }
    ];
    RolesComponent.ctorParameters = function () { return [
        { type: i1.ListService },
        { type: ng_theme_shared.ConfirmationService },
        { type: i1$1.Store },
        { type: i0.Injector }
    ]; };
    __decorate([
        i1$1.Select(exports.ɵc.getRoles)
    ], RolesComponent.prototype, "data$", void 0);
    __decorate([
        i1$1.Select(exports.ɵc.getRolesTotalCount)
    ], RolesComponent.prototype, "totalCount$", void 0);

    var ɵ0$8 = "Identity.UsersComponent" /* Users */;
    var UsersComponent = /** @class */ (function () {
        function UsersComponent(list, confirmationService, userService, fb, store, injector) {
            var _this = this;
            this.list = list;
            this.confirmationService = confirmationService;
            this.userService = userService;
            this.fb = fb;
            this.store = store;
            this.injector = injector;
            this.visiblePermissions = false;
            this.modalBusy = false;
            this.permissionManagementKey = "PermissionManagement.PermissionManagementComponent" /* PermissionManagement */;
            this.trackByFn = function (index, item) { return Object.keys(item)[0] || index; };
            this.onVisiblePermissionChange = function (event) {
                _this.visiblePermissions = event;
            };
        }
        Object.defineProperty(UsersComponent.prototype, "roleGroups", {
            get: function () {
                var _this = this;
                return snq__default['default'](function () { return _this.form.get('roleNames').controls; }, []);
            },
            enumerable: false,
            configurable: true
        });
        UsersComponent.prototype.ngOnInit = function () {
            this.hookToQuery();
        };
        UsersComponent.prototype.buildForm = function () {
            var _this = this;
            var data = new extensions.FormPropData(this.injector, this.selected);
            this.form = extensions.generateFormFromProps(data);
            this.userService.getAssignableRoles().subscribe(function (_a) {
                var items = _a.items;
                _this.roles = items;
                _this.form.addControl('roleNames', _this.fb.array(_this.roles.map(function (role) {
                    var _a;
                    return _this.fb.group((_a = {},
                        _a[role.name] = [
                            _this.selected.id
                                ? !!snq__default['default'](function () { return _this.selectedUserRoles.find(function (userRole) { return userRole.id === role.id; }); })
                                : role.isDefault,
                        ],
                        _a));
                })));
            });
        };
        UsersComponent.prototype.openModal = function () {
            this.buildForm();
            this.isModalVisible = true;
        };
        UsersComponent.prototype.add = function () {
            this.selected = {};
            this.selectedUserRoles = [];
            this.openModal();
        };
        UsersComponent.prototype.edit = function (id) {
            var _this = this;
            this.store
                .dispatch(new GetUserById(id))
                .pipe(operators.switchMap(function () { return _this.store.dispatch(new GetUserRoles(id)); }), operators.pluck('IdentityState'), operators.take(1))
                .subscribe(function (state) {
                _this.selected = state.selectedUser;
                _this.selectedUserRoles = state.selectedUserRoles || [];
                _this.openModal();
            });
        };
        UsersComponent.prototype.save = function () {
            var _this = this;
            if (!this.form.valid || this.modalBusy)
                return;
            this.modalBusy = true;
            var roleNames = this.form.value.roleNames;
            var mappedRoleNames = snq__default['default'](function () { return roleNames.filter(function (role) { return !!role[Object.keys(role)[0]]; }).map(function (role) { return Object.keys(role)[0]; }); }, []);
            this.store
                .dispatch(this.selected.id
                ? new UpdateUser(Object.assign(Object.assign(Object.assign({}, this.selected), this.form.value), { id: this.selected.id, roleNames: mappedRoleNames }))
                : new CreateUser(Object.assign(Object.assign({}, this.form.value), { roleNames: mappedRoleNames })))
                .pipe(operators.finalize(function () { return (_this.modalBusy = false); }))
                .subscribe(function () {
                _this.isModalVisible = false;
                _this.list.get();
            });
        };
        UsersComponent.prototype.delete = function (id, userName) {
            var _this = this;
            this.confirmationService
                .warn('AbpIdentity::UserDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {
                messageLocalizationParams: [userName],
            })
                .subscribe(function (status) {
                if (status === ng_theme_shared.Confirmation.Status.confirm) {
                    _this.store.dispatch(new DeleteUser(id)).subscribe(function () { return _this.list.get(); });
                }
            });
        };
        UsersComponent.prototype.sort = function (data) {
            var _a = data.sorts[0], prop = _a.prop, dir = _a.dir;
            this.list.sortKey = prop;
            this.list.sortOrder = dir;
        };
        UsersComponent.prototype.hookToQuery = function () {
            var _this = this;
            this.list.hookToQuery(function (query) { return _this.store.dispatch(new GetUsers(query)); }).subscribe();
        };
        UsersComponent.prototype.openPermissionsModal = function (providerKey) {
            var _this = this;
            this.providerKey = providerKey;
            setTimeout(function () {
                _this.visiblePermissions = true;
            }, 0);
        };
        return UsersComponent;
    }());
    UsersComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'abp-users',
                    template: "<div id=\"identity-roles-wrapper\" class=\"card\">\n  <div class=\"card-header\">\n    <div class=\"row\">\n      <div class=\"col col-md-6\">\n        <h5 class=\"card-title\">{{ 'AbpIdentity::Users' | abpLocalization }}</h5>\n      </div>\n      <div class=\"text-right col col-md-6\">\n        <abp-page-toolbar [record]=\"data$ | async\"></abp-page-toolbar>\n      </div>\n    </div>\n  </div>\n  <div class=\"card-body\">\n    <div id=\"data-tables-table-filter\" class=\"data-tables-filter\">\n      <div class=\"input-group\">\n        <input\n          type=\"search\"\n          class=\"form-control\"\n          [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\n          [(ngModel)]=\"list.filter\"\n        />\n      </div>\n    </div>\n\n    <abp-extensible-table\n      [data]=\"data$ | async\"\n      [recordsTotal]=\"totalCount$ | async\"\n      [list]=\"list\"\n    ></abp-extensible-table>\n  </div>\n</div>\n\n<abp-modal size=\"md\" [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\n  <ng-template #abpHeader>\n    <h3>{{ (selected?.id ? 'AbpIdentity::Edit' : 'AbpIdentity::NewUser') | abpLocalization }}</h3>\n  </ng-template>\n\n  <ng-template #abpBody>\n    <ng-template #loaderRef\n      ><div class=\"text-center\"><i class=\"fa fa-pulse fa-spinner\"></i></div\n    ></ng-template>\n\n    <form *ngIf=\"form; else loaderRef\" [formGroup]=\"form\" (ngSubmit)=\"save()\">\n      <ul ngbNav #nav=\"ngbNav\" class=\"nav-tabs\">\n        <li ngbNavItem>\n          <a ngbNavLink>{{ 'AbpIdentity::UserInformations' | abpLocalization }}</a>\n          <ng-template ngbNavContent>\n            <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\n          </ng-template>\n        </li>\n\n        <li ngbNavItem>\n          <a ngbNavLink>{{ 'AbpIdentity::Roles' | abpLocalization }}</a>\n          <ng-template ngbNavContent>\n            <div\n              *ngFor=\"let roleGroup of roleGroups; let i = index; trackBy: trackByFn\"\n              class=\"custom-checkbox custom-control mb-2\"\n            >\n              <input\n                type=\"checkbox\"\n                class=\"custom-control-input\"\n                [attr.id]=\"'roles-' + i\"\n                [formControl]=\"roleGroup.controls[roles[i].name]\"\n              />\n              <label class=\"custom-control-label\" [attr.for]=\"'roles-' + i\">{{\n                roles[i].name\n              }}</label>\n            </div>\n          </ng-template>\n        </li>\n      </ul>\n\n      <div class=\"mt-2 fade-in-top\" [ngbNavOutlet]=\"nav\"></div>\n    </form>\n  </ng-template>\n\n  <ng-template #abpFooter>\n    <button type=\"button\" class=\"btn btn-secondary\" abpClose>\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\n    </button>\n    <abp-button iconClass=\"fa fa-check\" [disabled]=\"form?.invalid\" (click)=\"save()\">{{\n      'AbpIdentity::Save' | abpLocalization\n    }}</abp-button>\n  </ng-template>\n</abp-modal>\n\n<abp-permission-management\n  #abpPermissionManagement=\"abpPermissionManagement\"\n  *abpReplaceableTemplate=\"\n    {\n      inputs: {\n        providerName: { value: 'U' },\n        providerKey: { value: providerKey },\n        visible: { value: visiblePermissions, twoWay: true }\n      },\n      outputs: { visibleChange: onVisiblePermissionChange },\n      componentKey: permissionManagementKey\n    };\n    let init = initTemplate\n  \"\n  (abpInit)=\"init(abpPermissionManagement)\"\n>\n</abp-permission-management>\n",
                    providers: [
                        i1.ListService,
                        {
                            provide: extensions.EXTENSIONS_IDENTIFIER,
                            useValue: ɵ0$8,
                        },
                    ]
                },] }
    ];
    UsersComponent.ctorParameters = function () { return [
        { type: i1.ListService },
        { type: ng_theme_shared.ConfirmationService },
        { type: IdentityUserService },
        { type: forms.FormBuilder },
        { type: i1$1.Store },
        { type: i0.Injector }
    ]; };
    UsersComponent.propDecorators = {
        modalContent: [{ type: i0.ViewChild, args: ['modalContent', { static: false },] }]
    };
    __decorate([
        i1$1.Select(exports.ɵc.getUsers)
    ], UsersComponent.prototype, "data$", void 0);
    __decorate([
        i1$1.Select(exports.ɵc.getUsersTotalCount)
    ], UsersComponent.prototype, "totalCount$", void 0);

    var ɵ0$7 = function (data) {
        var component = data.getInjected(RolesComponent);
        component.edit(data.record.id);
    }, ɵ1$4 = function (data) {
        var component = data.getInjected(RolesComponent);
        component.openPermissionsModal(data.record.name);
    }, ɵ2$2 = function (data) {
        var component = data.getInjected(RolesComponent);
        component.delete(data.record.id, data.record.name);
    }, ɵ3$1 = function (data) { return !data.record.isStatic; };
    var DEFAULT_ROLES_ENTITY_ACTIONS = extensions.EntityAction.createMany([
        {
            text: 'AbpIdentity::Edit',
            action: ɵ0$7,
            permission: 'AbpIdentity.Roles.Update',
        },
        {
            text: 'AbpIdentity::Permissions',
            action: ɵ1$4,
            permission: 'AbpIdentity.Roles.ManagePermissions',
        },
        {
            text: 'AbpIdentity::Delete',
            action: ɵ2$2,
            permission: 'AbpIdentity.Roles.Delete',
            visible: ɵ3$1,
        },
    ]);

    var ɵ0$6 = function (data) {
        var l10n = data.getInjected(i1.LocalizationService);
        var t = l10n.instant.bind(l10n);
        var _a = data.record, isDefault = _a.isDefault, isPublic = _a.isPublic, name = _a.name;
        return rxjs.of(name +
            (isDefault
                ? "<span class=\"badge badge-pill badge-success ml-1\">" + t('AbpIdentity::DisplayName:IsDefault') + "</span>"
                : '') +
            (isPublic
                ? "<span class=\"badge badge-pill badge-info ml-1\">" + t('AbpIdentity::DisplayName:IsPublic') + "</span>"
                : ''));
    };
    var DEFAULT_ROLES_ENTITY_PROPS = extensions.EntityProp.createMany([
        {
            type: "string" /* String */,
            name: 'name',
            displayName: 'AbpIdentity::RoleName',
            sortable: true,
            valueResolver: ɵ0$6,
        },
    ]);

    var ɵ0$5 = function (data) { return data.record && data.record.isStatic; }, ɵ1$3 = function () { return [forms.Validators.required]; };
    var DEFAULT_ROLES_CREATE_FORM_PROPS = extensions.FormProp.createMany([
        {
            type: "string" /* String */,
            name: 'name',
            displayName: 'AbpIdentity::RoleName',
            id: 'role-name',
            disabled: ɵ0$5,
            validators: ɵ1$3,
        },
        {
            type: "boolean" /* Boolean */,
            name: 'isDefault',
            displayName: 'AbpIdentity::DisplayName:IsDefault',
            id: 'role-is-default',
            defaultValue: false,
        },
        {
            type: "boolean" /* Boolean */,
            name: 'isPublic',
            displayName: 'AbpIdentity::DisplayName:IsPublic',
            id: 'role-is-public',
            defaultValue: false,
        },
    ]);
    var DEFAULT_ROLES_EDIT_FORM_PROPS = DEFAULT_ROLES_CREATE_FORM_PROPS;

    var ɵ0$4 = function (data) {
        var component = data.getInjected(RolesComponent);
        component.add();
    };
    var DEFAULT_ROLES_TOOLBAR_ACTIONS = extensions.ToolbarAction.createMany([
        {
            text: 'AbpIdentity::NewRole',
            action: ɵ0$4,
            permission: 'AbpIdentity.Roles.Create',
            icon: 'fa fa-plus',
        },
    ]);

    var ɵ0$3 = function (data) {
        var component = data.getInjected(UsersComponent);
        component.edit(data.record.id);
    }, ɵ1$2 = function (data) {
        var component = data.getInjected(UsersComponent);
        component.openPermissionsModal(data.record.id);
    }, ɵ2$1 = function (data) {
        var component = data.getInjected(UsersComponent);
        component.delete(data.record.id, data.record.name || data.record.userName);
    };
    var DEFAULT_USERS_ENTITY_ACTIONS = extensions.EntityAction.createMany([
        {
            text: 'AbpIdentity::Edit',
            action: ɵ0$3,
            permission: 'AbpIdentity.Users.Update',
        },
        {
            text: 'AbpIdentity::Permissions',
            action: ɵ1$2,
            permission: 'AbpIdentity.Users.ManagePermissions',
        },
        {
            text: 'AbpIdentity::Delete',
            action: ɵ2$1,
            permission: 'AbpIdentity.Users.Delete',
        },
    ]);

    var DEFAULT_USERS_ENTITY_PROPS = extensions.EntityProp.createMany([
        {
            type: "string" /* String */,
            name: 'userName',
            displayName: 'AbpIdentity::UserName',
            sortable: true,
            columnWidth: 250,
        },
        {
            type: "string" /* String */,
            name: 'email',
            displayName: 'AbpIdentity::EmailAddress',
            sortable: true,
            columnWidth: 250,
        },
        {
            type: "string" /* String */,
            name: 'phoneNumber',
            displayName: 'AbpIdentity::PhoneNumber',
            sortable: true,
            columnWidth: 250,
        },
    ]);

    var ɵ0$2 = function () { return [forms.Validators.required, forms.Validators.maxLength(256)]; }, ɵ1$1 = function (data) { return __spread([forms.Validators.required], ng_theme_shared.getPasswordValidators({ get: data.getInjected })); }, ɵ2 = function () { return [forms.Validators.maxLength(64)]; }, ɵ3 = function () { return [forms.Validators.maxLength(64)]; }, ɵ4 = function () { return [forms.Validators.required, forms.Validators.maxLength(256), forms.Validators.email]; }, ɵ5 = function () { return [forms.Validators.maxLength(16)]; };
    var DEFAULT_USERS_CREATE_FORM_PROPS = extensions.FormProp.createMany([
        {
            type: "string" /* String */,
            name: 'userName',
            displayName: 'AbpIdentity::UserName',
            id: 'user-name',
            validators: ɵ0$2,
        },
        {
            type: "password" /* Password */,
            name: 'password',
            displayName: 'AbpIdentity::Password',
            id: 'password',
            autocomplete: 'new-password',
            validators: ɵ1$1,
        },
        {
            type: "string" /* String */,
            name: 'name',
            displayName: 'AbpIdentity::DisplayName:Name',
            id: 'name',
            validators: ɵ2,
        },
        {
            type: "string" /* String */,
            name: 'surname',
            displayName: 'AbpIdentity::DisplayName:Surname',
            id: 'surname',
            validators: ɵ3,
        },
        {
            type: "email" /* Email */,
            name: 'email',
            displayName: 'AbpIdentity::EmailAddress',
            id: 'email',
            validators: ɵ4,
        },
        {
            type: "string" /* String */,
            name: 'phoneNumber',
            displayName: 'AbpIdentity::PhoneNumber',
            id: 'phone-number',
            validators: ɵ5,
        },
        {
            type: "boolean" /* Boolean */,
            name: 'lockoutEnabled',
            displayName: 'AbpIdentity::DisplayName:LockoutEnabled',
            id: 'lockout-checkbox',
            defaultValue: true,
        },
    ]);
    var ɵ6 = function (prop) { return prop.name !== 'password'; };
    var DEFAULT_USERS_EDIT_FORM_PROPS = DEFAULT_USERS_CREATE_FORM_PROPS.filter(ɵ6);

    var ɵ0$1 = function (data) {
        var component = data.getInjected(UsersComponent);
        component.add();
    };
    var DEFAULT_USERS_TOOLBAR_ACTIONS = extensions.ToolbarAction.createMany([
        {
            text: 'AbpIdentity::NewUser',
            action: ɵ0$1,
            permission: 'AbpIdentity.Users.Create',
            icon: 'fa fa-plus',
        },
    ]);

    var _a, _b, _c, _d, _e;
    var DEFAULT_IDENTITY_ENTITY_ACTIONS = (_a = {},
        _a["Identity.RolesComponent" /* Roles */] = DEFAULT_ROLES_ENTITY_ACTIONS,
        _a["Identity.UsersComponent" /* Users */] = DEFAULT_USERS_ENTITY_ACTIONS,
        _a);
    var DEFAULT_IDENTITY_TOOLBAR_ACTIONS = (_b = {},
        _b["Identity.RolesComponent" /* Roles */] = DEFAULT_ROLES_TOOLBAR_ACTIONS,
        _b["Identity.UsersComponent" /* Users */] = DEFAULT_USERS_TOOLBAR_ACTIONS,
        _b);
    var DEFAULT_IDENTITY_ENTITY_PROPS = (_c = {},
        _c["Identity.RolesComponent" /* Roles */] = DEFAULT_ROLES_ENTITY_PROPS,
        _c["Identity.UsersComponent" /* Users */] = DEFAULT_USERS_ENTITY_PROPS,
        _c);
    var DEFAULT_IDENTITY_CREATE_FORM_PROPS = (_d = {},
        _d["Identity.RolesComponent" /* Roles */] = DEFAULT_ROLES_CREATE_FORM_PROPS,
        _d["Identity.UsersComponent" /* Users */] = DEFAULT_USERS_CREATE_FORM_PROPS,
        _d);
    var DEFAULT_IDENTITY_EDIT_FORM_PROPS = (_e = {},
        _e["Identity.RolesComponent" /* Roles */] = DEFAULT_ROLES_EDIT_FORM_PROPS,
        _e["Identity.UsersComponent" /* Users */] = DEFAULT_USERS_EDIT_FORM_PROPS,
        _e);
    var IDENTITY_ENTITY_ACTION_CONTRIBUTORS = new i0.InjectionToken('IDENTITY_ENTITY_ACTION_CONTRIBUTORS');
    var IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS = new i0.InjectionToken('IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS');
    var IDENTITY_ENTITY_PROP_CONTRIBUTORS = new i0.InjectionToken('IDENTITY_ENTITY_PROP_CONTRIBUTORS');
    var IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS = new i0.InjectionToken('IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS');
    var IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS = new i0.InjectionToken('IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS');

    var IdentityExtensionsGuard = /** @class */ (function () {
        function IdentityExtensionsGuard(injector) {
            this.injector = injector;
        }
        IdentityExtensionsGuard.prototype.canActivate = function () {
            var extensions$1 = this.injector.get(extensions.ExtensionsService);
            var actionContributors = this.injector.get(IDENTITY_ENTITY_ACTION_CONTRIBUTORS, null) || {};
            var toolbarContributors = this.injector.get(IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};
            var propContributors = this.injector.get(IDENTITY_ENTITY_PROP_CONTRIBUTORS, null) || {};
            var createFormContributors = this.injector.get(IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};
            var editFormContributors = this.injector.get(IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};
            var configState = this.injector.get(i1.ConfigStateService);
            return extensions.getObjectExtensionEntitiesFromStore(configState, 'Identity').pipe(operators.map(function (entities) {
                var _a;
                return (_a = {},
                    _a["Identity.RolesComponent" /* Roles */] = entities.Role,
                    _a["Identity.UsersComponent" /* Users */] = entities.User,
                    _a);
            }), extensions.mapEntitiesToContributors(configState, 'AbpIdentity'), operators.tap(function (objectExtensionContributors) {
                extensions.mergeWithDefaultActions(extensions$1.entityActions, DEFAULT_IDENTITY_ENTITY_ACTIONS, actionContributors);
                extensions.mergeWithDefaultActions(extensions$1.toolbarActions, DEFAULT_IDENTITY_TOOLBAR_ACTIONS, toolbarContributors);
                extensions.mergeWithDefaultProps(extensions$1.entityProps, DEFAULT_IDENTITY_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
                extensions.mergeWithDefaultProps(extensions$1.createFormProps, DEFAULT_IDENTITY_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);
                extensions.mergeWithDefaultProps(extensions$1.editFormProps, DEFAULT_IDENTITY_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);
            }), operators.mapTo(true));
        };
        return IdentityExtensionsGuard;
    }());
    IdentityExtensionsGuard.decorators = [
        { type: i0.Injectable }
    ];
    IdentityExtensionsGuard.ctorParameters = function () { return [
        { type: i0.Injector }
    ]; };

    var ɵ0 = {
        requiredPolicy: 'AbpIdentity.Roles',
        replaceableComponent: {
            key: "Identity.RolesComponent" /* Roles */,
            defaultComponent: RolesComponent,
        },
    }, ɵ1 = {
        requiredPolicy: 'AbpIdentity.Users',
        replaceableComponent: {
            key: "Identity.UsersComponent" /* Users */,
            defaultComponent: UsersComponent,
        },
    };
    var routes = [
        { path: '', redirectTo: 'roles', pathMatch: 'full' },
        {
            path: '',
            component: i1.DynamicLayoutComponent,
            canActivate: [i1.AuthGuard, i1.PermissionGuard, IdentityExtensionsGuard],
            children: [
                {
                    path: 'roles',
                    component: i1.ReplaceableRouteContainerComponent,
                    data: ɵ0,
                },
                {
                    path: 'users',
                    component: i1.ReplaceableRouteContainerComponent,
                    data: ɵ1,
                },
            ],
        },
    ];
    var IdentityRoutingModule = /** @class */ (function () {
        function IdentityRoutingModule() {
        }
        return IdentityRoutingModule;
    }());
    IdentityRoutingModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [router.RouterModule.forChild(routes)],
                    exports: [router.RouterModule],
                },] }
    ];

    var IdentityModule = /** @class */ (function () {
        function IdentityModule() {
        }
        IdentityModule.forChild = function (options) {
            if (options === void 0) { options = {}; }
            return {
                ngModule: IdentityModule,
                providers: [
                    {
                        provide: IDENTITY_ENTITY_ACTION_CONTRIBUTORS,
                        useValue: options.entityActionContributors,
                    },
                    {
                        provide: IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS,
                        useValue: options.toolbarActionContributors,
                    },
                    {
                        provide: IDENTITY_ENTITY_PROP_CONTRIBUTORS,
                        useValue: options.entityPropContributors,
                    },
                    {
                        provide: IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS,
                        useValue: options.createFormPropContributors,
                    },
                    {
                        provide: IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS,
                        useValue: options.editFormPropContributors,
                    },
                    IdentityExtensionsGuard,
                ],
            };
        };
        IdentityModule.forLazy = function (options) {
            if (options === void 0) { options = {}; }
            return new i1.LazyModuleFactory(IdentityModule.forChild(options));
        };
        return IdentityModule;
    }());
    IdentityModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [RolesComponent, UsersComponent],
                    exports: [RolesComponent, UsersComponent],
                    imports: [
                        i1$1.NgxsModule.forFeature([exports.ɵc]),
                        i1.CoreModule,
                        IdentityRoutingModule,
                        ngBootstrap.NgbNavModule,
                        ng_theme_shared.ThemeSharedModule,
                        extensions.UiExtensionsModule,
                        ngBootstrap.NgbDropdownModule,
                        ng_permissionManagement.PermissionManagementModule,
                        core.NgxValidateCoreModule,
                    ],
                },] }
    ];

    var IdentityUserLookupService = /** @class */ (function () {
        function IdentityUserLookupService(restService) {
            var _this = this;
            this.restService = restService;
            this.apiName = 'AbpIdentity';
            this.findById = function (id) { return _this.restService.request({
                method: 'GET',
                url: "/api/identity/users/lookup/" + id,
            }, { apiName: _this.apiName }); };
            this.findByUserName = function (userName) { return _this.restService.request({
                method: 'GET',
                url: "/api/identity/users/lookup/by-username/" + userName,
            }, { apiName: _this.apiName }); };
            this.getCount = function (input) { return _this.restService.request({
                method: 'GET',
                url: '/api/identity/users/lookup/count',
                params: { filter: input.filter },
            }, { apiName: _this.apiName }); };
            this.search = function (input) { return _this.restService.request({
                method: 'GET',
                url: '/api/identity/users/lookup/search',
                params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
            }, { apiName: _this.apiName }); };
        }
        return IdentityUserLookupService;
    }());
    IdentityUserLookupService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function IdentityUserLookupService_Factory() { return new IdentityUserLookupService(i0__namespace.ɵɵinject(i1__namespace.RestService)); }, token: IdentityUserLookupService, providedIn: "root" });
    IdentityUserLookupService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    IdentityUserLookupService.ctorParameters = function () { return [
        { type: i1.RestService }
    ]; };

    var ProfileService = /** @class */ (function () {
        function ProfileService(restService) {
            var _this = this;
            this.restService = restService;
            this.apiName = 'AbpIdentity';
            this.changePassword = function (input) { return _this.restService.request({
                method: 'POST',
                url: '/api/identity/my-profile/change-password',
                body: input,
            }, { apiName: _this.apiName }); };
            this.get = function () { return _this.restService.request({
                method: 'GET',
                url: '/api/identity/my-profile',
            }, { apiName: _this.apiName }); };
            this.update = function (input) { return _this.restService.request({
                method: 'PUT',
                url: '/api/identity/my-profile',
                body: input,
            }, { apiName: _this.apiName }); };
        }
        return ProfileService;
    }());
    ProfileService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ProfileService_Factory() { return new ProfileService(i0__namespace.ɵɵinject(i1__namespace.RestService)); }, token: ProfileService, providedIn: "root" });
    ProfileService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ProfileService.ctorParameters = function () { return [
        { type: i1.RestService }
    ]; };

    var IdentityStateService = /** @class */ (function () {
        function IdentityStateService(store) {
            this.store = store;
        }
        IdentityStateService.prototype.getRoles = function () {
            return this.store.selectSnapshot(exports.ɵc.getRoles);
        };
        IdentityStateService.prototype.getRolesTotalCount = function () {
            return this.store.selectSnapshot(exports.ɵc.getRolesTotalCount);
        };
        IdentityStateService.prototype.getUsers = function () {
            return this.store.selectSnapshot(exports.ɵc.getUsers);
        };
        IdentityStateService.prototype.getUsersTotalCount = function () {
            return this.store.selectSnapshot(exports.ɵc.getUsersTotalCount);
        };
        IdentityStateService.prototype.dispatchGetRoles = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (GetRoles.bind.apply(GetRoles, __spread([void 0], args)))());
        };
        IdentityStateService.prototype.dispatchGetRoleById = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (GetRoleById.bind.apply(GetRoleById, __spread([void 0], args)))());
        };
        IdentityStateService.prototype.dispatchDeleteRole = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (DeleteRole.bind.apply(DeleteRole, __spread([void 0], args)))());
        };
        IdentityStateService.prototype.dispatchCreateRole = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (CreateRole.bind.apply(CreateRole, __spread([void 0], args)))());
        };
        IdentityStateService.prototype.dispatchUpdateRole = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (UpdateRole.bind.apply(UpdateRole, __spread([void 0], args)))());
        };
        IdentityStateService.prototype.dispatchGetUsers = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (GetUsers.bind.apply(GetUsers, __spread([void 0], args)))());
        };
        IdentityStateService.prototype.dispatchGetUserById = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (GetUserById.bind.apply(GetUserById, __spread([void 0], args)))());
        };
        IdentityStateService.prototype.dispatchDeleteUser = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (DeleteUser.bind.apply(DeleteUser, __spread([void 0], args)))());
        };
        IdentityStateService.prototype.dispatchCreateUser = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (CreateUser.bind.apply(CreateUser, __spread([void 0], args)))());
        };
        IdentityStateService.prototype.dispatchUpdateUser = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (UpdateUser.bind.apply(UpdateUser, __spread([void 0], args)))());
        };
        IdentityStateService.prototype.dispatchGetUserRoles = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (GetUserRoles.bind.apply(GetUserRoles, __spread([void 0], args)))());
        };
        return IdentityStateService;
    }());
    IdentityStateService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function IdentityStateService_Factory() { return new IdentityStateService(i0__namespace.ɵɵinject(i1__namespace$1.Store)); }, token: IdentityStateService, providedIn: "root" });
    IdentityStateService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    IdentityStateService.ctorParameters = function () { return [
        { type: i1$1.Store }
    ]; };

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CreateRole = CreateRole;
    exports.CreateUser = CreateUser;
    exports.DEFAULT_IDENTITY_CREATE_FORM_PROPS = DEFAULT_IDENTITY_CREATE_FORM_PROPS;
    exports.DEFAULT_IDENTITY_EDIT_FORM_PROPS = DEFAULT_IDENTITY_EDIT_FORM_PROPS;
    exports.DEFAULT_IDENTITY_ENTITY_ACTIONS = DEFAULT_IDENTITY_ENTITY_ACTIONS;
    exports.DEFAULT_IDENTITY_ENTITY_PROPS = DEFAULT_IDENTITY_ENTITY_PROPS;
    exports.DEFAULT_IDENTITY_TOOLBAR_ACTIONS = DEFAULT_IDENTITY_TOOLBAR_ACTIONS;
    exports.DeleteRole = DeleteRole;
    exports.DeleteUser = DeleteUser;
    exports.GetRoleById = GetRoleById;
    exports.GetRoles = GetRoles;
    exports.GetUserById = GetUserById;
    exports.GetUserRoles = GetUserRoles;
    exports.GetUsers = GetUsers;
    exports.IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS = IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS;
    exports.IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS = IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS;
    exports.IDENTITY_ENTITY_ACTION_CONTRIBUTORS = IDENTITY_ENTITY_ACTION_CONTRIBUTORS;
    exports.IDENTITY_ENTITY_PROP_CONTRIBUTORS = IDENTITY_ENTITY_PROP_CONTRIBUTORS;
    exports.IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS = IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS;
    exports.IdentityExtensionsGuard = IdentityExtensionsGuard;
    exports.IdentityModule = IdentityModule;
    exports.IdentityRoleService = IdentityRoleService;
    exports.IdentityState = exports.ɵc;
    exports.IdentityStateService = IdentityStateService;
    exports.IdentityUserLookupService = IdentityUserLookupService;
    exports.IdentityUserService = IdentityUserService;
    exports.ProfileService = ProfileService;
    exports.RolesComponent = RolesComponent;
    exports.UpdateRole = UpdateRole;
    exports.UpdateUser = UpdateUser;
    exports.UsersComponent = UsersComponent;
    exports.ɵa = RolesComponent;
    exports.ɵba = IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS;
    exports.ɵd = IdentityUserService;
    exports.ɵe = IdentityRoleService;
    exports.ɵf = GetRoles;
    exports.ɵg = GetRoleById;
    exports.ɵh = DeleteRole;
    exports.ɵi = CreateRole;
    exports.ɵj = UpdateRole;
    exports.ɵk = GetUsers;
    exports.ɵl = GetUserById;
    exports.ɵm = DeleteUser;
    exports.ɵn = CreateUser;
    exports.ɵo = UpdateUser;
    exports.ɵp = GetUserRoles;
    exports.ɵt = UsersComponent;
    exports.ɵu = IdentityRoutingModule;
    exports.ɵv = IdentityExtensionsGuard;
    exports.ɵw = IDENTITY_ENTITY_ACTION_CONTRIBUTORS;
    exports.ɵx = IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS;
    exports.ɵy = IDENTITY_ENTITY_PROP_CONTRIBUTORS;
    exports.ɵz = IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=abp-ng.identity.umd.js.map
