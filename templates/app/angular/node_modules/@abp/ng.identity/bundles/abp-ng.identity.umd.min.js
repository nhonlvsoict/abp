!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@abp/ng.theme.shared/extensions"),require("@angular/core"),require("@ngxs/store"),require("rxjs/operators"),require("@angular/forms"),require("snq"),require("rxjs"),require("@abp/ng.permission-management"),require("@ng-bootstrap/ng-bootstrap"),require("@ngx-validate/core"),require("@angular/router")):"function"==typeof define&&define.amd?define("@abp/ng.identity",["exports","@abp/ng.core","@abp/ng.theme.shared","@abp/ng.theme.shared/extensions","@angular/core","@ngxs/store","rxjs/operators","@angular/forms","snq","rxjs","@abp/ng.permission-management","@ng-bootstrap/ng-bootstrap","@ngx-validate/core","@angular/router"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng.identity={}),e.i1,e.ng_theme_shared,e.extensions,e.ng.core,e.i1$1,e.rxjs.operators,e.ng.forms,e.snq,e.rxjs,e.ng_permissionManagement,e.ngBootstrap,e.core,e.ng.router)}(this,(function(e,t,n,i,r,o,a,s,p,l,c,d,u,m){"use strict";function y(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function b(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var i=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,i.get?i:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var f=b(t),h=b(r),v=b(o),g=y(p),I=function(e){this.payload=e};I.type="[Identity] Get Roles";var R=function(e){this.payload=e};R.type="[Identity] Get Role By Id";var N=function(e){this.payload=e};N.type="[Identity] Delete Role";var T=function(e){this.payload=e};T.type="[Identity] Create Role";var S=function(e){this.payload=e};S.type="[Identity] Update Role";var C=function(e){this.payload=e};C.type="[Identity] Get Users";var U=function(e){this.payload=e};U.type="[Identity] Get User By Id";var A=function(e){this.payload=e};A.type="[Identity] Delete User";var P=function(e){this.payload=e};P.type="[Identity] Create User";var O=function(e){this.payload=e};O.type="[Identity] Update User";var j=function(e){this.payload=e};j.type="[Identity] Get User Roles";function E(e,t,n,i){var r,o=arguments.length,a=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,i);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(a=(o<3?r(a):o>3?r(t,n,a):r(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}Object.create;function M(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var i,r,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)a.push(i.value)}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return a}function w(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(M(arguments[t]));return e}Object.create;var D=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.create=function(e){return t.restService.request({method:"POST",url:"/api/identity/roles",body:e},{apiName:t.apiName})},this.delete=function(e){return t.restService.request({method:"DELETE",url:"/api/identity/roles/"+e},{apiName:t.apiName})},this.get=function(e){return t.restService.request({method:"GET",url:"/api/identity/roles/"+e},{apiName:t.apiName})},this.getAllList=function(){return t.restService.request({method:"GET",url:"/api/identity/roles/all"},{apiName:t.apiName})},this.getList=function(e){return t.restService.request({method:"GET",url:"/api/identity/roles",params:{sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.update=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/roles/"+e,body:n},{apiName:t.apiName})}};D.ɵprov=h.ɵɵdefineInjectable({factory:function(){return new D(h.ɵɵinject(f.RestService))},token:D,providedIn:"root"}),D.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],D.ctorParameters=function(){return[{type:t.RestService}]};var x=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.create=function(e){return t.restService.request({method:"POST",url:"/api/identity/users",body:e},{apiName:t.apiName})},this.delete=function(e){return t.restService.request({method:"DELETE",url:"/api/identity/users/"+e},{apiName:t.apiName})},this.findByEmail=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/by-email/"+e},{apiName:t.apiName})},this.findByUsername=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/by-username/{userName}"},{apiName:t.apiName})},this.get=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/"+e},{apiName:t.apiName})},this.getAssignableRoles=function(){return t.restService.request({method:"GET",url:"/api/identity/users/assignable-roles"},{apiName:t.apiName})},this.getList=function(e){return t.restService.request({method:"GET",url:"/api/identity/users",params:{filter:e.filter,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.getRoles=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/"+e+"/roles"},{apiName:t.apiName})},this.update=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/users/"+e,body:n},{apiName:t.apiName})},this.updateRoles=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/users/"+e+"/roles",body:n},{apiName:t.apiName})}};x.ɵprov=h.ɵɵdefineInjectable({factory:function(){return new x(h.ɵɵinject(f.RestService))},token:x,providedIn:"root"}),x.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],x.ctorParameters=function(){return[{type:t.RestService}]},e.ɵc=function(){function e(e,t){this.identityUserService=e,this.identityRoleService=t}return e.getRoles=function(e){return e.roles.items||[]},e.getRolesTotalCount=function(e){return e.roles.totalCount||0},e.getUsers=function(e){return e.users.items||[]},e.getUsersTotalCount=function(e){return e.users.totalCount||0},e.prototype.getRoles=function(e,t){var n=e.patchState,i=t.payload;return this.identityRoleService.getList(i).pipe(a.tap((function(e){return n({roles:e})})))},e.prototype.getRole=function(e,t){var n=e.patchState,i=t.payload;return this.identityRoleService.get(i).pipe(a.tap((function(e){return n({selectedRole:e})})))},e.prototype.deleteRole=function(e,t){var n=t.payload;return this.identityRoleService.delete(n)},e.prototype.addRole=function(e,t){var n=t.payload;return this.identityRoleService.create(n)},e.prototype.updateRole=function(e,t){var n=e.getState,i=t.payload;return this.identityRoleService.update(i.id,Object.assign(Object.assign({},n().selectedRole),i))},e.prototype.getUsers=function(e,t){var n=e.patchState,i=t.payload;return this.identityUserService.getList(i).pipe(a.tap((function(e){return n({users:e})})))},e.prototype.getUser=function(e,t){var n=e.patchState,i=t.payload;return this.identityUserService.get(i).pipe(a.tap((function(e){return n({selectedUser:e})})))},e.prototype.deleteUser=function(e,t){var n=t.payload;return this.identityUserService.delete(n)},e.prototype.addUser=function(e,t){var n=t.payload;return this.identityUserService.create(n)},e.prototype.updateUser=function(e,t){var n=e.getState,i=t.payload;return this.identityUserService.update(i.id,Object.assign(Object.assign({},n().selectedUser),i))},e.prototype.getUserRoles=function(e,t){var n=e.patchState,i=t.payload;return this.identityUserService.getRoles(i).pipe(a.pluck("items"),a.tap((function(e){return n({selectedUserRoles:e})})))},e}(),e.ɵc.decorators=[{type:r.Injectable}],e.ɵc.ctorParameters=function(){return[{type:x},{type:D}]},E([o.Action(I)],e.ɵc.prototype,"getRoles",null),E([o.Action(R)],e.ɵc.prototype,"getRole",null),E([o.Action(N)],e.ɵc.prototype,"deleteRole",null),E([o.Action(T)],e.ɵc.prototype,"addRole",null),E([o.Action(S)],e.ɵc.prototype,"updateRole",null),E([o.Action(C)],e.ɵc.prototype,"getUsers",null),E([o.Action(U)],e.ɵc.prototype,"getUser",null),E([o.Action(A)],e.ɵc.prototype,"deleteUser",null),E([o.Action(P)],e.ɵc.prototype,"addUser",null),E([o.Action(O)],e.ɵc.prototype,"updateUser",null),E([o.Action(j)],e.ɵc.prototype,"getUserRoles",null),E([o.Selector()],e.ɵc,"getRoles",null),E([o.Selector()],e.ɵc,"getRolesTotalCount",null),E([o.Selector()],e.ɵc,"getUsers",null),E([o.Selector()],e.ɵc,"getUsersTotalCount",null),e.ɵc=E([o.State({name:"IdentityState",defaults:{roles:{},selectedRole:{},users:{},selectedUser:{}}})],e.ɵc);var _=function(){function e(e,t,n,i){var r=this;this.list=e,this.confirmationService=t,this.store=n,this.injector=i,this.visiblePermissions=!1,this.modalBusy=!1,this.permissionManagementKey="PermissionManagement.PermissionManagementComponent",this.onVisiblePermissionChange=function(e){r.visiblePermissions=e}}return e.prototype.ngOnInit=function(){this.hookToQuery()},e.prototype.buildForm=function(){var e=new i.FormPropData(this.injector,this.selected);this.form=i.generateFormFromProps(e)},e.prototype.openModal=function(){this.buildForm(),this.isModalVisible=!0},e.prototype.add=function(){this.selected={},this.openModal()},e.prototype.edit=function(e){var t=this;this.store.dispatch(new R(e)).pipe(a.pluck("IdentityState","selectedRole")).subscribe((function(e){t.selected=e,t.openModal()}))},e.prototype.save=function(){var e=this;this.form.valid&&(this.modalBusy=!0,this.store.dispatch(this.selected.id?new S(Object.assign(Object.assign(Object.assign({},this.selected),this.form.value),{id:this.selected.id})):new T(this.form.value)).pipe(a.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){e.isModalVisible=!1,e.list.get()})))},e.prototype.delete=function(e,t){var i=this;this.confirmationService.warn("AbpIdentity::RoleDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[t]}).subscribe((function(t){t===n.Confirmation.Status.confirm&&i.store.dispatch(new N(e)).subscribe((function(){return i.list.get()}))}))},e.prototype.hookToQuery=function(){var e=this;this.list.hookToQuery((function(t){return e.store.dispatch(new I(t))})).subscribe()},e.prototype.openPermissionsModal=function(e){var t=this;this.providerKey=e,setTimeout((function(){t.visiblePermissions=!0}),0)},e.prototype.sort=function(e){var t=e.sorts[0],n=t.prop,i=t.dir;this.list.sortKey=n,this.list.sortOrder=i},e}();_.decorators=[{type:r.Component,args:[{selector:"abp-roles",template:'<div id="identity-roles-wrapper" class="card">\n  <div class="card-header">\n    <div class="row">\n      <div class="col col-md-6">\n        <h5 class="card-title">{{ \'AbpIdentity::Roles\' | abpLocalization }}</h5>\n      </div>\n      <div class="text-right col col-md-6">\n        <abp-page-toolbar [record]="data$ | async"></abp-page-toolbar>\n      </div>\n    </div>\n  </div>\n\n  <div class="card-body">\n    <abp-extensible-table\n      [data]="data$ | async"\n      [recordsTotal]="totalCount$ | async"\n      [list]="list"\n    ></abp-extensible-table>\n  </div>\n</div>\n\n<abp-modal size="md" [(visible)]="isModalVisible" [busy]="modalBusy">\n  <ng-template #abpHeader>\n    <h3>{{ (selected?.id ? \'AbpIdentity::Edit\' : \'AbpIdentity::NewRole\') | abpLocalization }}</h3>\n  </ng-template>\n\n  <ng-template #abpBody>\n    <form [formGroup]="form" (ngSubmit)="save()" validateOnSubmit>\n      <abp-extensible-form [selectedRecord]="selected"></abp-extensible-form>\n    </form>\n  </ng-template>\n\n  <ng-template #abpFooter>\n    <button type="button" class="btn btn-secondary" abpClose>\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\n    </button>\n    <abp-button iconClass="fa fa-check" [disabled]="form?.invalid" (click)="save()">{{\n      \'AbpIdentity::Save\' | abpLocalization\n    }}</abp-button>\n  </ng-template>\n</abp-modal>\n\n<abp-permission-management\n  #abpPermissionManagement="abpPermissionManagement"\n  *abpReplaceableTemplate="\n    {\n      inputs: {\n        providerName: { value: \'R\' },\n        providerKey: { value: providerKey },\n        visible: { value: visiblePermissions, twoWay: true },\n        hideBadges: { value: true }\n      },\n      outputs: { visibleChange: onVisiblePermissionChange },\n      componentKey: permissionManagementKey\n    };\n    let init = initTemplate\n  "\n  (abpInit)="init(abpPermissionManagement)"\n>\n</abp-permission-management>\n',providers:[t.ListService,{provide:i.EXTENSIONS_IDENTIFIER,useValue:"Identity.RolesComponent"}]}]}],_.ctorParameters=function(){return[{type:t.ListService},{type:n.ConfirmationService},{type:o.Store},{type:r.Injector}]},E([o.Select(e.ɵc.getRoles)],_.prototype,"data$",void 0),E([o.Select(e.ɵc.getRolesTotalCount)],_.prototype,"totalCount$",void 0);var k=function(){function e(e,t,n,i,r,o){var a=this;this.list=e,this.confirmationService=t,this.userService=n,this.fb=i,this.store=r,this.injector=o,this.visiblePermissions=!1,this.modalBusy=!1,this.permissionManagementKey="PermissionManagement.PermissionManagementComponent",this.trackByFn=function(e,t){return Object.keys(t)[0]||e},this.onVisiblePermissionChange=function(e){a.visiblePermissions=e}}return Object.defineProperty(e.prototype,"roleGroups",{get:function(){var e=this;return g.default((function(){return e.form.get("roleNames").controls}),[])},enumerable:!1,configurable:!0}),e.prototype.ngOnInit=function(){this.hookToQuery()},e.prototype.buildForm=function(){var e=this,t=new i.FormPropData(this.injector,this.selected);this.form=i.generateFormFromProps(t),this.userService.getAssignableRoles().subscribe((function(t){var n=t.items;e.roles=n,e.form.addControl("roleNames",e.fb.array(e.roles.map((function(t){var n;return e.fb.group(((n={})[t.name]=[e.selected.id?!!g.default((function(){return e.selectedUserRoles.find((function(e){return e.id===t.id}))})):t.isDefault],n))}))))}))},e.prototype.openModal=function(){this.buildForm(),this.isModalVisible=!0},e.prototype.add=function(){this.selected={},this.selectedUserRoles=[],this.openModal()},e.prototype.edit=function(e){var t=this;this.store.dispatch(new U(e)).pipe(a.switchMap((function(){return t.store.dispatch(new j(e))})),a.pluck("IdentityState"),a.take(1)).subscribe((function(e){t.selected=e.selectedUser,t.selectedUserRoles=e.selectedUserRoles||[],t.openModal()}))},e.prototype.save=function(){var e=this;if(this.form.valid&&!this.modalBusy){this.modalBusy=!0;var t=this.form.value.roleNames,n=g.default((function(){return t.filter((function(e){return!!e[Object.keys(e)[0]]})).map((function(e){return Object.keys(e)[0]}))}),[]);this.store.dispatch(this.selected.id?new O(Object.assign(Object.assign(Object.assign({},this.selected),this.form.value),{id:this.selected.id,roleNames:n})):new P(Object.assign(Object.assign({},this.form.value),{roleNames:n}))).pipe(a.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){e.isModalVisible=!1,e.list.get()}))}},e.prototype.delete=function(e,t){var i=this;this.confirmationService.warn("AbpIdentity::UserDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[t]}).subscribe((function(t){t===n.Confirmation.Status.confirm&&i.store.dispatch(new A(e)).subscribe((function(){return i.list.get()}))}))},e.prototype.sort=function(e){var t=e.sorts[0],n=t.prop,i=t.dir;this.list.sortKey=n,this.list.sortOrder=i},e.prototype.hookToQuery=function(){var e=this;this.list.hookToQuery((function(t){return e.store.dispatch(new C(t))})).subscribe()},e.prototype.openPermissionsModal=function(e){var t=this;this.providerKey=e,setTimeout((function(){t.visiblePermissions=!0}),0)},e}();k.decorators=[{type:r.Component,args:[{selector:"abp-users",template:'<div id="identity-roles-wrapper" class="card">\n  <div class="card-header">\n    <div class="row">\n      <div class="col col-md-6">\n        <h5 class="card-title">{{ \'AbpIdentity::Users\' | abpLocalization }}</h5>\n      </div>\n      <div class="text-right col col-md-6">\n        <abp-page-toolbar [record]="data$ | async"></abp-page-toolbar>\n      </div>\n    </div>\n  </div>\n  <div class="card-body">\n    <div id="data-tables-table-filter" class="data-tables-filter">\n      <div class="input-group">\n        <input\n          type="search"\n          class="form-control"\n          [placeholder]="\'AbpUi::PagerSearch\' | abpLocalization"\n          [(ngModel)]="list.filter"\n        />\n      </div>\n    </div>\n\n    <abp-extensible-table\n      [data]="data$ | async"\n      [recordsTotal]="totalCount$ | async"\n      [list]="list"\n    ></abp-extensible-table>\n  </div>\n</div>\n\n<abp-modal size="md" [(visible)]="isModalVisible" [busy]="modalBusy">\n  <ng-template #abpHeader>\n    <h3>{{ (selected?.id ? \'AbpIdentity::Edit\' : \'AbpIdentity::NewUser\') | abpLocalization }}</h3>\n  </ng-template>\n\n  <ng-template #abpBody>\n    <ng-template #loaderRef\n      ><div class="text-center"><i class="fa fa-pulse fa-spinner"></i></div\n    ></ng-template>\n\n    <form *ngIf="form; else loaderRef" [formGroup]="form" (ngSubmit)="save()">\n      <ul ngbNav #nav="ngbNav" class="nav-tabs">\n        <li ngbNavItem>\n          <a ngbNavLink>{{ \'AbpIdentity::UserInformations\' | abpLocalization }}</a>\n          <ng-template ngbNavContent>\n            <abp-extensible-form [selectedRecord]="selected"></abp-extensible-form>\n          </ng-template>\n        </li>\n\n        <li ngbNavItem>\n          <a ngbNavLink>{{ \'AbpIdentity::Roles\' | abpLocalization }}</a>\n          <ng-template ngbNavContent>\n            <div\n              *ngFor="let roleGroup of roleGroups; let i = index; trackBy: trackByFn"\n              class="custom-checkbox custom-control mb-2"\n            >\n              <input\n                type="checkbox"\n                class="custom-control-input"\n                [attr.id]="\'roles-\' + i"\n                [formControl]="roleGroup.controls[roles[i].name]"\n              />\n              <label class="custom-control-label" [attr.for]="\'roles-\' + i">{{\n                roles[i].name\n              }}</label>\n            </div>\n          </ng-template>\n        </li>\n      </ul>\n\n      <div class="mt-2 fade-in-top" [ngbNavOutlet]="nav"></div>\n    </form>\n  </ng-template>\n\n  <ng-template #abpFooter>\n    <button type="button" class="btn btn-secondary" abpClose>\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\n    </button>\n    <abp-button iconClass="fa fa-check" [disabled]="form?.invalid" (click)="save()">{{\n      \'AbpIdentity::Save\' | abpLocalization\n    }}</abp-button>\n  </ng-template>\n</abp-modal>\n\n<abp-permission-management\n  #abpPermissionManagement="abpPermissionManagement"\n  *abpReplaceableTemplate="\n    {\n      inputs: {\n        providerName: { value: \'U\' },\n        providerKey: { value: providerKey },\n        visible: { value: visiblePermissions, twoWay: true }\n      },\n      outputs: { visibleChange: onVisiblePermissionChange },\n      componentKey: permissionManagementKey\n    };\n    let init = initTemplate\n  "\n  (abpInit)="init(abpPermissionManagement)"\n>\n</abp-permission-management>\n',providers:[t.ListService,{provide:i.EXTENSIONS_IDENTIFIER,useValue:"Identity.UsersComponent"}]}]}],k.ctorParameters=function(){return[{type:t.ListService},{type:n.ConfirmationService},{type:x},{type:s.FormBuilder},{type:o.Store},{type:r.Injector}]},k.propDecorators={modalContent:[{type:r.ViewChild,args:["modalContent",{static:!1}]}]},E([o.Select(e.ɵc.getUsers)],k.prototype,"data$",void 0),E([o.Select(e.ɵc.getUsersTotalCount)],k.prototype,"totalCount$",void 0);var q,L,B,F,G,V=i.EntityAction.createMany([{text:"AbpIdentity::Edit",action:function(e){e.getInjected(_).edit(e.record.id)},permission:"AbpIdentity.Roles.Update"},{text:"AbpIdentity::Permissions",action:function(e){e.getInjected(_).openPermissionsModal(e.record.name)},permission:"AbpIdentity.Roles.ManagePermissions"},{text:"AbpIdentity::Delete",action:function(e){e.getInjected(_).delete(e.record.id,e.record.name)},permission:"AbpIdentity.Roles.Delete",visible:function(e){return!e.record.isStatic}}]),Y=i.EntityProp.createMany([{type:"string",name:"name",displayName:"AbpIdentity::RoleName",sortable:!0,valueResolver:function(e){var n=e.getInjected(t.LocalizationService),i=n.instant.bind(n),r=e.record,o=r.isDefault,a=r.isPublic,s=r.name;return l.of(s+(o?'<span class="badge badge-pill badge-success ml-1">'+i("AbpIdentity::DisplayName:IsDefault")+"</span>":"")+(a?'<span class="badge badge-pill badge-info ml-1">'+i("AbpIdentity::DisplayName:IsPublic")+"</span>":""))}}]),z=i.FormProp.createMany([{type:"string",name:"name",displayName:"AbpIdentity::RoleName",id:"role-name",disabled:function(e){return e.record&&e.record.isStatic},validators:function(){return[s.Validators.required]}},{type:"boolean",name:"isDefault",displayName:"AbpIdentity::DisplayName:IsDefault",id:"role-is-default",defaultValue:!1},{type:"boolean",name:"isPublic",displayName:"AbpIdentity::DisplayName:IsPublic",id:"role-is-public",defaultValue:!1}]),K=z,$=i.ToolbarAction.createMany([{text:"AbpIdentity::NewRole",action:function(e){e.getInjected(_).add()},permission:"AbpIdentity.Roles.Create",icon:"fa fa-plus"}]),W=i.EntityAction.createMany([{text:"AbpIdentity::Edit",action:function(e){e.getInjected(k).edit(e.record.id)},permission:"AbpIdentity.Users.Update"},{text:"AbpIdentity::Permissions",action:function(e){e.getInjected(k).openPermissionsModal(e.record.id)},permission:"AbpIdentity.Users.ManagePermissions"},{text:"AbpIdentity::Delete",action:function(e){e.getInjected(k).delete(e.record.id,e.record.name||e.record.userName)},permission:"AbpIdentity.Users.Delete"}]),Q=i.EntityProp.createMany([{type:"string",name:"userName",displayName:"AbpIdentity::UserName",sortable:!0,columnWidth:250},{type:"string",name:"email",displayName:"AbpIdentity::EmailAddress",sortable:!0,columnWidth:250},{type:"string",name:"phoneNumber",displayName:"AbpIdentity::PhoneNumber",sortable:!0,columnWidth:250}]),H=i.FormProp.createMany([{type:"string",name:"userName",displayName:"AbpIdentity::UserName",id:"user-name",validators:function(){return[s.Validators.required,s.Validators.maxLength(256)]}},{type:"password",name:"password",displayName:"AbpIdentity::Password",id:"password",autocomplete:"new-password",validators:function(e){return w([s.Validators.required],n.getPasswordValidators({get:e.getInjected}))}},{type:"string",name:"name",displayName:"AbpIdentity::DisplayName:Name",id:"name",validators:function(){return[s.Validators.maxLength(64)]}},{type:"string",name:"surname",displayName:"AbpIdentity::DisplayName:Surname",id:"surname",validators:function(){return[s.Validators.maxLength(64)]}},{type:"email",name:"email",displayName:"AbpIdentity::EmailAddress",id:"email",validators:function(){return[s.Validators.required,s.Validators.maxLength(256),s.Validators.email]}},{type:"string",name:"phoneNumber",displayName:"AbpIdentity::PhoneNumber",id:"phone-number",validators:function(){return[s.Validators.maxLength(16)]}},{type:"boolean",name:"lockoutEnabled",displayName:"AbpIdentity::DisplayName:LockoutEnabled",id:"lockout-checkbox",defaultValue:!0}]),X=H.filter((function(e){return"password"!==e.name})),J=i.ToolbarAction.createMany([{text:"AbpIdentity::NewUser",action:function(e){e.getInjected(k).add()},permission:"AbpIdentity.Users.Create",icon:"fa fa-plus"}]),Z=((q={})["Identity.RolesComponent"]=V,q["Identity.UsersComponent"]=W,q),ee=((L={})["Identity.RolesComponent"]=$,L["Identity.UsersComponent"]=J,L),te=((B={})["Identity.RolesComponent"]=Y,B["Identity.UsersComponent"]=Q,B),ne=((F={})["Identity.RolesComponent"]=z,F["Identity.UsersComponent"]=H,F),ie=((G={})["Identity.RolesComponent"]=K,G["Identity.UsersComponent"]=X,G),re=new r.InjectionToken("IDENTITY_ENTITY_ACTION_CONTRIBUTORS"),oe=new r.InjectionToken("IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS"),ae=new r.InjectionToken("IDENTITY_ENTITY_PROP_CONTRIBUTORS"),se=new r.InjectionToken("IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS"),pe=new r.InjectionToken("IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS"),le=function(){function e(e){this.injector=e}return e.prototype.canActivate=function(){var e=this.injector.get(i.ExtensionsService),n=this.injector.get(re,null)||{},r=this.injector.get(oe,null)||{},o=this.injector.get(ae,null)||{},s=this.injector.get(se,null)||{},p=this.injector.get(pe,null)||{},l=this.injector.get(t.ConfigStateService);return i.getObjectExtensionEntitiesFromStore(l,"Identity").pipe(a.map((function(e){var t;return(t={})["Identity.RolesComponent"]=e.Role,t["Identity.UsersComponent"]=e.User,t})),i.mapEntitiesToContributors(l,"AbpIdentity"),a.tap((function(t){i.mergeWithDefaultActions(e.entityActions,Z,n),i.mergeWithDefaultActions(e.toolbarActions,ee,r),i.mergeWithDefaultProps(e.entityProps,te,t.prop,o),i.mergeWithDefaultProps(e.createFormProps,ne,t.createForm,s),i.mergeWithDefaultProps(e.editFormProps,ie,t.editForm,p)})),a.mapTo(!0))},e}();le.decorators=[{type:r.Injectable}],le.ctorParameters=function(){return[{type:r.Injector}]};var ce={requiredPolicy:"AbpIdentity.Roles",replaceableComponent:{key:"Identity.RolesComponent",defaultComponent:_}},de={requiredPolicy:"AbpIdentity.Users",replaceableComponent:{key:"Identity.UsersComponent",defaultComponent:k}},ue=[{path:"",redirectTo:"roles",pathMatch:"full"},{path:"",component:t.DynamicLayoutComponent,canActivate:[t.AuthGuard,t.PermissionGuard,le],children:[{path:"roles",component:t.ReplaceableRouteContainerComponent,data:ce},{path:"users",component:t.ReplaceableRouteContainerComponent,data:de}]}],me=function(){};me.decorators=[{type:r.NgModule,args:[{imports:[m.RouterModule.forChild(ue)],exports:[m.RouterModule]}]}];var ye=function(){function e(){}return e.forChild=function(t){return void 0===t&&(t={}),{ngModule:e,providers:[{provide:re,useValue:t.entityActionContributors},{provide:oe,useValue:t.toolbarActionContributors},{provide:ae,useValue:t.entityPropContributors},{provide:se,useValue:t.createFormPropContributors},{provide:pe,useValue:t.editFormPropContributors},le]}},e.forLazy=function(n){return void 0===n&&(n={}),new t.LazyModuleFactory(e.forChild(n))},e}();ye.decorators=[{type:r.NgModule,args:[{declarations:[_,k],exports:[_,k],imports:[o.NgxsModule.forFeature([e.ɵc]),t.CoreModule,me,d.NgbNavModule,n.ThemeSharedModule,i.UiExtensionsModule,d.NgbDropdownModule,c.PermissionManagementModule,u.NgxValidateCoreModule]}]}];var be=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.findById=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/lookup/"+e},{apiName:t.apiName})},this.findByUserName=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/lookup/by-username/"+e},{apiName:t.apiName})},this.getCount=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/lookup/count",params:{filter:e.filter}},{apiName:t.apiName})},this.search=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/lookup/search",params:{filter:e.filter,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})}};be.ɵprov=h.ɵɵdefineInjectable({factory:function(){return new be(h.ɵɵinject(f.RestService))},token:be,providedIn:"root"}),be.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],be.ctorParameters=function(){return[{type:t.RestService}]};var fe=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.changePassword=function(e){return t.restService.request({method:"POST",url:"/api/identity/my-profile/change-password",body:e},{apiName:t.apiName})},this.get=function(){return t.restService.request({method:"GET",url:"/api/identity/my-profile"},{apiName:t.apiName})},this.update=function(e){return t.restService.request({method:"PUT",url:"/api/identity/my-profile",body:e},{apiName:t.apiName})}};fe.ɵprov=h.ɵɵdefineInjectable({factory:function(){return new fe(h.ɵɵinject(f.RestService))},token:fe,providedIn:"root"}),fe.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],fe.ctorParameters=function(){return[{type:t.RestService}]};var he=function(){function t(e){this.store=e}return t.prototype.getRoles=function(){return this.store.selectSnapshot(e.ɵc.getRoles)},t.prototype.getRolesTotalCount=function(){return this.store.selectSnapshot(e.ɵc.getRolesTotalCount)},t.prototype.getUsers=function(){return this.store.selectSnapshot(e.ɵc.getUsers)},t.prototype.getUsersTotalCount=function(){return this.store.selectSnapshot(e.ɵc.getUsersTotalCount)},t.prototype.dispatchGetRoles=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(I.bind.apply(I,w([void 0],e))))},t.prototype.dispatchGetRoleById=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(R.bind.apply(R,w([void 0],e))))},t.prototype.dispatchDeleteRole=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(N.bind.apply(N,w([void 0],e))))},t.prototype.dispatchCreateRole=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(T.bind.apply(T,w([void 0],e))))},t.prototype.dispatchUpdateRole=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(S.bind.apply(S,w([void 0],e))))},t.prototype.dispatchGetUsers=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(C.bind.apply(C,w([void 0],e))))},t.prototype.dispatchGetUserById=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(U.bind.apply(U,w([void 0],e))))},t.prototype.dispatchDeleteUser=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(A.bind.apply(A,w([void 0],e))))},t.prototype.dispatchCreateUser=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(P.bind.apply(P,w([void 0],e))))},t.prototype.dispatchUpdateUser=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(O.bind.apply(O,w([void 0],e))))},t.prototype.dispatchGetUserRoles=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(j.bind.apply(j,w([void 0],e))))},t}();he.ɵprov=h.ɵɵdefineInjectable({factory:function(){return new he(h.ɵɵinject(v.Store))},token:he,providedIn:"root"}),he.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],he.ctorParameters=function(){return[{type:o.Store}]},e.CreateRole=T,e.CreateUser=P,e.DEFAULT_IDENTITY_CREATE_FORM_PROPS=ne,e.DEFAULT_IDENTITY_EDIT_FORM_PROPS=ie,e.DEFAULT_IDENTITY_ENTITY_ACTIONS=Z,e.DEFAULT_IDENTITY_ENTITY_PROPS=te,e.DEFAULT_IDENTITY_TOOLBAR_ACTIONS=ee,e.DeleteRole=N,e.DeleteUser=A,e.GetRoleById=R,e.GetRoles=I,e.GetUserById=U,e.GetUserRoles=j,e.GetUsers=C,e.IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS=se,e.IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS=pe,e.IDENTITY_ENTITY_ACTION_CONTRIBUTORS=re,e.IDENTITY_ENTITY_PROP_CONTRIBUTORS=ae,e.IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS=oe,e.IdentityExtensionsGuard=le,e.IdentityModule=ye,e.IdentityRoleService=D,e.IdentityState=e.ɵc,e.IdentityStateService=he,e.IdentityUserLookupService=be,e.IdentityUserService=x,e.ProfileService=fe,e.RolesComponent=_,e.UpdateRole=S,e.UpdateUser=O,e.UsersComponent=k,e.ɵa=_,e.ɵba=pe,e.ɵd=x,e.ɵe=D,e.ɵf=I,e.ɵg=R,e.ɵh=N,e.ɵi=T,e.ɵj=S,e.ɵk=C,e.ɵl=U,e.ɵm=A,e.ɵn=P,e.ɵo=O,e.ɵp=j,e.ɵt=k,e.ɵu=me,e.ɵv=le,e.ɵw=re,e.ɵx=oe,e.ɵy=ae,e.ɵz=se,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=abp-ng.identity.umd.min.js.map