{"version":3,"file":"identity.state.d.ts","sources":["identity.state.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { StateContext } from '@ngxs/store';\r\nimport { CreateRole, CreateUser, GetRoleById, GetRoles, GetUserById, GetUserRoles, GetUsers, UpdateRole, UpdateUser } from '../actions/identity.actions';\r\nimport { Identity } from '../models/identity';\r\nimport { IdentityRoleService } from '../proxy/identity/identity-role.service';\r\nimport { IdentityUserService } from '../proxy/identity/identity-user.service';\r\nimport { IdentityRoleDto, IdentityUserDto } from '../proxy/identity/models';\r\nexport declare class IdentityState {\r\n    private identityUserService;\r\n    private identityRoleService;\r\n    static getRoles({ roles }: Identity.State): IdentityRoleDto[];\r\n    static getRolesTotalCount({ roles }: Identity.State): number;\r\n    static getUsers({ users }: Identity.State): IdentityUserDto[];\r\n    static getUsersTotalCount({ users }: Identity.State): number;\r\n    constructor(identityUserService: IdentityUserService, identityRoleService: IdentityRoleService);\r\n    getRoles({ patchState }: StateContext<Identity.State>, { payload }: GetRoles): import(\"rxjs\").Observable<import(\"@abp/ng.core\").PagedResultDto<IdentityRoleDto>>;\r\n    getRole({ patchState }: StateContext<Identity.State>, { payload }: GetRoleById): import(\"rxjs\").Observable<IdentityRoleDto>;\r\n    deleteRole(_: any, { payload }: GetRoleById): import(\"rxjs\").Observable<void>;\r\n    addRole(_: any, { payload }: CreateRole): import(\"rxjs\").Observable<IdentityRoleDto>;\r\n    updateRole({ getState }: StateContext<Identity.State>, { payload }: UpdateRole): import(\"rxjs\").Observable<IdentityRoleDto>;\r\n    getUsers({ patchState }: StateContext<Identity.State>, { payload }: GetUsers): import(\"rxjs\").Observable<import(\"@abp/ng.core\").PagedResultDto<IdentityUserDto>>;\r\n    getUser({ patchState }: StateContext<Identity.State>, { payload }: GetUserById): import(\"rxjs\").Observable<IdentityUserDto>;\r\n    deleteUser(_: any, { payload }: GetUserById): import(\"rxjs\").Observable<void>;\r\n    addUser(_: any, { payload }: CreateUser): import(\"rxjs\").Observable<IdentityUserDto>;\r\n    updateUser({ getState }: StateContext<Identity.State>, { payload }: UpdateUser): import(\"rxjs\").Observable<IdentityUserDto>;\r\n    getUserRoles({ patchState }: StateContext<Identity.State>, { payload }: GetUserRoles): import(\"rxjs\").Observable<IdentityRoleDto[]>;\r\n}\r\n"]}