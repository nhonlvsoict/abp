import { __decorate } from 'tslib';
import * as i1 from '@abp/ng.core';
import { RestService, ListService, LocalizationService, ConfigStateService, DynamicLayoutComponent, AuthGuard, PermissionGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import { Confirmation, ConfirmationService, getPasswordValidators, ThemeSharedModule } from '@abp/ng.theme.shared';
import { FormPropData, generateFormFromProps, EXTENSIONS_IDENTIFIER, EntityAction, EntityProp, FormProp, ToolbarAction, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps, UiExtensionsModule } from '@abp/ng.theme.shared/extensions';
import * as i0 from '@angular/core';
import { Injectable, Component, Injector, ViewChild, InjectionToken, NgModule } from '@angular/core';
import * as i1$1 from '@ngxs/store';
import { Action, Selector, State, Store, Select, NgxsModule } from '@ngxs/store';
import { tap, pluck, finalize, switchMap, take, map, mapTo } from 'rxjs/operators';
import { FormBuilder, Validators } from '@angular/forms';
import snq from 'snq';
import { of } from 'rxjs';
import { PermissionManagementModule } from '@abp/ng.permission-management';
import { NgbNavModule, NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import { NgxValidateCoreModule } from '@ngx-validate/core';
import { RouterModule } from '@angular/router';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@abp/ng.core';
import * as ɵngcc2 from '@abp/ng.theme.shared';
import * as ɵngcc3 from '@ngxs/store';
import * as ɵngcc4 from '@abp/ng.theme.shared/extensions';
import * as ɵngcc5 from '@angular/forms';
import * as ɵngcc6 from '@ngx-validate/core';
import * as ɵngcc7 from '@abp/ng.permission-management';
import * as ɵngcc8 from '@angular/common';
import * as ɵngcc9 from '@ng-bootstrap/ng-bootstrap';
import * as ɵngcc10 from '@angular/router';

function RolesComponent_ng_template_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h3");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, (ctx_r1.selected == null ? null : ctx_r1.selected.id) ? "AbpIdentity::Edit" : "AbpIdentity::NewRole"));
} }
function RolesComponent_ng_template_17_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "form", 14);
    ɵngcc0.ɵɵlistener("ngSubmit", function RolesComponent_ng_template_17_Template_form_ngSubmit_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.save(); });
    ɵngcc0.ɵɵelement(1, "abp-extensible-form", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("formGroup", ctx_r3.form);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("selectedRecord", ctx_r3.selected);
} }
function RolesComponent_ng_template_19_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 16);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "abp-button", 17);
    ɵngcc0.ɵɵlistener("click", function RolesComponent_ng_template_19_Template_abp_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.save(); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, "AbpIdentity::Cancel"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r5.form == null ? null : ctx_r5.form.invalid);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 5, "AbpIdentity::Save"));
} }
function RolesComponent_abp_permission_management_21_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "abp-permission-management", 18, 19);
    ɵngcc0.ɵɵlistener("abpInit", function RolesComponent_abp_permission_management_21_Template_abp_permission_management_abpInit_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r14); const init_r11 = restoredCtx.initTemplate; const _r12 = ɵngcc0.ɵɵreference(1); return init_r11(_r12); });
    ɵngcc0.ɵɵelementEnd();
} }
const _c0 = function () { return { value: "R" }; };
const _c1 = function (a0) { return { value: a0 }; };
const _c2 = function (a0) { return { value: a0, twoWay: true }; };
const _c3 = function () { return { value: true }; };
const _c4 = function (a0, a1, a2, a3) { return { providerName: a0, providerKey: a1, visible: a2, hideBadges: a3 }; };
const _c5 = function (a0) { return { visibleChange: a0 }; };
const _c6 = function (a0, a1, a2) { return { inputs: a0, outputs: a1, componentKey: a2 }; };
const _c7 = ["modalContent"];
function UsersComponent_ng_template_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h3");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, (ctx_r1.selected == null ? null : ctx_r1.selected.id) ? "AbpIdentity::Edit" : "AbpIdentity::NewUser"));
} }
function UsersComponent_ng_template_21_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵelement(1, "i", 20);
    ɵngcc0.ɵɵelementEnd();
} }
function UsersComponent_ng_template_21_form_2_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "abp-extensible-form", 28);
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("selectedRecord", ctx_r11.selected);
} }
function UsersComponent_ng_template_21_form_2_ng_template_12_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 30);
    ɵngcc0.ɵɵelement(1, "input", 31);
    ɵngcc0.ɵɵelementStart(2, "label", 32);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const roleGroup_r14 = ctx.$implicit;
    const i_r15 = ctx.index;
    const ctx_r13 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("formControl", roleGroup_r14.controls[ctx_r13.roles[i_r15].name]);
    ɵngcc0.ɵɵattribute("id", "roles-" + i_r15);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("for", "roles-" + i_r15);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r13.roles[i_r15].name);
} }
function UsersComponent_ng_template_21_form_2_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, UsersComponent_ng_template_21_form_2_ng_template_12_div_0_Template, 4, 4, "div", 29);
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r12.roleGroups)("ngForTrackBy", ctx_r12.trackByFn);
} }
function UsersComponent_ng_template_21_form_2_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "form", 21);
    ɵngcc0.ɵɵlistener("ngSubmit", function UsersComponent_ng_template_21_form_2_Template_form_ngSubmit_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.save(); });
    ɵngcc0.ɵɵelementStart(1, "ul", 22, 23);
    ɵngcc0.ɵɵelementStart(3, "li", 24);
    ɵngcc0.ɵɵelementStart(4, "a", 25);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, UsersComponent_ng_template_21_form_2_ng_template_7_Template, 1, 1, "ng-template", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "li", 24);
    ɵngcc0.ɵɵelementStart(9, "a", 25);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(12, UsersComponent_ng_template_21_form_2_ng_template_12_Template, 1, 2, "ng-template", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(13, "div", 27);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r10 = ɵngcc0.ɵɵreference(2);
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("formGroup", ctx_r9.form);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 4, "AbpIdentity::UserInformations"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 6, "AbpIdentity::Roles"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngbNavOutlet", _r10);
} }
function UsersComponent_ng_template_21_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, UsersComponent_ng_template_21_ng_template_0_Template, 2, 0, "ng-template", null, 17, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(2, UsersComponent_ng_template_21_form_2_Template, 14, 8, "form", 18);
} if (rf & 2) {
    const _r7 = ɵngcc0.ɵɵreference(1);
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.form)("ngIfElse", _r7);
} }
function UsersComponent_ng_template_23_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 33);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "abp-button", 34);
    ɵngcc0.ɵɵlistener("click", function UsersComponent_ng_template_23_Template_abp_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.save(); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, "AbpIdentity::Cancel"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r5.form == null ? null : ctx_r5.form.invalid);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 5, "AbpIdentity::Save"));
} }
function UsersComponent_abp_permission_management_25_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "abp-permission-management", 35, 36);
    ɵngcc0.ɵɵlistener("abpInit", function UsersComponent_abp_permission_management_25_Template_abp_permission_management_abpInit_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r23); const init_r20 = restoredCtx.initTemplate; const _r21 = ɵngcc0.ɵɵreference(1); return init_r20(_r21); });
    ɵngcc0.ɵɵelementEnd();
} }
const _c8 = function () { return { value: "U" }; };
const _c9 = function (a0, a1, a2) { return { providerName: a0, providerKey: a1, visible: a2 }; };
class GetRoles {
    constructor(payload) {
        this.payload = payload;
    }
}
GetRoles.type = '[Identity] Get Roles';
class GetRoleById {
    constructor(payload) {
        this.payload = payload;
    }
}
GetRoleById.type = '[Identity] Get Role By Id';
class DeleteRole {
    constructor(payload) {
        this.payload = payload;
    }
}
DeleteRole.type = '[Identity] Delete Role';
class CreateRole {
    constructor(payload) {
        this.payload = payload;
    }
}
CreateRole.type = '[Identity] Create Role';
class UpdateRole {
    constructor(payload) {
        this.payload = payload;
    }
}
UpdateRole.type = '[Identity] Update Role';
class GetUsers {
    constructor(payload) {
        this.payload = payload;
    }
}
GetUsers.type = '[Identity] Get Users';
class GetUserById {
    constructor(payload) {
        this.payload = payload;
    }
}
GetUserById.type = '[Identity] Get User By Id';
class DeleteUser {
    constructor(payload) {
        this.payload = payload;
    }
}
DeleteUser.type = '[Identity] Delete User';
class CreateUser {
    constructor(payload) {
        this.payload = payload;
    }
}
CreateUser.type = '[Identity] Create User';
class UpdateUser {
    constructor(payload) {
        this.payload = payload;
    }
}
UpdateUser.type = '[Identity] Update User';
class GetUserRoles {
    constructor(payload) {
        this.payload = payload;
    }
}
GetUserRoles.type = '[Identity] Get User Roles';

class IdentityRoleService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: '/api/identity/roles',
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity/roles/${id}`,
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/roles/${id}`,
        }, { apiName: this.apiName });
        this.getAllList = () => this.restService.request({
            method: 'GET',
            url: '/api/identity/roles/all',
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: '/api/identity/roles',
            params: { sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/roles/${id}`,
            body: input,
        }, { apiName: this.apiName });
    }
}
IdentityRoleService.ɵfac = function IdentityRoleService_Factory(t) { return new (t || IdentityRoleService)(ɵngcc0.ɵɵinject(ɵngcc1.RestService)); };
IdentityRoleService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IdentityRoleService_Factory() { return new IdentityRoleService(i0.ɵɵinject(i1.RestService)); }, token: IdentityRoleService, providedIn: "root" });
IdentityRoleService.ctorParameters = () => [
    { type: RestService }
];

class IdentityUserService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: '/api/identity/users',
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity/users/${id}`,
        }, { apiName: this.apiName });
        this.findByEmail = (email) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/by-email/${email}`,
        }, { apiName: this.apiName });
        this.findByUsername = (username) => this.restService.request({
            method: 'GET',
            url: '/api/identity/users/by-username/{userName}',
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/${id}`,
        }, { apiName: this.apiName });
        this.getAssignableRoles = () => this.restService.request({
            method: 'GET',
            url: '/api/identity/users/assignable-roles',
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: '/api/identity/users',
            params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
        this.getRoles = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/${id}/roles`,
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/users/${id}`,
            body: input,
        }, { apiName: this.apiName });
        this.updateRoles = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/users/${id}/roles`,
            body: input,
        }, { apiName: this.apiName });
    }
}
IdentityUserService.ɵfac = function IdentityUserService_Factory(t) { return new (t || IdentityUserService)(ɵngcc0.ɵɵinject(ɵngcc1.RestService)); };
IdentityUserService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IdentityUserService_Factory() { return new IdentityUserService(i0.ɵɵinject(i1.RestService)); }, token: IdentityUserService, providedIn: "root" });
IdentityUserService.ctorParameters = () => [
    { type: RestService }
];

let IdentityState = class IdentityState {
    constructor(identityUserService, identityRoleService) {
        this.identityUserService = identityUserService;
        this.identityRoleService = identityRoleService;
    }
    static getRoles({ roles }) {
        return roles.items || [];
    }
    static getRolesTotalCount({ roles }) {
        return roles.totalCount || 0;
    }
    static getUsers({ users }) {
        return users.items || [];
    }
    static getUsersTotalCount({ users }) {
        return users.totalCount || 0;
    }
    getRoles({ patchState }, { payload }) {
        return this.identityRoleService.getList(payload).pipe(tap(roles => patchState({
            roles,
        })));
    }
    getRole({ patchState }, { payload }) {
        return this.identityRoleService.get(payload).pipe(tap(selectedRole => patchState({
            selectedRole,
        })));
    }
    deleteRole(_, { payload }) {
        return this.identityRoleService.delete(payload);
    }
    addRole(_, { payload }) {
        return this.identityRoleService.create(payload);
    }
    updateRole({ getState }, { payload }) {
        return this.identityRoleService.update(payload.id, Object.assign(Object.assign({}, getState().selectedRole), payload));
    }
    getUsers({ patchState }, { payload }) {
        return this.identityUserService.getList(payload).pipe(tap(users => patchState({
            users,
        })));
    }
    getUser({ patchState }, { payload }) {
        return this.identityUserService.get(payload).pipe(tap(selectedUser => patchState({
            selectedUser,
        })));
    }
    deleteUser(_, { payload }) {
        return this.identityUserService.delete(payload);
    }
    addUser(_, { payload }) {
        return this.identityUserService.create(payload);
    }
    updateUser({ getState }, { payload }) {
        return this.identityUserService.update(payload.id, Object.assign(Object.assign({}, getState().selectedUser), payload));
    }
    getUserRoles({ patchState }, { payload }) {
        return this.identityUserService.getRoles(payload).pipe(pluck('items'), tap(selectedUserRoles => patchState({
            selectedUserRoles,
        })));
    }
};
IdentityState.ɵfac = function IdentityState_Factory(t) { return new (t || IdentityState)(ɵngcc0.ɵɵinject(IdentityUserService), ɵngcc0.ɵɵinject(IdentityRoleService)); };
IdentityState.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: IdentityState, factory: function (t) { return IdentityState.ɵfac(t); } });
IdentityState.ctorParameters = () => [
    { type: IdentityUserService },
    { type: IdentityRoleService }
];
__decorate([
    Action(GetRoles)
], IdentityState.prototype, "getRoles", null);
__decorate([
    Action(GetRoleById)
], IdentityState.prototype, "getRole", null);
__decorate([
    Action(DeleteRole)
], IdentityState.prototype, "deleteRole", null);
__decorate([
    Action(CreateRole)
], IdentityState.prototype, "addRole", null);
__decorate([
    Action(UpdateRole)
], IdentityState.prototype, "updateRole", null);
__decorate([
    Action(GetUsers)
], IdentityState.prototype, "getUsers", null);
__decorate([
    Action(GetUserById)
], IdentityState.prototype, "getUser", null);
__decorate([
    Action(DeleteUser)
], IdentityState.prototype, "deleteUser", null);
__decorate([
    Action(CreateUser)
], IdentityState.prototype, "addUser", null);
__decorate([
    Action(UpdateUser)
], IdentityState.prototype, "updateUser", null);
__decorate([
    Action(GetUserRoles)
], IdentityState.prototype, "getUserRoles", null);
__decorate([
    Selector()
], IdentityState, "getRoles", null);
__decorate([
    Selector()
], IdentityState, "getRolesTotalCount", null);
__decorate([
    Selector()
], IdentityState, "getUsers", null);
__decorate([
    Selector()
], IdentityState, "getUsersTotalCount", null);
IdentityState = __decorate([
    State({
        name: 'IdentityState',
        defaults: { roles: {}, selectedRole: {}, users: {}, selectedUser: {} },
    })
], IdentityState);

const ɵ0$9 = "Identity.RolesComponent" /* Roles */;
class RolesComponent {
    constructor(list, confirmationService, store, injector) {
        this.list = list;
        this.confirmationService = confirmationService;
        this.store = store;
        this.injector = injector;
        this.visiblePermissions = false;
        this.modalBusy = false;
        this.permissionManagementKey = "PermissionManagement.PermissionManagementComponent" /* PermissionManagement */;
        this.onVisiblePermissionChange = event => {
            this.visiblePermissions = event;
        };
    }
    ngOnInit() {
        this.hookToQuery();
    }
    buildForm() {
        const data = new FormPropData(this.injector, this.selected);
        this.form = generateFormFromProps(data);
    }
    openModal() {
        this.buildForm();
        this.isModalVisible = true;
    }
    add() {
        this.selected = {};
        this.openModal();
    }
    edit(id) {
        this.store
            .dispatch(new GetRoleById(id))
            .pipe(pluck('IdentityState', 'selectedRole'))
            .subscribe(selectedRole => {
            this.selected = selectedRole;
            this.openModal();
        });
    }
    save() {
        if (!this.form.valid)
            return;
        this.modalBusy = true;
        this.store
            .dispatch(this.selected.id
            ? new UpdateRole(Object.assign(Object.assign(Object.assign({}, this.selected), this.form.value), { id: this.selected.id }))
            : new CreateRole(this.form.value))
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.isModalVisible = false;
            this.list.get();
        });
    }
    delete(id, name) {
        this.confirmationService
            .warn('AbpIdentity::RoleDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {
            messageLocalizationParams: [name],
        })
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.store.dispatch(new DeleteRole(id)).subscribe(() => this.list.get());
            }
        });
    }
    hookToQuery() {
        this.list.hookToQuery(query => this.store.dispatch(new GetRoles(query))).subscribe();
    }
    openPermissionsModal(providerKey) {
        this.providerKey = providerKey;
        setTimeout(() => {
            this.visiblePermissions = true;
        }, 0);
    }
    sort(data) {
        const { prop, dir } = data.sorts[0];
        this.list.sortKey = prop;
        this.list.sortOrder = dir;
    }
}
RolesComponent.ɵfac = function RolesComponent_Factory(t) { return new (t || RolesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ListService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ConfirmationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Store), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
RolesComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: RolesComponent, selectors: [["abp-roles"]], features: [ɵngcc0.ɵɵProvidersFeature([
            ListService,
            {
                provide: EXTENSIONS_IDENTIFIER,
                useValue: ɵ0$9
            },
        ])], decls: 22, vars: 33, consts: [["id", "identity-roles-wrapper", 1, "card"], [1, "card-header"], [1, "row"], [1, "col", "col-md-6"], [1, "card-title"], [1, "text-right", "col", "col-md-6"], [3, "record"], [1, "card-body"], [3, "data", "recordsTotal", "list"], ["size", "md", 3, "visible", "busy", "visibleChange"], ["abpHeader", ""], ["abpBody", ""], ["abpFooter", ""], [3, "abpInit", 4, "abpReplaceableTemplate"], ["validateOnSubmit", "", 3, "formGroup", "ngSubmit"], [3, "selectedRecord"], ["type", "button", "abpClose", "", 1, "btn", "btn-secondary"], ["iconClass", "fa fa-check", 3, "disabled", "click"], [3, "abpInit"], ["abpPermissionManagement", "abpPermissionManagement"]], template: function RolesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "h5", 4);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵpipe(6, "abpLocalization");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵelement(8, "abp-page-toolbar", 6);
        ɵngcc0.ɵɵpipe(9, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 7);
        ɵngcc0.ɵɵelement(11, "abp-extensible-table", 8);
        ɵngcc0.ɵɵpipe(12, "async");
        ɵngcc0.ɵɵpipe(13, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "abp-modal", 9);
        ɵngcc0.ɵɵlistener("visibleChange", function RolesComponent_Template_abp_modal_visibleChange_14_listener($event) { return ctx.isModalVisible = $event; });
        ɵngcc0.ɵɵtemplate(15, RolesComponent_ng_template_15_Template, 3, 3, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(17, RolesComponent_ng_template_17_Template, 2, 2, "ng-template", null, 11, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(19, RolesComponent_ng_template_19_Template, 6, 7, "ng-template", null, 12, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(21, RolesComponent_abp_permission_management_21_Template, 2, 0, "abp-permission-management", 13);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 8, "AbpIdentity::Roles"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("record", ɵngcc0.ɵɵpipeBind1(9, 10, ctx.data$));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("data", ɵngcc0.ɵɵpipeBind1(12, 12, ctx.data$))("recordsTotal", ɵngcc0.ɵɵpipeBind1(13, 14, ctx.totalCount$))("list", ctx.list);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("visible", ctx.isModalVisible)("busy", ctx.modalBusy);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵproperty("abpReplaceableTemplate", ɵngcc0.ɵɵpureFunction3(29, _c6, ɵngcc0.ɵɵpureFunction4(22, _c4, ɵngcc0.ɵɵpureFunction0(16, _c0), ɵngcc0.ɵɵpureFunction1(17, _c1, ctx.providerKey), ɵngcc0.ɵɵpureFunction1(19, _c2, ctx.visiblePermissions), ɵngcc0.ɵɵpureFunction0(21, _c3)), ɵngcc0.ɵɵpureFunction1(27, _c5, ctx.onVisiblePermissionChange), ctx.permissionManagementKey));
    } }, directives: [ɵngcc4.PageToolbarComponent, ɵngcc4.ExtensibleTableComponent, ɵngcc2.ModalComponent, ɵngcc1.ReplaceableTemplateDirective, ɵngcc5.ɵNgNoValidate, ɵngcc5.NgControlStatusGroup, ɵngcc1.FormSubmitDirective, ɵngcc5.FormGroupDirective, ɵngcc6.ValidationGroupDirective, ɵngcc4.ExtensibleFormComponent, ɵngcc2.ModalCloseDirective, ɵngcc2.ButtonComponent, ɵngcc7.PermissionManagementComponent, ɵngcc1.InitDirective], pipes: [ɵngcc1.LocalizationPipe, ɵngcc8.AsyncPipe], encapsulation: 2 });
RolesComponent.ctorParameters = () => [
    { type: ListService },
    { type: ConfirmationService },
    { type: Store },
    { type: Injector }
];
__decorate([
    Select(IdentityState.getRoles)
], RolesComponent.prototype, "data$", void 0);
__decorate([
    Select(IdentityState.getRolesTotalCount)
], RolesComponent.prototype, "totalCount$", void 0);

const ɵ0$8 = "Identity.UsersComponent" /* Users */;
class UsersComponent {
    constructor(list, confirmationService, userService, fb, store, injector) {
        this.list = list;
        this.confirmationService = confirmationService;
        this.userService = userService;
        this.fb = fb;
        this.store = store;
        this.injector = injector;
        this.visiblePermissions = false;
        this.modalBusy = false;
        this.permissionManagementKey = "PermissionManagement.PermissionManagementComponent" /* PermissionManagement */;
        this.trackByFn = (index, item) => Object.keys(item)[0] || index;
        this.onVisiblePermissionChange = event => {
            this.visiblePermissions = event;
        };
    }
    get roleGroups() {
        return snq(() => this.form.get('roleNames').controls, []);
    }
    ngOnInit() {
        this.hookToQuery();
    }
    buildForm() {
        const data = new FormPropData(this.injector, this.selected);
        this.form = generateFormFromProps(data);
        this.userService.getAssignableRoles().subscribe(({ items }) => {
            this.roles = items;
            this.form.addControl('roleNames', this.fb.array(this.roles.map(role => this.fb.group({
                [role.name]: [
                    this.selected.id
                        ? !!snq(() => this.selectedUserRoles.find(userRole => userRole.id === role.id))
                        : role.isDefault,
                ],
            }))));
        });
    }
    openModal() {
        this.buildForm();
        this.isModalVisible = true;
    }
    add() {
        this.selected = {};
        this.selectedUserRoles = [];
        this.openModal();
    }
    edit(id) {
        this.store
            .dispatch(new GetUserById(id))
            .pipe(switchMap(() => this.store.dispatch(new GetUserRoles(id))), pluck('IdentityState'), take(1))
            .subscribe((state) => {
            this.selected = state.selectedUser;
            this.selectedUserRoles = state.selectedUserRoles || [];
            this.openModal();
        });
    }
    save() {
        if (!this.form.valid || this.modalBusy)
            return;
        this.modalBusy = true;
        const { roleNames } = this.form.value;
        const mappedRoleNames = snq(() => roleNames.filter(role => !!role[Object.keys(role)[0]]).map(role => Object.keys(role)[0]), []);
        this.store
            .dispatch(this.selected.id
            ? new UpdateUser(Object.assign(Object.assign(Object.assign({}, this.selected), this.form.value), { id: this.selected.id, roleNames: mappedRoleNames }))
            : new CreateUser(Object.assign(Object.assign({}, this.form.value), { roleNames: mappedRoleNames })))
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.isModalVisible = false;
            this.list.get();
        });
    }
    delete(id, userName) {
        this.confirmationService
            .warn('AbpIdentity::UserDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {
            messageLocalizationParams: [userName],
        })
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.store.dispatch(new DeleteUser(id)).subscribe(() => this.list.get());
            }
        });
    }
    sort(data) {
        const { prop, dir } = data.sorts[0];
        this.list.sortKey = prop;
        this.list.sortOrder = dir;
    }
    hookToQuery() {
        this.list.hookToQuery(query => this.store.dispatch(new GetUsers(query))).subscribe();
    }
    openPermissionsModal(providerKey) {
        this.providerKey = providerKey;
        setTimeout(() => {
            this.visiblePermissions = true;
        }, 0);
    }
}
UsersComponent.ɵfac = function UsersComponent_Factory(t) { return new (t || UsersComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ListService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ConfirmationService), ɵngcc0.ɵɵdirectiveInject(IdentityUserService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Store), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
UsersComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: UsersComponent, selectors: [["abp-users"]], viewQuery: function UsersComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c7, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modalContent = _t.first);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([
            ListService,
            {
                provide: EXTENSIONS_IDENTIFIER,
                useValue: ɵ0$8
            },
        ])], decls: 26, vars: 35, consts: [["id", "identity-roles-wrapper", 1, "card"], [1, "card-header"], [1, "row"], [1, "col", "col-md-6"], [1, "card-title"], [1, "text-right", "col", "col-md-6"], [3, "record"], [1, "card-body"], ["id", "data-tables-table-filter", 1, "data-tables-filter"], [1, "input-group"], ["type", "search", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], [3, "data", "recordsTotal", "list"], ["size", "md", 3, "visible", "busy", "visibleChange"], ["abpHeader", ""], ["abpBody", ""], ["abpFooter", ""], [3, "abpInit", 4, "abpReplaceableTemplate"], ["loaderRef", ""], [3, "formGroup", "ngSubmit", 4, "ngIf", "ngIfElse"], [1, "text-center"], [1, "fa", "fa-pulse", "fa-spinner"], [3, "formGroup", "ngSubmit"], ["ngbNav", "", 1, "nav-tabs"], ["nav", "ngbNav"], ["ngbNavItem", ""], ["ngbNavLink", ""], ["ngbNavContent", ""], [1, "mt-2", "fade-in-top", 3, "ngbNavOutlet"], [3, "selectedRecord"], ["class", "custom-checkbox custom-control mb-2", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "custom-checkbox", "custom-control", "mb-2"], ["type", "checkbox", 1, "custom-control-input", 3, "formControl"], [1, "custom-control-label"], ["type", "button", "abpClose", "", 1, "btn", "btn-secondary"], ["iconClass", "fa fa-check", 3, "disabled", "click"], [3, "abpInit"], ["abpPermissionManagement", "abpPermissionManagement"]], template: function UsersComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "h5", 4);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵpipe(6, "abpLocalization");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵelement(8, "abp-page-toolbar", 6);
        ɵngcc0.ɵɵpipe(9, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 7);
        ɵngcc0.ɵɵelementStart(11, "div", 8);
        ɵngcc0.ɵɵelementStart(12, "div", 9);
        ɵngcc0.ɵɵelementStart(13, "input", 10);
        ɵngcc0.ɵɵlistener("ngModelChange", function UsersComponent_Template_input_ngModelChange_13_listener($event) { return ctx.list.filter = $event; });
        ɵngcc0.ɵɵpipe(14, "abpLocalization");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(15, "abp-extensible-table", 11);
        ɵngcc0.ɵɵpipe(16, "async");
        ɵngcc0.ɵɵpipe(17, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "abp-modal", 12);
        ɵngcc0.ɵɵlistener("visibleChange", function UsersComponent_Template_abp_modal_visibleChange_18_listener($event) { return ctx.isModalVisible = $event; });
        ɵngcc0.ɵɵtemplate(19, UsersComponent_ng_template_19_Template, 3, 3, "ng-template", null, 13, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(21, UsersComponent_ng_template_21_Template, 3, 2, "ng-template", null, 14, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(23, UsersComponent_ng_template_23_Template, 6, 7, "ng-template", null, 15, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(25, UsersComponent_abp_permission_management_25_Template, 2, 0, "abp-permission-management", 16);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 10, "AbpIdentity::Users"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("record", ɵngcc0.ɵɵpipeBind1(9, 12, ctx.data$));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(14, 14, "AbpUi::PagerSearch"))("ngModel", ctx.list.filter);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("data", ɵngcc0.ɵɵpipeBind1(16, 16, ctx.data$))("recordsTotal", ɵngcc0.ɵɵpipeBind1(17, 18, ctx.totalCount$))("list", ctx.list);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("visible", ctx.isModalVisible)("busy", ctx.modalBusy);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵproperty("abpReplaceableTemplate", ɵngcc0.ɵɵpureFunction3(31, _c6, ɵngcc0.ɵɵpureFunction3(25, _c9, ɵngcc0.ɵɵpureFunction0(20, _c8), ɵngcc0.ɵɵpureFunction1(21, _c1, ctx.providerKey), ɵngcc0.ɵɵpureFunction1(23, _c2, ctx.visiblePermissions)), ɵngcc0.ɵɵpureFunction1(29, _c5, ctx.onVisiblePermissionChange), ctx.permissionManagementKey));
    } }, directives: [ɵngcc4.PageToolbarComponent, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.NgModel, ɵngcc4.ExtensibleTableComponent, ɵngcc2.ModalComponent, ɵngcc1.ReplaceableTemplateDirective, ɵngcc8.NgIf, ɵngcc5.ɵNgNoValidate, ɵngcc5.NgControlStatusGroup, ɵngcc1.FormSubmitDirective, ɵngcc5.FormGroupDirective, ɵngcc6.ValidationGroupDirective, ɵngcc9.NgbNav, ɵngcc9.NgbNavItem, ɵngcc9.NgbNavLink, ɵngcc9.NgbNavContent, ɵngcc9.NgbNavOutlet, ɵngcc4.ExtensibleFormComponent, ɵngcc8.NgForOf, ɵngcc5.CheckboxControlValueAccessor, ɵngcc5.FormControlDirective, ɵngcc6.ValidationDirective, ɵngcc2.ModalCloseDirective, ɵngcc2.ButtonComponent, ɵngcc7.PermissionManagementComponent, ɵngcc1.InitDirective], pipes: [ɵngcc1.LocalizationPipe, ɵngcc8.AsyncPipe], encapsulation: 2 });
UsersComponent.ctorParameters = () => [
    { type: ListService },
    { type: ConfirmationService },
    { type: IdentityUserService },
    { type: FormBuilder },
    { type: Store },
    { type: Injector }
];
UsersComponent.propDecorators = {
    modalContent: [{ type: ViewChild, args: ['modalContent', { static: false },] }]
};
__decorate([
    Select(IdentityState.getUsers)
], UsersComponent.prototype, "data$", void 0);
__decorate([
    Select(IdentityState.getUsersTotalCount)
], UsersComponent.prototype, "totalCount$", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IdentityRoleService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.RestService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IdentityUserService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.RestService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IdentityState, [{
        type: Injectable
    }], function () { return [{ type: IdentityUserService }, { type: IdentityRoleService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RolesComponent, [{
        type: Component,
        args: [{
                selector: 'abp-roles',
                template: "<div id=\"identity-roles-wrapper\" class=\"card\">\n  <div class=\"card-header\">\n    <div class=\"row\">\n      <div class=\"col col-md-6\">\n        <h5 class=\"card-title\">{{ 'AbpIdentity::Roles' | abpLocalization }}</h5>\n      </div>\n      <div class=\"text-right col col-md-6\">\n        <abp-page-toolbar [record]=\"data$ | async\"></abp-page-toolbar>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card-body\">\n    <abp-extensible-table\n      [data]=\"data$ | async\"\n      [recordsTotal]=\"totalCount$ | async\"\n      [list]=\"list\"\n    ></abp-extensible-table>\n  </div>\n</div>\n\n<abp-modal size=\"md\" [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\n  <ng-template #abpHeader>\n    <h3>{{ (selected?.id ? 'AbpIdentity::Edit' : 'AbpIdentity::NewRole') | abpLocalization }}</h3>\n  </ng-template>\n\n  <ng-template #abpBody>\n    <form [formGroup]=\"form\" (ngSubmit)=\"save()\" validateOnSubmit>\n      <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\n    </form>\n  </ng-template>\n\n  <ng-template #abpFooter>\n    <button type=\"button\" class=\"btn btn-secondary\" abpClose>\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\n    </button>\n    <abp-button iconClass=\"fa fa-check\" [disabled]=\"form?.invalid\" (click)=\"save()\">{{\n      'AbpIdentity::Save' | abpLocalization\n    }}</abp-button>\n  </ng-template>\n</abp-modal>\n\n<abp-permission-management\n  #abpPermissionManagement=\"abpPermissionManagement\"\n  *abpReplaceableTemplate=\"\n    {\n      inputs: {\n        providerName: { value: 'R' },\n        providerKey: { value: providerKey },\n        visible: { value: visiblePermissions, twoWay: true },\n        hideBadges: { value: true }\n      },\n      outputs: { visibleChange: onVisiblePermissionChange },\n      componentKey: permissionManagementKey\n    };\n    let init = initTemplate\n  \"\n  (abpInit)=\"init(abpPermissionManagement)\"\n>\n</abp-permission-management>\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0$9
                    },
                ]
            }]
    }], function () { return [{ type: ɵngcc1.ListService }, { type: ɵngcc2.ConfirmationService }, { type: ɵngcc3.Store }, { type: ɵngcc0.Injector }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UsersComponent, [{
        type: Component,
        args: [{
                selector: 'abp-users',
                template: "<div id=\"identity-roles-wrapper\" class=\"card\">\n  <div class=\"card-header\">\n    <div class=\"row\">\n      <div class=\"col col-md-6\">\n        <h5 class=\"card-title\">{{ 'AbpIdentity::Users' | abpLocalization }}</h5>\n      </div>\n      <div class=\"text-right col col-md-6\">\n        <abp-page-toolbar [record]=\"data$ | async\"></abp-page-toolbar>\n      </div>\n    </div>\n  </div>\n  <div class=\"card-body\">\n    <div id=\"data-tables-table-filter\" class=\"data-tables-filter\">\n      <div class=\"input-group\">\n        <input\n          type=\"search\"\n          class=\"form-control\"\n          [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\n          [(ngModel)]=\"list.filter\"\n        />\n      </div>\n    </div>\n\n    <abp-extensible-table\n      [data]=\"data$ | async\"\n      [recordsTotal]=\"totalCount$ | async\"\n      [list]=\"list\"\n    ></abp-extensible-table>\n  </div>\n</div>\n\n<abp-modal size=\"md\" [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\n  <ng-template #abpHeader>\n    <h3>{{ (selected?.id ? 'AbpIdentity::Edit' : 'AbpIdentity::NewUser') | abpLocalization }}</h3>\n  </ng-template>\n\n  <ng-template #abpBody>\n    <ng-template #loaderRef\n      ><div class=\"text-center\"><i class=\"fa fa-pulse fa-spinner\"></i></div\n    ></ng-template>\n\n    <form *ngIf=\"form; else loaderRef\" [formGroup]=\"form\" (ngSubmit)=\"save()\">\n      <ul ngbNav #nav=\"ngbNav\" class=\"nav-tabs\">\n        <li ngbNavItem>\n          <a ngbNavLink>{{ 'AbpIdentity::UserInformations' | abpLocalization }}</a>\n          <ng-template ngbNavContent>\n            <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\n          </ng-template>\n        </li>\n\n        <li ngbNavItem>\n          <a ngbNavLink>{{ 'AbpIdentity::Roles' | abpLocalization }}</a>\n          <ng-template ngbNavContent>\n            <div\n              *ngFor=\"let roleGroup of roleGroups; let i = index; trackBy: trackByFn\"\n              class=\"custom-checkbox custom-control mb-2\"\n            >\n              <input\n                type=\"checkbox\"\n                class=\"custom-control-input\"\n                [attr.id]=\"'roles-' + i\"\n                [formControl]=\"roleGroup.controls[roles[i].name]\"\n              />\n              <label class=\"custom-control-label\" [attr.for]=\"'roles-' + i\">{{\n                roles[i].name\n              }}</label>\n            </div>\n          </ng-template>\n        </li>\n      </ul>\n\n      <div class=\"mt-2 fade-in-top\" [ngbNavOutlet]=\"nav\"></div>\n    </form>\n  </ng-template>\n\n  <ng-template #abpFooter>\n    <button type=\"button\" class=\"btn btn-secondary\" abpClose>\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\n    </button>\n    <abp-button iconClass=\"fa fa-check\" [disabled]=\"form?.invalid\" (click)=\"save()\">{{\n      'AbpIdentity::Save' | abpLocalization\n    }}</abp-button>\n  </ng-template>\n</abp-modal>\n\n<abp-permission-management\n  #abpPermissionManagement=\"abpPermissionManagement\"\n  *abpReplaceableTemplate=\"\n    {\n      inputs: {\n        providerName: { value: 'U' },\n        providerKey: { value: providerKey },\n        visible: { value: visiblePermissions, twoWay: true }\n      },\n      outputs: { visibleChange: onVisiblePermissionChange },\n      componentKey: permissionManagementKey\n    };\n    let init = initTemplate\n  \"\n  (abpInit)=\"init(abpPermissionManagement)\"\n>\n</abp-permission-management>\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0$8
                    },
                ]
            }]
    }], function () { return [{ type: ɵngcc1.ListService }, { type: ɵngcc2.ConfirmationService }, { type: IdentityUserService }, { type: ɵngcc5.FormBuilder }, { type: ɵngcc3.Store }, { type: ɵngcc0.Injector }]; }, { modalContent: [{
            type: ViewChild,
            args: ['modalContent', { static: false }]
        }] }); })();

const ɵ0$7 = data => {
    const component = data.getInjected(RolesComponent);
    component.edit(data.record.id);
}, ɵ1$4 = data => {
    const component = data.getInjected(RolesComponent);
    component.openPermissionsModal(data.record.name);
}, ɵ2$2 = data => {
    const component = data.getInjected(RolesComponent);
    component.delete(data.record.id, data.record.name);
}, ɵ3$1 = data => !data.record.isStatic;
const DEFAULT_ROLES_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpIdentity::Edit',
        action: ɵ0$7,
        permission: 'AbpIdentity.Roles.Update',
    },
    {
        text: 'AbpIdentity::Permissions',
        action: ɵ1$4,
        permission: 'AbpIdentity.Roles.ManagePermissions',
    },
    {
        text: 'AbpIdentity::Delete',
        action: ɵ2$2,
        permission: 'AbpIdentity.Roles.Delete',
        visible: ɵ3$1,
    },
]);

const ɵ0$6 = data => {
    const l10n = data.getInjected(LocalizationService);
    const t = l10n.instant.bind(l10n);
    const { isDefault, isPublic, name } = data.record;
    return of(name +
        (isDefault
            ? `<span class="badge badge-pill badge-success ml-1">${t('AbpIdentity::DisplayName:IsDefault')}</span>`
            : '') +
        (isPublic
            ? `<span class="badge badge-pill badge-info ml-1">${t('AbpIdentity::DisplayName:IsPublic')}</span>`
            : ''));
};
const DEFAULT_ROLES_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentity::RoleName',
        sortable: true,
        valueResolver: ɵ0$6,
    },
]);

const ɵ0$5 = (data) => data.record && data.record.isStatic, ɵ1$3 = () => [Validators.required];
const DEFAULT_ROLES_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentity::RoleName',
        id: 'role-name',
        disabled: ɵ0$5,
        validators: ɵ1$3,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'isDefault',
        displayName: 'AbpIdentity::DisplayName:IsDefault',
        id: 'role-is-default',
        defaultValue: false,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'isPublic',
        displayName: 'AbpIdentity::DisplayName:IsPublic',
        id: 'role-is-public',
        defaultValue: false,
    },
]);
const DEFAULT_ROLES_EDIT_FORM_PROPS = DEFAULT_ROLES_CREATE_FORM_PROPS;

const ɵ0$4 = data => {
    const component = data.getInjected(RolesComponent);
    component.add();
};
const DEFAULT_ROLES_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'AbpIdentity::NewRole',
        action: ɵ0$4,
        permission: 'AbpIdentity.Roles.Create',
        icon: 'fa fa-plus',
    },
]);

const ɵ0$3 = data => {
    const component = data.getInjected(UsersComponent);
    component.edit(data.record.id);
}, ɵ1$2 = data => {
    const component = data.getInjected(UsersComponent);
    component.openPermissionsModal(data.record.id);
}, ɵ2$1 = data => {
    const component = data.getInjected(UsersComponent);
    component.delete(data.record.id, data.record.name || data.record.userName);
};
const DEFAULT_USERS_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpIdentity::Edit',
        action: ɵ0$3,
        permission: 'AbpIdentity.Users.Update',
    },
    {
        text: 'AbpIdentity::Permissions',
        action: ɵ1$2,
        permission: 'AbpIdentity.Users.ManagePermissions',
    },
    {
        text: 'AbpIdentity::Delete',
        action: ɵ2$1,
        permission: 'AbpIdentity.Users.Delete',
    },
]);

const DEFAULT_USERS_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'userName',
        displayName: 'AbpIdentity::UserName',
        sortable: true,
        columnWidth: 250,
    },
    {
        type: "string" /* String */,
        name: 'email',
        displayName: 'AbpIdentity::EmailAddress',
        sortable: true,
        columnWidth: 250,
    },
    {
        type: "string" /* String */,
        name: 'phoneNumber',
        displayName: 'AbpIdentity::PhoneNumber',
        sortable: true,
        columnWidth: 250,
    },
]);

const ɵ0$2 = () => [Validators.required, Validators.maxLength(256)], ɵ1$1 = data => [Validators.required, ...getPasswordValidators({ get: data.getInjected })], ɵ2 = () => [Validators.maxLength(64)], ɵ3 = () => [Validators.maxLength(64)], ɵ4 = () => [Validators.required, Validators.maxLength(256), Validators.email], ɵ5 = () => [Validators.maxLength(16)];
const DEFAULT_USERS_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'userName',
        displayName: 'AbpIdentity::UserName',
        id: 'user-name',
        validators: ɵ0$2,
    },
    {
        type: "password" /* Password */,
        name: 'password',
        displayName: 'AbpIdentity::Password',
        id: 'password',
        autocomplete: 'new-password',
        validators: ɵ1$1,
    },
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentity::DisplayName:Name',
        id: 'name',
        validators: ɵ2,
    },
    {
        type: "string" /* String */,
        name: 'surname',
        displayName: 'AbpIdentity::DisplayName:Surname',
        id: 'surname',
        validators: ɵ3,
    },
    {
        type: "email" /* Email */,
        name: 'email',
        displayName: 'AbpIdentity::EmailAddress',
        id: 'email',
        validators: ɵ4,
    },
    {
        type: "string" /* String */,
        name: 'phoneNumber',
        displayName: 'AbpIdentity::PhoneNumber',
        id: 'phone-number',
        validators: ɵ5,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'lockoutEnabled',
        displayName: 'AbpIdentity::DisplayName:LockoutEnabled',
        id: 'lockout-checkbox',
        defaultValue: true,
    },
]);
const ɵ6 = prop => prop.name !== 'password';
const DEFAULT_USERS_EDIT_FORM_PROPS = DEFAULT_USERS_CREATE_FORM_PROPS.filter(ɵ6);

const ɵ0$1 = data => {
    const component = data.getInjected(UsersComponent);
    component.add();
};
const DEFAULT_USERS_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'AbpIdentity::NewUser',
        action: ɵ0$1,
        permission: 'AbpIdentity.Users.Create',
        icon: 'fa fa-plus',
    },
]);

const DEFAULT_IDENTITY_ENTITY_ACTIONS = {
    ["Identity.RolesComponent" /* Roles */]: DEFAULT_ROLES_ENTITY_ACTIONS,
    ["Identity.UsersComponent" /* Users */]: DEFAULT_USERS_ENTITY_ACTIONS,
};
const DEFAULT_IDENTITY_TOOLBAR_ACTIONS = {
    ["Identity.RolesComponent" /* Roles */]: DEFAULT_ROLES_TOOLBAR_ACTIONS,
    ["Identity.UsersComponent" /* Users */]: DEFAULT_USERS_TOOLBAR_ACTIONS,
};
const DEFAULT_IDENTITY_ENTITY_PROPS = {
    ["Identity.RolesComponent" /* Roles */]: DEFAULT_ROLES_ENTITY_PROPS,
    ["Identity.UsersComponent" /* Users */]: DEFAULT_USERS_ENTITY_PROPS,
};
const DEFAULT_IDENTITY_CREATE_FORM_PROPS = {
    ["Identity.RolesComponent" /* Roles */]: DEFAULT_ROLES_CREATE_FORM_PROPS,
    ["Identity.UsersComponent" /* Users */]: DEFAULT_USERS_CREATE_FORM_PROPS,
};
const DEFAULT_IDENTITY_EDIT_FORM_PROPS = {
    ["Identity.RolesComponent" /* Roles */]: DEFAULT_ROLES_EDIT_FORM_PROPS,
    ["Identity.UsersComponent" /* Users */]: DEFAULT_USERS_EDIT_FORM_PROPS,
};
const IDENTITY_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('IDENTITY_ENTITY_ACTION_CONTRIBUTORS');
const IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS');
const IDENTITY_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('IDENTITY_ENTITY_PROP_CONTRIBUTORS');
const IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS = new InjectionToken('IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS');
const IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS = new InjectionToken('IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS');

class IdentityExtensionsGuard {
    constructor(injector) {
        this.injector = injector;
    }
    canActivate() {
        const extensions = this.injector.get(ExtensionsService);
        const actionContributors = this.injector.get(IDENTITY_ENTITY_ACTION_CONTRIBUTORS, null) || {};
        const toolbarContributors = this.injector.get(IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};
        const propContributors = this.injector.get(IDENTITY_ENTITY_PROP_CONTRIBUTORS, null) || {};
        const createFormContributors = this.injector.get(IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};
        const editFormContributors = this.injector.get(IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};
        const configState = this.injector.get(ConfigStateService);
        return getObjectExtensionEntitiesFromStore(configState, 'Identity').pipe(map(entities => ({
            ["Identity.RolesComponent" /* Roles */]: entities.Role,
            ["Identity.UsersComponent" /* Users */]: entities.User,
        })), mapEntitiesToContributors(configState, 'AbpIdentity'), tap(objectExtensionContributors => {
            mergeWithDefaultActions(extensions.entityActions, DEFAULT_IDENTITY_ENTITY_ACTIONS, actionContributors);
            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_IDENTITY_TOOLBAR_ACTIONS, toolbarContributors);
            mergeWithDefaultProps(extensions.entityProps, DEFAULT_IDENTITY_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
            mergeWithDefaultProps(extensions.createFormProps, DEFAULT_IDENTITY_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);
            mergeWithDefaultProps(extensions.editFormProps, DEFAULT_IDENTITY_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);
        }), mapTo(true));
    }
}
IdentityExtensionsGuard.ɵfac = function IdentityExtensionsGuard_Factory(t) { return new (t || IdentityExtensionsGuard)(ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
IdentityExtensionsGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: IdentityExtensionsGuard, factory: IdentityExtensionsGuard.ɵfac });
IdentityExtensionsGuard.ctorParameters = () => [
    { type: Injector }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IdentityExtensionsGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Injector }]; }, null); })();

const ɵ0 = {
    requiredPolicy: 'AbpIdentity.Roles',
    replaceableComponent: {
        key: "Identity.RolesComponent" /* Roles */,
        defaultComponent: RolesComponent,
    },
}, ɵ1 = {
    requiredPolicy: 'AbpIdentity.Users',
    replaceableComponent: {
        key: "Identity.UsersComponent" /* Users */,
        defaultComponent: UsersComponent,
    },
};
const routes = [
    { path: '', redirectTo: 'roles', pathMatch: 'full' },
    {
        path: '',
        component: DynamicLayoutComponent,
        canActivate: [AuthGuard, PermissionGuard, IdentityExtensionsGuard],
        children: [
            {
                path: 'roles',
                component: ReplaceableRouteContainerComponent,
                data: ɵ0,
            },
            {
                path: 'users',
                component: ReplaceableRouteContainerComponent,
                data: ɵ1,
            },
        ],
    },
];
class IdentityRoutingModule {
}
IdentityRoutingModule.ɵfac = function IdentityRoutingModule_Factory(t) { return new (t || IdentityRoutingModule)(); };
IdentityRoutingModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: IdentityRoutingModule });
IdentityRoutingModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[RouterModule.forChild(routes)], RouterModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IdentityRoutingModule, [{
        type: NgModule,
        args: [{
                imports: [RouterModule.forChild(routes)],
                exports: [RouterModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IdentityRoutingModule, { imports: function () { return [ɵngcc10.RouterModule]; }, exports: function () { return [RouterModule]; } }); })();

class IdentityModule {
    static forChild(options = {}) {
        return {
            ngModule: IdentityModule,
            providers: [
                {
                    provide: IDENTITY_ENTITY_ACTION_CONTRIBUTORS,
                    useValue: options.entityActionContributors,
                },
                {
                    provide: IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS,
                    useValue: options.toolbarActionContributors,
                },
                {
                    provide: IDENTITY_ENTITY_PROP_CONTRIBUTORS,
                    useValue: options.entityPropContributors,
                },
                {
                    provide: IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS,
                    useValue: options.createFormPropContributors,
                },
                {
                    provide: IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS,
                    useValue: options.editFormPropContributors,
                },
                IdentityExtensionsGuard,
            ],
        };
    }
    static forLazy(options = {}) {
        return new LazyModuleFactory(IdentityModule.forChild(options));
    }
}
IdentityModule.ɵfac = function IdentityModule_Factory(t) { return new (t || IdentityModule)(); };
IdentityModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: IdentityModule });
IdentityModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            NgxsModule.forFeature([IdentityState]),
            CoreModule,
            IdentityRoutingModule,
            NgbNavModule,
            ThemeSharedModule,
            UiExtensionsModule,
            NgbDropdownModule,
            PermissionManagementModule,
            NgxValidateCoreModule,
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IdentityModule, [{
        type: NgModule,
        args: [{
                declarations: [RolesComponent, UsersComponent],
                exports: [RolesComponent, UsersComponent],
                imports: [
                    NgxsModule.forFeature([IdentityState]),
                    CoreModule,
                    IdentityRoutingModule,
                    NgbNavModule,
                    ThemeSharedModule,
                    UiExtensionsModule,
                    NgbDropdownModule,
                    PermissionManagementModule,
                    NgxValidateCoreModule,
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IdentityModule, { declarations: function () { return [RolesComponent, UsersComponent]; }, imports: function () { return [ɵngcc3.ɵbc, CoreModule, IdentityRoutingModule, NgbNavModule,
        ThemeSharedModule,
        UiExtensionsModule,
        NgbDropdownModule,
        PermissionManagementModule,
        NgxValidateCoreModule]; }, exports: function () { return [RolesComponent, UsersComponent]; } }); })();

class IdentityUserLookupService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.findById = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/lookup/${id}`,
        }, { apiName: this.apiName });
        this.findByUserName = (userName) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/lookup/by-username/${userName}`,
        }, { apiName: this.apiName });
        this.getCount = (input) => this.restService.request({
            method: 'GET',
            url: '/api/identity/users/lookup/count',
            params: { filter: input.filter },
        }, { apiName: this.apiName });
        this.search = (input) => this.restService.request({
            method: 'GET',
            url: '/api/identity/users/lookup/search',
            params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
    }
}
IdentityUserLookupService.ɵfac = function IdentityUserLookupService_Factory(t) { return new (t || IdentityUserLookupService)(ɵngcc0.ɵɵinject(ɵngcc1.RestService)); };
IdentityUserLookupService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IdentityUserLookupService_Factory() { return new IdentityUserLookupService(i0.ɵɵinject(i1.RestService)); }, token: IdentityUserLookupService, providedIn: "root" });
IdentityUserLookupService.ctorParameters = () => [
    { type: RestService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IdentityUserLookupService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.RestService }]; }, null); })();

class ProfileService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.changePassword = (input) => this.restService.request({
            method: 'POST',
            url: '/api/identity/my-profile/change-password',
            body: input,
        }, { apiName: this.apiName });
        this.get = () => this.restService.request({
            method: 'GET',
            url: '/api/identity/my-profile',
        }, { apiName: this.apiName });
        this.update = (input) => this.restService.request({
            method: 'PUT',
            url: '/api/identity/my-profile',
            body: input,
        }, { apiName: this.apiName });
    }
}
ProfileService.ɵfac = function ProfileService_Factory(t) { return new (t || ProfileService)(ɵngcc0.ɵɵinject(ɵngcc1.RestService)); };
ProfileService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProfileService_Factory() { return new ProfileService(i0.ɵɵinject(i1.RestService)); }, token: ProfileService, providedIn: "root" });
ProfileService.ctorParameters = () => [
    { type: RestService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProfileService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.RestService }]; }, null); })();

class IdentityStateService {
    constructor(store) {
        this.store = store;
    }
    getRoles() {
        return this.store.selectSnapshot(IdentityState.getRoles);
    }
    getRolesTotalCount() {
        return this.store.selectSnapshot(IdentityState.getRolesTotalCount);
    }
    getUsers() {
        return this.store.selectSnapshot(IdentityState.getUsers);
    }
    getUsersTotalCount() {
        return this.store.selectSnapshot(IdentityState.getUsersTotalCount);
    }
    dispatchGetRoles(...args) {
        return this.store.dispatch(new GetRoles(...args));
    }
    dispatchGetRoleById(...args) {
        return this.store.dispatch(new GetRoleById(...args));
    }
    dispatchDeleteRole(...args) {
        return this.store.dispatch(new DeleteRole(...args));
    }
    dispatchCreateRole(...args) {
        return this.store.dispatch(new CreateRole(...args));
    }
    dispatchUpdateRole(...args) {
        return this.store.dispatch(new UpdateRole(...args));
    }
    dispatchGetUsers(...args) {
        return this.store.dispatch(new GetUsers(...args));
    }
    dispatchGetUserById(...args) {
        return this.store.dispatch(new GetUserById(...args));
    }
    dispatchDeleteUser(...args) {
        return this.store.dispatch(new DeleteUser(...args));
    }
    dispatchCreateUser(...args) {
        return this.store.dispatch(new CreateUser(...args));
    }
    dispatchUpdateUser(...args) {
        return this.store.dispatch(new UpdateUser(...args));
    }
    dispatchGetUserRoles(...args) {
        return this.store.dispatch(new GetUserRoles(...args));
    }
}
IdentityStateService.ɵfac = function IdentityStateService_Factory(t) { return new (t || IdentityStateService)(ɵngcc0.ɵɵinject(ɵngcc3.Store)); };
IdentityStateService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IdentityStateService_Factory() { return new IdentityStateService(i0.ɵɵinject(i1$1.Store)); }, token: IdentityStateService, providedIn: "root" });
IdentityStateService.ctorParameters = () => [
    { type: Store }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IdentityStateService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc3.Store }]; }, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { CreateRole, CreateUser, DEFAULT_IDENTITY_CREATE_FORM_PROPS, DEFAULT_IDENTITY_EDIT_FORM_PROPS, DEFAULT_IDENTITY_ENTITY_ACTIONS, DEFAULT_IDENTITY_ENTITY_PROPS, DEFAULT_IDENTITY_TOOLBAR_ACTIONS, DeleteRole, DeleteUser, GetRoleById, GetRoles, GetUserById, GetUserRoles, GetUsers, IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS, IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS, IDENTITY_ENTITY_ACTION_CONTRIBUTORS, IDENTITY_ENTITY_PROP_CONTRIBUTORS, IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS, IdentityExtensionsGuard, IdentityModule, IdentityRoleService, IdentityState, IdentityStateService, IdentityUserLookupService, IdentityUserService, ProfileService, RolesComponent, UpdateRole, UpdateUser, UsersComponent, RolesComponent as ɵa, IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS as ɵba, IdentityState as ɵc, IdentityUserService as ɵd, IdentityRoleService as ɵe, GetRoles as ɵf, GetRoleById as ɵg, DeleteRole as ɵh, CreateRole as ɵi, UpdateRole as ɵj, GetUsers as ɵk, GetUserById as ɵl, DeleteUser as ɵm, CreateUser as ɵn, UpdateUser as ɵo, GetUserRoles as ɵp, UsersComponent as ɵt, IdentityRoutingModule as ɵu, IdentityExtensionsGuard as ɵv, IDENTITY_ENTITY_ACTION_CONTRIBUTORS as ɵw, IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS as ɵx, IDENTITY_ENTITY_PROP_CONTRIBUTORS as ɵy, IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS as ɵz };

//# sourceMappingURL=abp-ng.identity.js.map