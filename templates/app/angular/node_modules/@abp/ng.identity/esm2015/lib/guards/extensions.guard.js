import { ConfigStateService } from '@abp/ng.core';
import { ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps, } from '@abp/ng.theme.shared/extensions';
import { Injectable, Injector } from '@angular/core';
import { map, mapTo, tap } from 'rxjs/operators';
import { DEFAULT_IDENTITY_CREATE_FORM_PROPS, DEFAULT_IDENTITY_EDIT_FORM_PROPS, DEFAULT_IDENTITY_ENTITY_ACTIONS, DEFAULT_IDENTITY_ENTITY_PROPS, DEFAULT_IDENTITY_TOOLBAR_ACTIONS, IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS, IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS, IDENTITY_ENTITY_ACTION_CONTRIBUTORS, IDENTITY_ENTITY_PROP_CONTRIBUTORS, IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS, } from '../tokens/extensions.token';
export class IdentityExtensionsGuard {
    constructor(injector) {
        this.injector = injector;
    }
    canActivate() {
        const extensions = this.injector.get(ExtensionsService);
        const actionContributors = this.injector.get(IDENTITY_ENTITY_ACTION_CONTRIBUTORS, null) || {};
        const toolbarContributors = this.injector.get(IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};
        const propContributors = this.injector.get(IDENTITY_ENTITY_PROP_CONTRIBUTORS, null) || {};
        const createFormContributors = this.injector.get(IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};
        const editFormContributors = this.injector.get(IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};
        const configState = this.injector.get(ConfigStateService);
        return getObjectExtensionEntitiesFromStore(configState, 'Identity').pipe(map(entities => ({
            ["Identity.RolesComponent" /* Roles */]: entities.Role,
            ["Identity.UsersComponent" /* Users */]: entities.User,
        })), mapEntitiesToContributors(configState, 'AbpIdentity'), tap(objectExtensionContributors => {
            mergeWithDefaultActions(extensions.entityActions, DEFAULT_IDENTITY_ENTITY_ACTIONS, actionContributors);
            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_IDENTITY_TOOLBAR_ACTIONS, toolbarContributors);
            mergeWithDefaultProps(extensions.entityProps, DEFAULT_IDENTITY_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
            mergeWithDefaultProps(extensions.createFormProps, DEFAULT_IDENTITY_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);
            mergeWithDefaultProps(extensions.editFormProps, DEFAULT_IDENTITY_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);
        }), mapTo(true));
    }
}
IdentityExtensionsGuard.decorators = [
    { type: Injectable }
];
IdentityExtensionsGuard.ctorParameters = () => [
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9ucy5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2lkZW50aXR5L3NyYy9saWIvZ3VhcmRzL2V4dGVuc2lvbnMuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2xELE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsbUNBQW1DLEVBQ25DLHlCQUF5QixFQUN6Qix1QkFBdUIsRUFDdkIscUJBQXFCLEdBQ3RCLE1BQU0saUNBQWlDLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHckQsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFTakQsT0FBTyxFQUNMLGtDQUFrQyxFQUNsQyxnQ0FBZ0MsRUFDaEMsK0JBQStCLEVBQy9CLDZCQUE2QixFQUM3QixnQ0FBZ0MsRUFDaEMsc0NBQXNDLEVBQ3RDLG9DQUFvQyxFQUNwQyxtQ0FBbUMsRUFDbkMsaUNBQWlDLEVBQ2pDLG9DQUFvQyxHQUNyQyxNQUFNLDRCQUE0QixDQUFDO0FBR3BDLE1BQU0sT0FBTyx1QkFBdUI7SUFDbEMsWUFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUFHLENBQUM7SUFFMUMsV0FBVztRQUNULE1BQU0sVUFBVSxHQUFzQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzNFLE1BQU0sa0JBQWtCLEdBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLG1DQUFtQyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyRSxNQUFNLG1CQUFtQixHQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEUsTUFBTSxnQkFBZ0IsR0FDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsaUNBQWlDLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ25FLE1BQU0sc0JBQXNCLEdBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN4RSxNQUFNLG9CQUFvQixHQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFdEUsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMxRCxPQUFPLG1DQUFtQyxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQ3RFLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDZix1Q0FBMkIsRUFBRSxRQUFRLENBQUMsSUFBSTtZQUMxQyx1Q0FBMkIsRUFBRSxRQUFRLENBQUMsSUFBSTtTQUMzQyxDQUFDLENBQUMsRUFDSCx5QkFBeUIsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLEVBQ3JELEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxFQUFFO1lBQ2hDLHVCQUF1QixDQUNyQixVQUFVLENBQUMsYUFBYSxFQUN4QiwrQkFBK0IsRUFDL0Isa0JBQWtCLENBQ25CLENBQUM7WUFDRix1QkFBdUIsQ0FDckIsVUFBVSxDQUFDLGNBQWMsRUFDekIsZ0NBQWdDLEVBQ2hDLG1CQUFtQixDQUNwQixDQUFDO1lBQ0YscUJBQXFCLENBQ25CLFVBQVUsQ0FBQyxXQUFXLEVBQ3RCLDZCQUE2QixFQUM3QiwyQkFBMkIsQ0FBQyxJQUFJLEVBQ2hDLGdCQUFnQixDQUNqQixDQUFDO1lBQ0YscUJBQXFCLENBQ25CLFVBQVUsQ0FBQyxlQUFlLEVBQzFCLGtDQUFrQyxFQUNsQywyQkFBMkIsQ0FBQyxVQUFVLEVBQ3RDLHNCQUFzQixDQUN2QixDQUFDO1lBQ0YscUJBQXFCLENBQ25CLFVBQVUsQ0FBQyxhQUFhLEVBQ3hCLGdDQUFnQyxFQUNoQywyQkFBMkIsQ0FBQyxRQUFRLEVBQ3BDLG9CQUFvQixDQUNyQixDQUFDO1FBQ0osQ0FBQyxDQUFDLEVBQ0YsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUNaLENBQUM7SUFDSixDQUFDOzs7WUF4REYsVUFBVTs7O1lBekJVLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25maWdTdGF0ZVNlcnZpY2UgfSBmcm9tICdAYWJwL25nLmNvcmUnO1xuaW1wb3J0IHtcbiAgRXh0ZW5zaW9uc1NlcnZpY2UsXG4gIGdldE9iamVjdEV4dGVuc2lvbkVudGl0aWVzRnJvbVN0b3JlLFxuICBtYXBFbnRpdGllc1RvQ29udHJpYnV0b3JzLFxuICBtZXJnZVdpdGhEZWZhdWx0QWN0aW9ucyxcbiAgbWVyZ2VXaXRoRGVmYXVsdFByb3BzLFxufSBmcm9tICdAYWJwL25nLnRoZW1lLnNoYXJlZC9leHRlbnNpb25zJztcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYW5BY3RpdmF0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIG1hcFRvLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBlSWRlbnRpdHlDb21wb25lbnRzIH0gZnJvbSAnLi4vZW51bXMvY29tcG9uZW50cyc7XG5pbXBvcnQge1xuICBJZGVudGl0eUNyZWF0ZUZvcm1Qcm9wQ29udHJpYnV0b3JzLFxuICBJZGVudGl0eUVkaXRGb3JtUHJvcENvbnRyaWJ1dG9ycyxcbiAgSWRlbnRpdHlFbnRpdHlBY3Rpb25Db250cmlidXRvcnMsXG4gIElkZW50aXR5RW50aXR5UHJvcENvbnRyaWJ1dG9ycyxcbiAgSWRlbnRpdHlUb29sYmFyQWN0aW9uQ29udHJpYnV0b3JzLFxufSBmcm9tICcuLi9tb2RlbHMvY29uZmlnLW9wdGlvbnMnO1xuaW1wb3J0IHtcbiAgREVGQVVMVF9JREVOVElUWV9DUkVBVEVfRk9STV9QUk9QUyxcbiAgREVGQVVMVF9JREVOVElUWV9FRElUX0ZPUk1fUFJPUFMsXG4gIERFRkFVTFRfSURFTlRJVFlfRU5USVRZX0FDVElPTlMsXG4gIERFRkFVTFRfSURFTlRJVFlfRU5USVRZX1BST1BTLFxuICBERUZBVUxUX0lERU5USVRZX1RPT0xCQVJfQUNUSU9OUyxcbiAgSURFTlRJVFlfQ1JFQVRFX0ZPUk1fUFJPUF9DT05UUklCVVRPUlMsXG4gIElERU5USVRZX0VESVRfRk9STV9QUk9QX0NPTlRSSUJVVE9SUyxcbiAgSURFTlRJVFlfRU5USVRZX0FDVElPTl9DT05UUklCVVRPUlMsXG4gIElERU5USVRZX0VOVElUWV9QUk9QX0NPTlRSSUJVVE9SUyxcbiAgSURFTlRJVFlfVE9PTEJBUl9BQ1RJT05fQ09OVFJJQlVUT1JTLFxufSBmcm9tICcuLi90b2tlbnMvZXh0ZW5zaW9ucy50b2tlbic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJZGVudGl0eUV4dGVuc2lvbnNHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHt9XG5cbiAgY2FuQWN0aXZhdGUoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgY29uc3QgZXh0ZW5zaW9uczogRXh0ZW5zaW9uc1NlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChFeHRlbnNpb25zU2VydmljZSk7XG4gICAgY29uc3QgYWN0aW9uQ29udHJpYnV0b3JzOiBJZGVudGl0eUVudGl0eUFjdGlvbkNvbnRyaWJ1dG9ycyA9XG4gICAgICB0aGlzLmluamVjdG9yLmdldChJREVOVElUWV9FTlRJVFlfQUNUSU9OX0NPTlRSSUJVVE9SUywgbnVsbCkgfHwge307XG4gICAgY29uc3QgdG9vbGJhckNvbnRyaWJ1dG9yczogSWRlbnRpdHlUb29sYmFyQWN0aW9uQ29udHJpYnV0b3JzID1cbiAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KElERU5USVRZX1RPT0xCQVJfQUNUSU9OX0NPTlRSSUJVVE9SUywgbnVsbCkgfHwge307XG4gICAgY29uc3QgcHJvcENvbnRyaWJ1dG9yczogSWRlbnRpdHlFbnRpdHlQcm9wQ29udHJpYnV0b3JzID1cbiAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KElERU5USVRZX0VOVElUWV9QUk9QX0NPTlRSSUJVVE9SUywgbnVsbCkgfHwge307XG4gICAgY29uc3QgY3JlYXRlRm9ybUNvbnRyaWJ1dG9yczogSWRlbnRpdHlDcmVhdGVGb3JtUHJvcENvbnRyaWJ1dG9ycyA9XG4gICAgICB0aGlzLmluamVjdG9yLmdldChJREVOVElUWV9DUkVBVEVfRk9STV9QUk9QX0NPTlRSSUJVVE9SUywgbnVsbCkgfHwge307XG4gICAgY29uc3QgZWRpdEZvcm1Db250cmlidXRvcnM6IElkZW50aXR5RWRpdEZvcm1Qcm9wQ29udHJpYnV0b3JzID1cbiAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KElERU5USVRZX0VESVRfRk9STV9QUk9QX0NPTlRSSUJVVE9SUywgbnVsbCkgfHwge307XG5cbiAgICBjb25zdCBjb25maWdTdGF0ZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KENvbmZpZ1N0YXRlU2VydmljZSk7XG4gICAgcmV0dXJuIGdldE9iamVjdEV4dGVuc2lvbkVudGl0aWVzRnJvbVN0b3JlKGNvbmZpZ1N0YXRlLCAnSWRlbnRpdHknKS5waXBlKFxuICAgICAgbWFwKGVudGl0aWVzID0+ICh7XG4gICAgICAgIFtlSWRlbnRpdHlDb21wb25lbnRzLlJvbGVzXTogZW50aXRpZXMuUm9sZSxcbiAgICAgICAgW2VJZGVudGl0eUNvbXBvbmVudHMuVXNlcnNdOiBlbnRpdGllcy5Vc2VyLFxuICAgICAgfSkpLFxuICAgICAgbWFwRW50aXRpZXNUb0NvbnRyaWJ1dG9ycyhjb25maWdTdGF0ZSwgJ0FicElkZW50aXR5JyksXG4gICAgICB0YXAob2JqZWN0RXh0ZW5zaW9uQ29udHJpYnV0b3JzID0+IHtcbiAgICAgICAgbWVyZ2VXaXRoRGVmYXVsdEFjdGlvbnMoXG4gICAgICAgICAgZXh0ZW5zaW9ucy5lbnRpdHlBY3Rpb25zLFxuICAgICAgICAgIERFRkFVTFRfSURFTlRJVFlfRU5USVRZX0FDVElPTlMsXG4gICAgICAgICAgYWN0aW9uQ29udHJpYnV0b3JzLFxuICAgICAgICApO1xuICAgICAgICBtZXJnZVdpdGhEZWZhdWx0QWN0aW9ucyhcbiAgICAgICAgICBleHRlbnNpb25zLnRvb2xiYXJBY3Rpb25zLFxuICAgICAgICAgIERFRkFVTFRfSURFTlRJVFlfVE9PTEJBUl9BQ1RJT05TLFxuICAgICAgICAgIHRvb2xiYXJDb250cmlidXRvcnMsXG4gICAgICAgICk7XG4gICAgICAgIG1lcmdlV2l0aERlZmF1bHRQcm9wcyhcbiAgICAgICAgICBleHRlbnNpb25zLmVudGl0eVByb3BzLFxuICAgICAgICAgIERFRkFVTFRfSURFTlRJVFlfRU5USVRZX1BST1BTLFxuICAgICAgICAgIG9iamVjdEV4dGVuc2lvbkNvbnRyaWJ1dG9ycy5wcm9wLFxuICAgICAgICAgIHByb3BDb250cmlidXRvcnMsXG4gICAgICAgICk7XG4gICAgICAgIG1lcmdlV2l0aERlZmF1bHRQcm9wcyhcbiAgICAgICAgICBleHRlbnNpb25zLmNyZWF0ZUZvcm1Qcm9wcyxcbiAgICAgICAgICBERUZBVUxUX0lERU5USVRZX0NSRUFURV9GT1JNX1BST1BTLFxuICAgICAgICAgIG9iamVjdEV4dGVuc2lvbkNvbnRyaWJ1dG9ycy5jcmVhdGVGb3JtLFxuICAgICAgICAgIGNyZWF0ZUZvcm1Db250cmlidXRvcnMsXG4gICAgICAgICk7XG4gICAgICAgIG1lcmdlV2l0aERlZmF1bHRQcm9wcyhcbiAgICAgICAgICBleHRlbnNpb25zLmVkaXRGb3JtUHJvcHMsXG4gICAgICAgICAgREVGQVVMVF9JREVOVElUWV9FRElUX0ZPUk1fUFJPUFMsXG4gICAgICAgICAgb2JqZWN0RXh0ZW5zaW9uQ29udHJpYnV0b3JzLmVkaXRGb3JtLFxuICAgICAgICAgIGVkaXRGb3JtQ29udHJpYnV0b3JzLFxuICAgICAgICApO1xuICAgICAgfSksXG4gICAgICBtYXBUbyh0cnVlKSxcbiAgICApO1xuICB9XG59XG4iXX0=