import { getPasswordValidators } from '@abp/ng.theme.shared';
import { FormProp } from '@abp/ng.theme.shared/extensions';
import { Validators } from '@angular/forms';
const ɵ0 = () => [Validators.required, Validators.maxLength(256)], ɵ1 = data => [Validators.required, ...getPasswordValidators({ get: data.getInjected })], ɵ2 = () => [Validators.maxLength(64)], ɵ3 = () => [Validators.maxLength(64)], ɵ4 = () => [Validators.required, Validators.maxLength(256), Validators.email], ɵ5 = () => [Validators.maxLength(16)];
export const DEFAULT_USERS_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'userName',
        displayName: 'AbpIdentity::UserName',
        id: 'user-name',
        validators: ɵ0,
    },
    {
        type: "password" /* Password */,
        name: 'password',
        displayName: 'AbpIdentity::Password',
        id: 'password',
        autocomplete: 'new-password',
        validators: ɵ1,
    },
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpIdentity::DisplayName:Name',
        id: 'name',
        validators: ɵ2,
    },
    {
        type: "string" /* String */,
        name: 'surname',
        displayName: 'AbpIdentity::DisplayName:Surname',
        id: 'surname',
        validators: ɵ3,
    },
    {
        type: "email" /* Email */,
        name: 'email',
        displayName: 'AbpIdentity::EmailAddress',
        id: 'email',
        validators: ɵ4,
    },
    {
        type: "string" /* String */,
        name: 'phoneNumber',
        displayName: 'AbpIdentity::PhoneNumber',
        id: 'phone-number',
        validators: ɵ5,
    },
    {
        type: "boolean" /* Boolean */,
        name: 'lockoutEnabled',
        displayName: 'AbpIdentity::DisplayName:LockoutEnabled',
        id: 'lockout-checkbox',
        defaultValue: true,
    },
]);
const ɵ6 = prop => prop.name !== 'password';
export const DEFAULT_USERS_EDIT_FORM_PROPS = DEFAULT_USERS_CREATE_FORM_PROPS.filter(ɵ6);
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC11c2Vycy1mb3JtLXByb3BzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvaWRlbnRpdHkvc3JjL2xpYi9kZWZhdWx0cy9kZWZhdWx0LXVzZXJzLWZvcm0tcHJvcHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDN0QsT0FBTyxFQUFhLFFBQVEsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztXQVM1QixHQUFHLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQVF0RCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxHQUFHLHFCQUFxQixDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLE9BT2xGLEdBQUcsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQU9oQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsT0FPaEMsR0FBRyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQU94RSxHQUFHLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7QUExQ2hELE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQWtCO0lBQ2xGO1FBQ0UsSUFBSSx1QkFBa0I7UUFDdEIsSUFBSSxFQUFFLFVBQVU7UUFDaEIsV0FBVyxFQUFFLHVCQUF1QjtRQUNwQyxFQUFFLEVBQUUsV0FBVztRQUNmLFVBQVUsSUFBd0Q7S0FDbkU7SUFDRDtRQUNFLElBQUksMkJBQW9CO1FBQ3hCLElBQUksRUFBRSxVQUFVO1FBQ2hCLFdBQVcsRUFBRSx1QkFBdUI7UUFDcEMsRUFBRSxFQUFFLFVBQVU7UUFDZCxZQUFZLEVBQUUsY0FBYztRQUM1QixVQUFVLElBQW9GO0tBQy9GO0lBQ0Q7UUFDRSxJQUFJLHVCQUFrQjtRQUN0QixJQUFJLEVBQUUsTUFBTTtRQUNaLFdBQVcsRUFBRSwrQkFBK0I7UUFDNUMsRUFBRSxFQUFFLE1BQU07UUFDVixVQUFVLElBQWtDO0tBQzdDO0lBQ0Q7UUFDRSxJQUFJLHVCQUFrQjtRQUN0QixJQUFJLEVBQUUsU0FBUztRQUNmLFdBQVcsRUFBRSxrQ0FBa0M7UUFDL0MsRUFBRSxFQUFFLFNBQVM7UUFDYixVQUFVLElBQWtDO0tBQzdDO0lBQ0Q7UUFDRSxJQUFJLHFCQUFpQjtRQUNyQixJQUFJLEVBQUUsT0FBTztRQUNiLFdBQVcsRUFBRSwyQkFBMkI7UUFDeEMsRUFBRSxFQUFFLE9BQU87UUFDWCxVQUFVLElBQTBFO0tBQ3JGO0lBQ0Q7UUFDRSxJQUFJLHVCQUFrQjtRQUN0QixJQUFJLEVBQUUsYUFBYTtRQUNuQixXQUFXLEVBQUUsMEJBQTBCO1FBQ3ZDLEVBQUUsRUFBRSxjQUFjO1FBQ2xCLFVBQVUsSUFBa0M7S0FDN0M7SUFDRDtRQUNFLElBQUkseUJBQW1CO1FBQ3ZCLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsV0FBVyxFQUFFLHlDQUF5QztRQUN0RCxFQUFFLEVBQUUsa0JBQWtCO1FBQ3RCLFlBQVksRUFBRSxJQUFJO0tBQ25CO0NBQ0YsQ0FBQyxDQUFDO1dBR0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVU7QUFEbEMsTUFBTSxDQUFDLE1BQU0sNkJBQTZCLEdBQUcsK0JBQStCLENBQUMsTUFBTSxJQUVsRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0UGFzc3dvcmRWYWxpZGF0b3JzIH0gZnJvbSAnQGFicC9uZy50aGVtZS5zaGFyZWQnO1xuaW1wb3J0IHsgZVByb3BUeXBlLCBGb3JtUHJvcCB9IGZyb20gJ0BhYnAvbmcudGhlbWUuc2hhcmVkL2V4dGVuc2lvbnMnO1xuaW1wb3J0IHsgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IElkZW50aXR5VXNlckR0byB9IGZyb20gJy4uL3Byb3h5L2lkZW50aXR5L21vZGVscyc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1VTRVJTX0NSRUFURV9GT1JNX1BST1BTID0gRm9ybVByb3AuY3JlYXRlTWFueTxJZGVudGl0eVVzZXJEdG8+KFtcbiAge1xuICAgIHR5cGU6IGVQcm9wVHlwZS5TdHJpbmcsXG4gICAgbmFtZTogJ3VzZXJOYW1lJyxcbiAgICBkaXNwbGF5TmFtZTogJ0FicElkZW50aXR5OjpVc2VyTmFtZScsXG4gICAgaWQ6ICd1c2VyLW5hbWUnLFxuICAgIHZhbGlkYXRvcnM6ICgpID0+IFtWYWxpZGF0b3JzLnJlcXVpcmVkLCBWYWxpZGF0b3JzLm1heExlbmd0aCgyNTYpXSxcbiAgfSxcbiAge1xuICAgIHR5cGU6IGVQcm9wVHlwZS5QYXNzd29yZCxcbiAgICBuYW1lOiAncGFzc3dvcmQnLFxuICAgIGRpc3BsYXlOYW1lOiAnQWJwSWRlbnRpdHk6OlBhc3N3b3JkJyxcbiAgICBpZDogJ3Bhc3N3b3JkJyxcbiAgICBhdXRvY29tcGxldGU6ICduZXctcGFzc3dvcmQnLFxuICAgIHZhbGlkYXRvcnM6IGRhdGEgPT4gW1ZhbGlkYXRvcnMucmVxdWlyZWQsIC4uLmdldFBhc3N3b3JkVmFsaWRhdG9ycyh7IGdldDogZGF0YS5nZXRJbmplY3RlZCB9KV0sXG4gIH0sXG4gIHtcbiAgICB0eXBlOiBlUHJvcFR5cGUuU3RyaW5nLFxuICAgIG5hbWU6ICduYW1lJyxcbiAgICBkaXNwbGF5TmFtZTogJ0FicElkZW50aXR5OjpEaXNwbGF5TmFtZTpOYW1lJyxcbiAgICBpZDogJ25hbWUnLFxuICAgIHZhbGlkYXRvcnM6ICgpID0+IFtWYWxpZGF0b3JzLm1heExlbmd0aCg2NCldLFxuICB9LFxuICB7XG4gICAgdHlwZTogZVByb3BUeXBlLlN0cmluZyxcbiAgICBuYW1lOiAnc3VybmFtZScsXG4gICAgZGlzcGxheU5hbWU6ICdBYnBJZGVudGl0eTo6RGlzcGxheU5hbWU6U3VybmFtZScsXG4gICAgaWQ6ICdzdXJuYW1lJyxcbiAgICB2YWxpZGF0b3JzOiAoKSA9PiBbVmFsaWRhdG9ycy5tYXhMZW5ndGgoNjQpXSxcbiAgfSxcbiAge1xuICAgIHR5cGU6IGVQcm9wVHlwZS5FbWFpbCxcbiAgICBuYW1lOiAnZW1haWwnLFxuICAgIGRpc3BsYXlOYW1lOiAnQWJwSWRlbnRpdHk6OkVtYWlsQWRkcmVzcycsXG4gICAgaWQ6ICdlbWFpbCcsXG4gICAgdmFsaWRhdG9yczogKCkgPT4gW1ZhbGlkYXRvcnMucmVxdWlyZWQsIFZhbGlkYXRvcnMubWF4TGVuZ3RoKDI1NiksIFZhbGlkYXRvcnMuZW1haWxdLFxuICB9LFxuICB7XG4gICAgdHlwZTogZVByb3BUeXBlLlN0cmluZyxcbiAgICBuYW1lOiAncGhvbmVOdW1iZXInLFxuICAgIGRpc3BsYXlOYW1lOiAnQWJwSWRlbnRpdHk6OlBob25lTnVtYmVyJyxcbiAgICBpZDogJ3Bob25lLW51bWJlcicsXG4gICAgdmFsaWRhdG9yczogKCkgPT4gW1ZhbGlkYXRvcnMubWF4TGVuZ3RoKDE2KV0sXG4gIH0sXG4gIHtcbiAgICB0eXBlOiBlUHJvcFR5cGUuQm9vbGVhbixcbiAgICBuYW1lOiAnbG9ja291dEVuYWJsZWQnLFxuICAgIGRpc3BsYXlOYW1lOiAnQWJwSWRlbnRpdHk6OkRpc3BsYXlOYW1lOkxvY2tvdXRFbmFibGVkJyxcbiAgICBpZDogJ2xvY2tvdXQtY2hlY2tib3gnLFxuICAgIGRlZmF1bHRWYWx1ZTogdHJ1ZSxcbiAgfSxcbl0pO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9VU0VSU19FRElUX0ZPUk1fUFJPUFMgPSBERUZBVUxUX1VTRVJTX0NSRUFURV9GT1JNX1BST1BTLmZpbHRlcihcbiAgcHJvcCA9PiBwcm9wLm5hbWUgIT09ICdwYXNzd29yZCcsXG4pO1xuIl19