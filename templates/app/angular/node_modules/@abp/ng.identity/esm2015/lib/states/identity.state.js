import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Action, Selector, State } from '@ngxs/store';
import { pluck, tap } from 'rxjs/operators';
import { CreateRole, CreateUser, DeleteRole, DeleteUser, GetRoleById, GetRoles, GetUserById, GetUserRoles, GetUsers, UpdateRole, UpdateUser, } from '../actions/identity.actions';
import { IdentityRoleService } from '../proxy/identity/identity-role.service';
import { IdentityUserService } from '../proxy/identity/identity-user.service';
let IdentityState = class IdentityState {
    constructor(identityUserService, identityRoleService) {
        this.identityUserService = identityUserService;
        this.identityRoleService = identityRoleService;
    }
    static getRoles({ roles }) {
        return roles.items || [];
    }
    static getRolesTotalCount({ roles }) {
        return roles.totalCount || 0;
    }
    static getUsers({ users }) {
        return users.items || [];
    }
    static getUsersTotalCount({ users }) {
        return users.totalCount || 0;
    }
    getRoles({ patchState }, { payload }) {
        return this.identityRoleService.getList(payload).pipe(tap(roles => patchState({
            roles,
        })));
    }
    getRole({ patchState }, { payload }) {
        return this.identityRoleService.get(payload).pipe(tap(selectedRole => patchState({
            selectedRole,
        })));
    }
    deleteRole(_, { payload }) {
        return this.identityRoleService.delete(payload);
    }
    addRole(_, { payload }) {
        return this.identityRoleService.create(payload);
    }
    updateRole({ getState }, { payload }) {
        return this.identityRoleService.update(payload.id, Object.assign(Object.assign({}, getState().selectedRole), payload));
    }
    getUsers({ patchState }, { payload }) {
        return this.identityUserService.getList(payload).pipe(tap(users => patchState({
            users,
        })));
    }
    getUser({ patchState }, { payload }) {
        return this.identityUserService.get(payload).pipe(tap(selectedUser => patchState({
            selectedUser,
        })));
    }
    deleteUser(_, { payload }) {
        return this.identityUserService.delete(payload);
    }
    addUser(_, { payload }) {
        return this.identityUserService.create(payload);
    }
    updateUser({ getState }, { payload }) {
        return this.identityUserService.update(payload.id, Object.assign(Object.assign({}, getState().selectedUser), payload));
    }
    getUserRoles({ patchState }, { payload }) {
        return this.identityUserService.getRoles(payload).pipe(pluck('items'), tap(selectedUserRoles => patchState({
            selectedUserRoles,
        })));
    }
};
IdentityState.decorators = [
    { type: Injectable }
];
IdentityState.ctorParameters = () => [
    { type: IdentityUserService },
    { type: IdentityRoleService }
];
__decorate([
    Action(GetRoles)
], IdentityState.prototype, "getRoles", null);
__decorate([
    Action(GetRoleById)
], IdentityState.prototype, "getRole", null);
__decorate([
    Action(DeleteRole)
], IdentityState.prototype, "deleteRole", null);
__decorate([
    Action(CreateRole)
], IdentityState.prototype, "addRole", null);
__decorate([
    Action(UpdateRole)
], IdentityState.prototype, "updateRole", null);
__decorate([
    Action(GetUsers)
], IdentityState.prototype, "getUsers", null);
__decorate([
    Action(GetUserById)
], IdentityState.prototype, "getUser", null);
__decorate([
    Action(DeleteUser)
], IdentityState.prototype, "deleteUser", null);
__decorate([
    Action(CreateUser)
], IdentityState.prototype, "addUser", null);
__decorate([
    Action(UpdateUser)
], IdentityState.prototype, "updateUser", null);
__decorate([
    Action(GetUserRoles)
], IdentityState.prototype, "getUserRoles", null);
__decorate([
    Selector()
], IdentityState, "getRoles", null);
__decorate([
    Selector()
], IdentityState, "getRolesTotalCount", null);
__decorate([
    Selector()
], IdentityState, "getUsers", null);
__decorate([
    Selector()
], IdentityState, "getUsersTotalCount", null);
IdentityState = __decorate([
    State({
        name: 'IdentityState',
        defaults: { roles: {}, selectedRole: {}, users: {}, selectedUser: {} },
    })
], IdentityState);
export { IdentityState };
//# sourceMappingURL=data:application/json;base64,