import { RestService } from '@abp/ng.core';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
export class IdentityUserService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpIdentity';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: '/api/identity/users',
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/identity/users/${id}`,
        }, { apiName: this.apiName });
        this.findByEmail = (email) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/by-email/${email}`,
        }, { apiName: this.apiName });
        this.findByUsername = (username) => this.restService.request({
            method: 'GET',
            url: '/api/identity/users/by-username/{userName}',
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/${id}`,
        }, { apiName: this.apiName });
        this.getAssignableRoles = () => this.restService.request({
            method: 'GET',
            url: '/api/identity/users/assignable-roles',
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: '/api/identity/users',
            params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
        this.getRoles = (id) => this.restService.request({
            method: 'GET',
            url: `/api/identity/users/${id}/roles`,
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/users/${id}`,
            body: input,
        }, { apiName: this.apiName });
        this.updateRoles = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/identity/users/${id}/roles`,
            body: input,
        }, { apiName: this.apiName });
    }
}
IdentityUserService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IdentityUserService_Factory() { return new IdentityUserService(i0.ɵɵinject(i1.RestService)); }, token: IdentityUserService, providedIn: "root" });
IdentityUserService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
IdentityUserService.ctorParameters = () => [
    { type: RestService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpdHktdXNlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvaWRlbnRpdHkvc3JjL2xpYi9wcm94eS9pZGVudGl0eS9pZGVudGl0eS11c2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFLM0MsTUFBTSxPQUFPLG1CQUFtQjtJQTZFOUIsWUFBb0IsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUE1RTVDLFlBQU8sR0FBRyxhQUFhLENBQUM7UUFFeEIsV0FBTSxHQUFHLENBQUMsS0FBNEIsRUFBRSxFQUFFLENBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUF1QjtZQUM3QyxNQUFNLEVBQUUsTUFBTTtZQUNkLEdBQUcsRUFBRSxxQkFBcUI7WUFDMUIsSUFBSSxFQUFFLEtBQUs7U0FDWixFQUNELEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRTdCLFdBQU0sR0FBRyxDQUFDLEVBQVUsRUFBRSxFQUFFLENBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFZO1lBQ2xDLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLEdBQUcsRUFBRSx1QkFBdUIsRUFBRSxFQUFFO1NBQ2pDLEVBQ0QsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFFN0IsZ0JBQVcsR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQzlCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUF1QjtZQUM3QyxNQUFNLEVBQUUsS0FBSztZQUNiLEdBQUcsRUFBRSxnQ0FBZ0MsS0FBSyxFQUFFO1NBQzdDLEVBQ0QsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFFN0IsbUJBQWMsR0FBRyxDQUFDLFFBQWdCLEVBQUUsRUFBRSxDQUNwQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBdUI7WUFDN0MsTUFBTSxFQUFFLEtBQUs7WUFDYixHQUFHLEVBQUUsNENBQTRDO1NBQ2xELEVBQ0QsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFFN0IsUUFBRyxHQUFHLENBQUMsRUFBVSxFQUFFLEVBQUUsQ0FDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQXVCO1lBQzdDLE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLHVCQUF1QixFQUFFLEVBQUU7U0FDakMsRUFDRCxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUU3Qix1QkFBa0IsR0FBRyxHQUFHLEVBQUUsQ0FDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQXNDO1lBQzVELE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLHNDQUFzQztTQUM1QyxFQUNELEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRTdCLFlBQU8sR0FBRyxDQUFDLEtBQTRCLEVBQUUsRUFBRSxDQUN6QyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBdUM7WUFDN0QsTUFBTSxFQUFFLEtBQUs7WUFDYixHQUFHLEVBQUUscUJBQXFCO1lBQzFCLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxFQUFFLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYyxFQUFFO1NBQzNILEVBQ0QsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFFN0IsYUFBUSxHQUFHLENBQUMsRUFBVSxFQUFFLEVBQUUsQ0FDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQXNDO1lBQzVELE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLHVCQUF1QixFQUFFLFFBQVE7U0FDdkMsRUFDRCxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUU3QixXQUFNLEdBQUcsQ0FBQyxFQUFVLEVBQUUsS0FBNEIsRUFBRSxFQUFFLENBQ3BELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUF1QjtZQUM3QyxNQUFNLEVBQUUsS0FBSztZQUNiLEdBQUcsRUFBRSx1QkFBdUIsRUFBRSxFQUFFO1lBQ2hDLElBQUksRUFBRSxLQUFLO1NBQ1osRUFDRCxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUU3QixnQkFBVyxHQUFHLENBQUMsRUFBVSxFQUFFLEtBQWlDLEVBQUUsRUFBRSxDQUM5RCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBWTtZQUNsQyxNQUFNLEVBQUUsS0FBSztZQUNiLEdBQUcsRUFBRSx1QkFBdUIsRUFBRSxRQUFRO1lBQ3RDLElBQUksRUFBRSxLQUFLO1NBQ1osRUFDRCxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUVrQixDQUFDOzs7O1lBaEZqRCxVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQU5RLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIEdldElkZW50aXR5VXNlcnNJbnB1dCxcbiAgSWRlbnRpdHlSb2xlRHRvLFxuICBJZGVudGl0eVVzZXJDcmVhdGVEdG8sXG4gIElkZW50aXR5VXNlckR0byxcbiAgSWRlbnRpdHlVc2VyVXBkYXRlRHRvLFxuICBJZGVudGl0eVVzZXJVcGRhdGVSb2xlc0R0byB9IGZyb20gJy4vbW9kZWxzJztcbmltcG9ydCB7IFJlc3RTZXJ2aWNlIH0gZnJvbSAnQGFicC9uZy5jb3JlJztcbmltcG9ydCB0eXBlIHsgTGlzdFJlc3VsdER0bywgUGFnZWRSZXN1bHREdG8gfSBmcm9tICdAYWJwL25nLmNvcmUnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgSWRlbnRpdHlVc2VyU2VydmljZSB7XG4gIGFwaU5hbWUgPSAnQWJwSWRlbnRpdHknO1xuXG4gIGNyZWF0ZSA9IChpbnB1dDogSWRlbnRpdHlVc2VyQ3JlYXRlRHRvKSA9PlxuICAgIHRoaXMucmVzdFNlcnZpY2UucmVxdWVzdDxhbnksIElkZW50aXR5VXNlckR0bz4oe1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICB1cmw6ICcvYXBpL2lkZW50aXR5L3VzZXJzJyxcbiAgICAgIGJvZHk6IGlucHV0LFxuICAgIH0sXG4gICAgeyBhcGlOYW1lOiB0aGlzLmFwaU5hbWUgfSk7XG5cbiAgZGVsZXRlID0gKGlkOiBzdHJpbmcpID0+XG4gICAgdGhpcy5yZXN0U2VydmljZS5yZXF1ZXN0PGFueSwgdm9pZD4oe1xuICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgIHVybDogYC9hcGkvaWRlbnRpdHkvdXNlcnMvJHtpZH1gLFxuICAgIH0sXG4gICAgeyBhcGlOYW1lOiB0aGlzLmFwaU5hbWUgfSk7XG5cbiAgZmluZEJ5RW1haWwgPSAoZW1haWw6IHN0cmluZykgPT5cbiAgICB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3Q8YW55LCBJZGVudGl0eVVzZXJEdG8+KHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICB1cmw6IGAvYXBpL2lkZW50aXR5L3VzZXJzL2J5LWVtYWlsLyR7ZW1haWx9YCxcbiAgICB9LFxuICAgIHsgYXBpTmFtZTogdGhpcy5hcGlOYW1lIH0pO1xuXG4gIGZpbmRCeVVzZXJuYW1lID0gKHVzZXJuYW1lOiBzdHJpbmcpID0+XG4gICAgdGhpcy5yZXN0U2VydmljZS5yZXF1ZXN0PGFueSwgSWRlbnRpdHlVc2VyRHRvPih7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgdXJsOiAnL2FwaS9pZGVudGl0eS91c2Vycy9ieS11c2VybmFtZS97dXNlck5hbWV9JyxcbiAgICB9LFxuICAgIHsgYXBpTmFtZTogdGhpcy5hcGlOYW1lIH0pO1xuXG4gIGdldCA9IChpZDogc3RyaW5nKSA9PlxuICAgIHRoaXMucmVzdFNlcnZpY2UucmVxdWVzdDxhbnksIElkZW50aXR5VXNlckR0bz4oe1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIHVybDogYC9hcGkvaWRlbnRpdHkvdXNlcnMvJHtpZH1gLFxuICAgIH0sXG4gICAgeyBhcGlOYW1lOiB0aGlzLmFwaU5hbWUgfSk7XG5cbiAgZ2V0QXNzaWduYWJsZVJvbGVzID0gKCkgPT5cbiAgICB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3Q8YW55LCBMaXN0UmVzdWx0RHRvPElkZW50aXR5Um9sZUR0bz4+KHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICB1cmw6ICcvYXBpL2lkZW50aXR5L3VzZXJzL2Fzc2lnbmFibGUtcm9sZXMnLFxuICAgIH0sXG4gICAgeyBhcGlOYW1lOiB0aGlzLmFwaU5hbWUgfSk7XG5cbiAgZ2V0TGlzdCA9IChpbnB1dDogR2V0SWRlbnRpdHlVc2Vyc0lucHV0KSA9PlxuICAgIHRoaXMucmVzdFNlcnZpY2UucmVxdWVzdDxhbnksIFBhZ2VkUmVzdWx0RHRvPElkZW50aXR5VXNlckR0bz4+KHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICB1cmw6ICcvYXBpL2lkZW50aXR5L3VzZXJzJyxcbiAgICAgIHBhcmFtczogeyBmaWx0ZXI6IGlucHV0LmZpbHRlciwgc29ydGluZzogaW5wdXQuc29ydGluZywgc2tpcENvdW50OiBpbnB1dC5za2lwQ291bnQsIG1heFJlc3VsdENvdW50OiBpbnB1dC5tYXhSZXN1bHRDb3VudCB9LFxuICAgIH0sXG4gICAgeyBhcGlOYW1lOiB0aGlzLmFwaU5hbWUgfSk7XG5cbiAgZ2V0Um9sZXMgPSAoaWQ6IHN0cmluZykgPT5cbiAgICB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3Q8YW55LCBMaXN0UmVzdWx0RHRvPElkZW50aXR5Um9sZUR0bz4+KHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICB1cmw6IGAvYXBpL2lkZW50aXR5L3VzZXJzLyR7aWR9L3JvbGVzYCxcbiAgICB9LFxuICAgIHsgYXBpTmFtZTogdGhpcy5hcGlOYW1lIH0pO1xuXG4gIHVwZGF0ZSA9IChpZDogc3RyaW5nLCBpbnB1dDogSWRlbnRpdHlVc2VyVXBkYXRlRHRvKSA9PlxuICAgIHRoaXMucmVzdFNlcnZpY2UucmVxdWVzdDxhbnksIElkZW50aXR5VXNlckR0bz4oe1xuICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgIHVybDogYC9hcGkvaWRlbnRpdHkvdXNlcnMvJHtpZH1gLFxuICAgICAgYm9keTogaW5wdXQsXG4gICAgfSxcbiAgICB7IGFwaU5hbWU6IHRoaXMuYXBpTmFtZSB9KTtcblxuICB1cGRhdGVSb2xlcyA9IChpZDogc3RyaW5nLCBpbnB1dDogSWRlbnRpdHlVc2VyVXBkYXRlUm9sZXNEdG8pID0+XG4gICAgdGhpcy5yZXN0U2VydmljZS5yZXF1ZXN0PGFueSwgdm9pZD4oe1xuICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgIHVybDogYC9hcGkvaWRlbnRpdHkvdXNlcnMvJHtpZH0vcm9sZXNgLFxuICAgICAgYm9keTogaW5wdXQsXG4gICAgfSxcbiAgICB7IGFwaU5hbWU6IHRoaXMuYXBpTmFtZSB9KTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlc3RTZXJ2aWNlOiBSZXN0U2VydmljZSkge31cbn1cbiJdfQ==