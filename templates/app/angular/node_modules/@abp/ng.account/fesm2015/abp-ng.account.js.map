{"version":3,"file":"abp-ng.account.js","sources":["../../../packages/account/src/lib/proxy/account/account.service.ts","../../../packages/account/src/lib/components/forgot-password/forgot-password.component.ts","../../../packages/account/src/lib/tokens/config-options.token.ts","../../../packages/account/src/lib/utils/auth-utils.ts","../../../packages/account/src/lib/components/login/login.component.ts","../../../packages/account/src/lib/services/manage-profile.state.service.ts","../../../packages/account/src/lib/components/manage-profile/manage-profile.component.ts","../../../packages/account/src/lib/components/register/register.component.ts","../../../packages/account/src/lib/components/reset-password/reset-password.component.ts","../../../packages/account/src/lib/guards/authentication-flow.guard.ts","../../../packages/account/src/lib/account-routing.module.ts","../../../packages/account/src/lib/components/change-password/change-password.component.ts","../../../packages/account/src/lib/components/personal-settings/personal-settings.component.ts","../../../packages/account/src/lib/utils/factory-utils.ts","../../../packages/account/src/lib/account.module.ts","../../../packages/account/src/lib/proxy/account/web/areas/account/controllers/models/login-result-type.enum.ts","../../../packages/account/src/lib/proxy/account/web/areas/account/controllers/account.service.ts","../../../packages/account/src/abp-ng.account.ts"],"sourcesContent":["import type { RegisterDto, ResetPasswordDto, SendPasswordResetCodeDto } from './models';\nimport { RestService } from '@abp/ng.core';\nimport { Injectable } from '@angular/core';\nimport type { IdentityUserDto } from '../identity/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AccountService {\n  apiName = 'AbpAccount';\n\n  register = (input: RegisterDto) =>\n    this.restService.request<any, IdentityUserDto>({\n      method: 'POST',\n      url: '/api/account/register',\n      body: input,\n    },\n    { apiName: this.apiName });\n\n  resetPassword = (input: ResetPasswordDto) =>\n    this.restService.request<any, void>({\n      method: 'POST',\n      url: '/api/account/reset-password',\n      body: input,\n    },\n    { apiName: this.apiName });\n\n  sendPasswordResetCode = (input: SendPasswordResetCodeDto) =>\n    this.restService.request<any, void>({\n      method: 'POST',\n      url: '/api/account/send-password-reset-code',\n      body: input,\n    },\n    { apiName: this.apiName });\n\n  constructor(private restService: RestService) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { finalize } from 'rxjs/operators';\nimport { AccountService } from '../../proxy/account/account.service';\n\n@Component({\n  selector: 'abp-forgot-password',\n  templateUrl: 'forgot-password.component.html',\n})\nexport class ForgotPasswordComponent {\n  form: FormGroup;\n\n  inProgress: boolean;\n\n  isEmailSent = false;\n\n  constructor(private fb: FormBuilder, private accountService: AccountService) {\n    this.form = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n    });\n  }\n\n  onSubmit() {\n    if (this.form.invalid) return;\n\n    this.inProgress = true;\n\n    this.accountService\n      .sendPasswordResetCode({ email: this.form.get('email').value, appName: 'Angular' })\n      .pipe(finalize(() => (this.inProgress = false)))\n      .subscribe(() => {\n        this.isEmailSent = true;\n      });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { AccountConfigOptions } from '../models/config-options';\n\nexport const ACCOUNT_CONFIG_OPTIONS = new InjectionToken<AccountConfigOptions>(\n  'ACCOUNT_CONFIG_OPTIONS',\n);\n","import { Injector } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ACCOUNT_CONFIG_OPTIONS } from '../tokens/config-options.token';\n\nexport function getRedirectUrl(injector: Injector) {\n  const route = injector.get(ActivatedRoute);\n  const options = injector.get(ACCOUNT_CONFIG_OPTIONS);\n  return route.snapshot.queryParams.returnUrl || options.redirectUrl || '/';\n}\n","import { ConfigStateService, AuthService } from '@abp/ng.core';\nimport { ToasterService } from '@abp/ng.theme.shared';\nimport { Component, Injector, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngxs/store';\nimport { throwError } from 'rxjs';\nimport { catchError, finalize } from 'rxjs/operators';\nimport snq from 'snq';\nimport { eAccountComponents } from '../../enums/components';\nimport { getRedirectUrl } from '../../utils/auth-utils';\n\nconst { maxLength, required } = Validators;\n\n@Component({\n  selector: 'abp-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  form: FormGroup;\n\n  inProgress: boolean;\n\n  isSelfRegistrationEnabled = true;\n\n  authWrapperKey = eAccountComponents.AuthWrapper;\n\n  constructor(\n    protected injector: Injector,\n    protected fb: FormBuilder,\n    protected toasterService: ToasterService,\n    protected authService: AuthService,\n    protected configState: ConfigStateService,\n  ) {}\n\n  ngOnInit() {\n    this.init();\n    this.buildForm();\n  }\n\n  protected init() {\n    this.isSelfRegistrationEnabled =\n      (\n        (this.configState.getSetting('Abp.Account.IsSelfRegistrationEnabled') as string) || ''\n      ).toLowerCase() !== 'false';\n  }\n\n  protected buildForm() {\n    this.form = this.fb.group({\n      username: ['', [required, maxLength(255)]],\n      password: ['', [required, maxLength(128)]],\n      rememberMe: [false],\n    });\n  }\n\n  onSubmit() {\n    if (this.form.invalid) return;\n\n    this.inProgress = true;\n\n    const { username, password, rememberMe } = this.form.value;\n\n    const redirectUrl = getRedirectUrl(this.injector);\n\n    this.authService\n      .login({ username, password, rememberMe, redirectUrl })\n      .pipe(\n        catchError(err => {\n          this.toasterService.error(\n            snq(() => err.error.error_description) ||\n              snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\n            'Error',\n            { life: 7000 },\n          );\n          return throwError(err);\n        }),\n        finalize(() => (this.inProgress = false)),\n      )\n      .subscribe();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { InternalStore, Profile } from '@abp/ng.core';\nimport { Observable } from 'rxjs';\n\nexport interface ManageProfileState {\n  profile: Profile.Response;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ManageProfileStateService {\n  private readonly store = new InternalStore({} as ManageProfileState);\n\n  get createOnUpdateStream() {\n    return this.store.sliceUpdate;\n  }\n\n  getProfile$(): Observable<Profile.Response> {\n    return this.store.sliceState(state => state.profile);\n  }\n\n  getProfile(): Profile.Response {\n    return this.store.state.profile;\n  }\n\n  setProfile(profile: Profile.Response) {\n    this.store.patch({ profile });\n  }\n}\n","import { Profile, ProfileService } from '@abp/ng.core';\nimport { fadeIn } from '@abp/ng.theme.shared';\nimport { transition, trigger, useAnimation } from '@angular/animations';\nimport { Component, OnInit } from '@angular/core';\nimport { eAccountComponents } from '../../enums/components';\nimport { ManageProfileStateService } from '../../services/manage-profile.state.service';\n\n@Component({\n  selector: 'abp-manage-profile',\n  templateUrl: './manage-profile.component.html',\n  animations: [trigger('fadeIn', [transition(':enter', useAnimation(fadeIn))])],\n  styles: [\n    `\n      .min-h-400 {\n        min-height: 400px;\n      }\n    `,\n  ],\n})\nexport class ManageProfileComponent implements OnInit {\n  selectedTab = 0;\n\n  changePasswordKey = eAccountComponents.ChangePassword;\n\n  personalSettingsKey = eAccountComponents.PersonalSettings;\n\n  profile$ = this.manageProfileState.getProfile$();\n\n  hideChangePasswordTab: boolean;\n\n  constructor(\n    protected profileService: ProfileService,\n    protected manageProfileState: ManageProfileStateService,\n  ) {}\n\n  ngOnInit() {\n    this.profileService.get().subscribe(profile => {\n      this.manageProfileState.setProfile(profile);\n      if (profile.isExternal) {\n        this.hideChangePasswordTab = true;\n        this.selectedTab = 1;\n      }\n    });\n  }\n}\n","import { AuthService, ConfigStateService } from '@abp/ng.core';\nimport { getPasswordValidators, ToasterService } from '@abp/ng.theme.shared';\nimport { Component, Injector, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { throwError } from 'rxjs';\nimport { catchError, finalize, switchMap } from 'rxjs/operators';\nimport snq from 'snq';\nimport { eAccountComponents } from '../../enums/components';\nimport { AccountService } from '../../proxy/account/account.service';\nimport { RegisterDto } from '../../proxy/account/models';\nimport { getRedirectUrl } from '../../utils/auth-utils';\nconst { maxLength, required, email } = Validators;\n\n@Component({\n  selector: 'abp-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit {\n  form: FormGroup;\n\n  inProgress: boolean;\n\n  isSelfRegistrationEnabled = true;\n\n  authWrapperKey = eAccountComponents.AuthWrapper;\n\n  constructor(\n    protected fb: FormBuilder,\n    protected accountService: AccountService,\n    protected configState: ConfigStateService,\n    protected toasterService: ToasterService,\n    protected authService: AuthService,\n    protected injector: Injector,\n  ) {}\n\n  ngOnInit() {\n    this.init();\n    this.buildForm();\n  }\n\n  protected init() {\n    this.isSelfRegistrationEnabled =\n      (this.configState.getSetting('Abp.Account.IsSelfRegistrationEnabled') || '').toLowerCase() !==\n      'false';\n\n    if (!this.isSelfRegistrationEnabled) {\n      this.toasterService.warn(\n        {\n          key: 'AbpAccount::SelfRegistrationDisabledMessage',\n          defaultValue: 'Self registration is disabled.',\n        },\n        null,\n        { life: 10000 },\n      );\n      return;\n    }\n  }\n\n  protected buildForm() {\n    this.form = this.fb.group({\n      username: ['', [required, maxLength(255)]],\n      password: ['', [required, ...getPasswordValidators(this.injector)]],\n      email: ['', [required, email]],\n    });\n  }\n\n  onSubmit() {\n    if (this.form.invalid) return;\n\n    this.inProgress = true;\n\n    const newUser = {\n      userName: this.form.get('username').value,\n      password: this.form.get('password').value,\n      emailAddress: this.form.get('email').value,\n      appName: 'Angular',\n    } as RegisterDto;\n\n    this.accountService\n      .register(newUser)\n      .pipe(\n        switchMap(() =>\n          this.authService.login({\n            username: newUser.userName,\n            password: newUser.password,\n            redirectUrl: getRedirectUrl(this.injector),\n          }),\n        ),\n        catchError(err => {\n          this.toasterService.error(\n            snq(() => err.error.error_description) ||\n              snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\n            'Error',\n            { life: 7000 },\n          );\n          return throwError(err);\n        }),\n        finalize(() => (this.inProgress = false)),\n      )\n      .subscribe();\n  }\n}\n","import { getPasswordValidators } from '@abp/ng.theme.shared';\nimport { Component, Injector, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { comparePasswords, Validation } from '@ngx-validate/core';\nimport { finalize } from 'rxjs/operators';\nimport { AccountService } from '../../proxy/account/account.service';\n\nconst PASSWORD_FIELDS = ['password', 'confirmPassword'];\n\n@Component({\n  selector: 'abp-reset-password',\n  templateUrl: './reset-password.component.html',\n})\nexport class ResetPasswordComponent implements OnInit {\n  form: FormGroup;\n\n  inProgress = false;\n\n  isPasswordReset = false;\n\n  mapErrorsFn: Validation.MapErrorsFn = (errors, groupErrors, control) => {\n    if (PASSWORD_FIELDS.indexOf(String(control.name)) < 0) return errors;\n\n    return errors.concat(groupErrors.filter(({ key }) => key === 'passwordMismatch'));\n  };\n\n  constructor(\n    private fb: FormBuilder,\n    private accountService: AccountService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private injector: Injector,\n  ) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(({ userId, resetToken }) => {\n      if (!userId || !resetToken) this.router.navigateByUrl('/account/login');\n\n      this.form = this.fb.group(\n        {\n          userId: [userId, [Validators.required]],\n          resetToken: [resetToken, [Validators.required]],\n          password: ['', [Validators.required, ...getPasswordValidators(this.injector)]],\n          confirmPassword: ['', [Validators.required, ...getPasswordValidators(this.injector)]],\n        },\n        {\n          validators: [comparePasswords(PASSWORD_FIELDS)],\n        },\n      );\n    });\n  }\n\n  onSubmit() {\n    if (this.form.invalid || this.inProgress) return;\n\n    this.inProgress = true;\n\n    this.accountService\n      .resetPassword({\n        userId: this.form.get('userId').value,\n        resetToken: this.form.get('resetToken').value,\n        password: this.form.get('password').value,\n      })\n      .pipe(finalize(() => (this.inProgress = false)))\n      .subscribe(() => {\n        this.isPasswordReset = true;\n      });\n  }\n}\n","import { AuthService } from '@abp/ng.core';\nimport { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\n\n@Injectable()\nexport class AuthenticationFlowGuard implements CanActivate {\n  constructor(private authService: AuthService) {}\n\n  canActivate() {\n    if (this.authService.isInternalAuth) return true;\n\n    this.authService.navigateToLogin();\n    return false;\n  }\n}\n","import {\n  AuthGuard,\n  DynamicLayoutComponent,\n  ReplaceableComponents,\n  ReplaceableRouteContainerComponent,\n} from '@abp/ng.core';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ForgotPasswordComponent } from './components/forgot-password/forgot-password.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { ManageProfileComponent } from './components/manage-profile/manage-profile.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { ResetPasswordComponent } from './components/reset-password/reset-password.component';\nimport { eAccountComponents } from './enums/components';\nimport { AuthenticationFlowGuard } from './guards/authentication-flow.guard';\n\nconst routes: Routes = [\n  { path: '', pathMatch: 'full', redirectTo: 'login' },\n  {\n    path: '',\n    component: DynamicLayoutComponent,\n    children: [\n      {\n        path: 'login',\n        component: ReplaceableRouteContainerComponent,\n        canActivate: [AuthenticationFlowGuard],\n        data: {\n          replaceableComponent: {\n            key: eAccountComponents.Login,\n            defaultComponent: LoginComponent,\n          } as ReplaceableComponents.RouteData<LoginComponent>,\n        },\n      },\n      {\n        path: 'register',\n        component: ReplaceableRouteContainerComponent,\n        canActivate: [AuthenticationFlowGuard],\n        data: {\n          replaceableComponent: {\n            key: eAccountComponents.Register,\n            defaultComponent: RegisterComponent,\n          } as ReplaceableComponents.RouteData<RegisterComponent>,\n        },\n      },\n      {\n        path: 'forgot-password',\n        component: ReplaceableRouteContainerComponent,\n        canActivate: [AuthenticationFlowGuard],\n        data: {\n          replaceableComponent: {\n            key: eAccountComponents.ForgotPassword,\n            defaultComponent: ForgotPasswordComponent,\n          } as ReplaceableComponents.RouteData<ForgotPasswordComponent>,\n        },\n      },\n      {\n        path: 'reset-password',\n        component: ReplaceableRouteContainerComponent,\n        canActivate: [],\n        data: {\n          tenantBoxVisible: false,\n          replaceableComponent: {\n            key: eAccountComponents.ResetPassword,\n            defaultComponent: ResetPasswordComponent,\n          } as ReplaceableComponents.RouteData<ResetPasswordComponent>,\n        },\n      },\n      {\n        path: 'manage',\n        component: ReplaceableRouteContainerComponent,\n        canActivate: [AuthGuard],\n        data: {\n          replaceableComponent: {\n            key: eAccountComponents.ManageProfile,\n            defaultComponent: ManageProfileComponent,\n          } as ReplaceableComponents.RouteData<ManageProfileComponent>,\n        },\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AccountRoutingModule {}\n","import { Profile, ProfileService } from '@abp/ng.core';\nimport { getPasswordValidators, ToasterService } from '@abp/ng.theme.shared';\nimport { Component, Injector, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { comparePasswords, Validation } from '@ngx-validate/core';\nimport { finalize } from 'rxjs/operators';\nimport snq from 'snq';\nimport { Account } from '../../models/account';\nimport { ManageProfileStateService } from '../../services/manage-profile.state.service';\n\nconst { required } = Validators;\n\nconst PASSWORD_FIELDS = ['newPassword', 'repeatNewPassword'];\n\n@Component({\n  selector: 'abp-change-password-form',\n  templateUrl: './change-password.component.html',\n  exportAs: 'abpChangePasswordForm',\n})\nexport class ChangePasswordComponent\n  implements OnInit, Account.ChangePasswordComponentInputs, Account.ChangePasswordComponentOutputs {\n  form: FormGroup;\n\n  inProgress: boolean;\n\n  hideCurrentPassword: boolean;\n\n  mapErrorsFn: Validation.MapErrorsFn = (errors, groupErrors, control) => {\n    if (PASSWORD_FIELDS.indexOf(String(control.name)) < 0) return errors;\n\n    return errors.concat(groupErrors.filter(({ key }) => key === 'passwordMismatch'));\n  };\n\n  constructor(\n    private fb: FormBuilder,\n    private injector: Injector,\n    private toasterService: ToasterService,\n    private profileService: ProfileService,\n    private manageProfileState: ManageProfileStateService,\n  ) {}\n\n  ngOnInit(): void {\n    this.hideCurrentPassword = !this.manageProfileState.getProfile()?.hasPassword;\n\n    const passwordValidations = getPasswordValidators(this.injector);\n\n    this.form = this.fb.group(\n      {\n        password: ['', required],\n        newPassword: [\n          '',\n          {\n            validators: [required, ...passwordValidations],\n          },\n        ],\n        repeatNewPassword: [\n          '',\n          {\n            validators: [required, ...passwordValidations],\n          },\n        ],\n      },\n      {\n        validators: [comparePasswords(PASSWORD_FIELDS)],\n      },\n    );\n\n    if (this.hideCurrentPassword) this.form.removeControl('password');\n  }\n\n  onSubmit() {\n    if (this.form.invalid) return;\n    this.inProgress = true;\n    this.profileService\n      .changePassword({\n        ...(!this.hideCurrentPassword && { currentPassword: this.form.get('password').value }),\n        newPassword: this.form.get('newPassword').value,\n      })\n      .pipe(finalize(() => (this.inProgress = false)))\n      .subscribe({\n        next: () => {\n          this.form.reset();\n          this.toasterService.success('AbpAccount::PasswordChangedMessage', '', {\n            life: 5000,\n          });\n\n          if (this.hideCurrentPassword) {\n            this.hideCurrentPassword = false;\n            this.form.addControl('password', new FormControl('', [required]));\n          }\n        },\n        error: err => {\n          this.toasterService.error(\n            snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\n          );\n        },\n      });\n  }\n}\n","import { ProfileService } from '@abp/ng.core';\nimport { ToasterService } from '@abp/ng.theme.shared';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { finalize } from 'rxjs/operators';\nimport { Account } from '../../models/account';\nimport { ManageProfileStateService } from '../../services/manage-profile.state.service';\n\nconst { maxLength, required, email } = Validators;\n\n@Component({\n  selector: 'abp-personal-settings-form',\n  templateUrl: './personal-settings.component.html',\n  exportAs: 'abpPersonalSettingsForm',\n})\nexport class PersonalSettingsComponent\n  implements\n    OnInit,\n    Account.PersonalSettingsComponentInputs,\n    Account.PersonalSettingsComponentOutputs {\n  form: FormGroup;\n\n  inProgress: boolean;\n\n  constructor(\n    private fb: FormBuilder,\n    private toasterService: ToasterService,\n    private profileService: ProfileService,\n    private manageProfileState: ManageProfileStateService,\n  ) {}\n\n  ngOnInit() {\n    this.buildForm();\n  }\n\n  buildForm() {\n    const profile = this.manageProfileState.getProfile();\n    this.form = this.fb.group({\n      userName: [profile.userName, [required, maxLength(256)]],\n      email: [profile.email, [required, email, maxLength(256)]],\n      name: [profile.name || '', [maxLength(64)]],\n      surname: [profile.surname || '', [maxLength(64)]],\n      phoneNumber: [profile.phoneNumber || '', [maxLength(16)]],\n    });\n  }\n\n  submit() {\n    if (this.form.invalid) return;\n    this.inProgress = true;\n    this.profileService\n      .update(this.form.value)\n      .pipe(finalize(() => (this.inProgress = false)))\n      .subscribe(profile => {\n        this.manageProfileState.setProfile(profile);\n        this.toasterService.success('AbpAccount::PersonalSettingsSaved', 'Success', { life: 5000 });\n      });\n  }\n}\n","import { AccountConfigOptions } from '../models/config-options';\n\nexport function accountConfigOptionsFactory(options: AccountConfigOptions) {\n  return {\n    redirectUrl: '/',\n    ...options,\n  };\n}\n","import { CoreModule, LazyModuleFactory } from '@abp/ng.core';\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\nimport { ModuleWithProviders, NgModule, NgModuleFactory } from '@angular/core';\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\nimport { AccountRoutingModule } from './account-routing.module';\nimport { ChangePasswordComponent } from './components/change-password/change-password.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { ManageProfileComponent } from './components/manage-profile/manage-profile.component';\nimport { PersonalSettingsComponent } from './components/personal-settings/personal-settings.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { AccountConfigOptions } from './models/config-options';\nimport { ACCOUNT_CONFIG_OPTIONS } from './tokens/config-options.token';\nimport { accountConfigOptionsFactory } from './utils/factory-utils';\nimport { AuthenticationFlowGuard } from './guards/authentication-flow.guard';\nimport { ForgotPasswordComponent } from './components/forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './components/reset-password/reset-password.component';\n\nconst declarations = [\n  LoginComponent,\n  RegisterComponent,\n  ChangePasswordComponent,\n  ManageProfileComponent,\n  PersonalSettingsComponent,\n  ForgotPasswordComponent,\n  ResetPasswordComponent,\n];\n\n@NgModule({\n  declarations: [...declarations],\n  imports: [\n    CoreModule,\n    AccountRoutingModule,\n    ThemeSharedModule,\n    NgbDropdownModule,\n    NgxValidateCoreModule,\n  ],\n  exports: [...declarations],\n})\nexport class AccountModule {\n  static forChild(options = {} as AccountConfigOptions): ModuleWithProviders<AccountModule> {\n    return {\n      ngModule: AccountModule,\n      providers: [\n        AuthenticationFlowGuard,\n        { provide: ACCOUNT_CONFIG_OPTIONS, useValue: options },\n        {\n          provide: 'ACCOUNT_OPTIONS',\n          useFactory: accountConfigOptionsFactory,\n          deps: [ACCOUNT_CONFIG_OPTIONS],\n        },\n      ],\n    };\n  }\n\n  static forLazy(options = {} as AccountConfigOptions): NgModuleFactory<AccountModule> {\n    return new LazyModuleFactory(AccountModule.forChild(options));\n  }\n}\n","import { mapEnumToOptions } from '@abp/ng.core';\n\nexport enum LoginResultType {\n  Success = 1,\n  InvalidUserNameOrPassword = 2,\n  NotAllowed = 3,\n  LockedOut = 4,\n  RequiresTwoFactor = 5,\n}\n\nexport const loginResultTypeOptions = mapEnumToOptions(LoginResultType);\n","import type { AbpLoginResult, UserLoginInfo } from './models/models';\nimport { RestService } from '@abp/ng.core';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AccountService {\n  apiName = 'AbpAccount';\n\n  checkPasswordByLogin = (login: UserLoginInfo) =>\n    this.restService.request<any, AbpLoginResult>({\n      method: 'POST',\n      url: '/api/account/check-password',\n      body: login,\n    },\n    { apiName: this.apiName });\n\n  loginByLogin = (login: UserLoginInfo) =>\n    this.restService.request<any, AbpLoginResult>({\n      method: 'POST',\n      url: '/api/account/login',\n      body: login,\n    },\n    { apiName: this.apiName });\n\n  logout = () =>\n    this.restService.request<any, void>({\n      method: 'GET',\n      url: '/api/account/logout',\n    },\n    { apiName: this.apiName });\n\n  constructor(private restService: RestService) {}\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AccountRoutingModule as ɵj} from './lib/account-routing.module';\nexport {ChangePasswordComponent as ɵd} from './lib/components/change-password/change-password.component';\nexport {ForgotPasswordComponent as ɵh} from './lib/components/forgot-password/forgot-password.component';\nexport {LoginComponent as ɵa} from './lib/components/login/login.component';\nexport {ManageProfileComponent as ɵf} from './lib/components/manage-profile/manage-profile.component';\nexport {PersonalSettingsComponent as ɵg} from './lib/components/personal-settings/personal-settings.component';\nexport {RegisterComponent as ɵb} from './lib/components/register/register.component';\nexport {ResetPasswordComponent as ɵi} from './lib/components/reset-password/reset-password.component';\nexport {eAccountComponents as ɵl} from './lib/enums/components';\nexport {AuthenticationFlowGuard as ɵk} from './lib/guards/authentication-flow.guard';\nexport {AccountService as ɵc} from './lib/proxy/account/account.service';\nexport {ManageProfileStateService as ɵe} from './lib/services/manage-profile.state.service';\nexport {ACCOUNT_CONFIG_OPTIONS as ɵm} from './lib/tokens/config-options.token';\nexport {accountConfigOptionsFactory as ɵn} from './lib/utils/factory-utils';"],"names":["AccountService","maxLength","required","email","PASSWORD_FIELDS"],"mappings":"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"}