import * as i1 from '@abp/ng.core';
import { RestService, AuthService, ConfigStateService, InternalStore, ProfileService, DynamicLayoutComponent, ReplaceableRouteContainerComponent, AuthGuard, LazyModuleFactory, CoreModule, mapEnumToOptions } from '@abp/ng.core';
import { ToasterService, fadeIn, getPasswordValidators, ThemeSharedModule } from '@abp/ng.theme.shared';
import * as i0 from '@angular/core';
import { Injectable, Component, InjectionToken, Injector, NgModule } from '@angular/core';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import { comparePasswords, NgxValidateCoreModule } from '@ngx-validate/core';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { Validators, FormBuilder, FormControl } from '@angular/forms';
import { finalize, catchError, switchMap } from 'rxjs/operators';
import { throwError } from 'rxjs';
import snq from 'snq';
import { trigger, transition, useAnimation } from '@angular/animations';

class AccountService$1 {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpAccount';
        this.register = (input) => this.restService.request({
            method: 'POST',
            url: '/api/account/register',
            body: input,
        }, { apiName: this.apiName });
        this.resetPassword = (input) => this.restService.request({
            method: 'POST',
            url: '/api/account/reset-password',
            body: input,
        }, { apiName: this.apiName });
        this.sendPasswordResetCode = (input) => this.restService.request({
            method: 'POST',
            url: '/api/account/send-password-reset-code',
            body: input,
        }, { apiName: this.apiName });
    }
}
AccountService$1.ɵprov = i0.ɵɵdefineInjectable({ factory: function AccountService_Factory() { return new AccountService$1(i0.ɵɵinject(i1.RestService)); }, token: AccountService$1, providedIn: "root" });
AccountService$1.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
AccountService$1.ctorParameters = () => [
    { type: RestService }
];

class ForgotPasswordComponent {
    constructor(fb, accountService) {
        this.fb = fb;
        this.accountService = accountService;
        this.isEmailSent = false;
        this.form = this.fb.group({
            email: ['', [Validators.required, Validators.email]],
        });
    }
    onSubmit() {
        if (this.form.invalid)
            return;
        this.inProgress = true;
        this.accountService
            .sendPasswordResetCode({ email: this.form.get('email').value, appName: 'Angular' })
            .pipe(finalize(() => (this.inProgress = false)))
            .subscribe(() => {
            this.isEmailSent = true;
        });
    }
}
ForgotPasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-forgot-password',
                template: "<h4>{{ 'AbpAccount::ForgotPassword' | abpLocalization }}</h4>\n\n<form\n  *ngIf=\"!isEmailSent; else emailSentTemplate\"\n  [formGroup]=\"form\"\n  (ngSubmit)=\"onSubmit()\"\n  validateOnSubmit\n>\n  <p>{{ 'AbpAccount::SendPasswordResetLink_Information' | abpLocalization }}</p>\n  <div class=\"form-group\">\n    <label for=\"input-email-address\">{{ 'AbpAccount::EmailAddress' | abpLocalization }}</label\n    ><span> * </span>\n    <input type=\"email\" id=\"input-email-address\" class=\"form-control\" formControlName=\"email\" />\n  </div>\n  <abp-button\n    class=\"d-block\"\n    buttonClass=\"mt-2 mb-3 btn btn-primary btn-block\"\n    [loading]=\"inProgress\"\n    buttonType=\"submit\"\n    [disabled]=\"form?.invalid\"\n  >\n    {{ 'AbpAccount::Submit' | abpLocalization }}\n  </abp-button>\n  <a routerLink=\"/account/login\"\n    ><i class=\"fa fa-long-arrow-left mr-1\"></i>{{ 'AbpAccount::Login' | abpLocalization }}</a\n  >\n</form>\n\n<ng-template #emailSentTemplate>\n  <p>\n    {{ 'AbpAccount::PasswordResetMailSentMessage' | abpLocalization }}\n  </p>\n\n  <a routerLink=\"/account/login\">\n    <button class=\"d-block mt-2 mb-3 btn btn-primary btn-block\">\n      <i class=\"fa fa-long-arrow-left mr-1\"></i>\n      {{ 'AbpAccount::BackToLogin' | abpLocalization }}\n    </button>\n  </a>\n</ng-template>\n"
            },] }
];
ForgotPasswordComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: AccountService$1 }
];

const ACCOUNT_CONFIG_OPTIONS = new InjectionToken('ACCOUNT_CONFIG_OPTIONS');

function getRedirectUrl(injector) {
    const route = injector.get(ActivatedRoute);
    const options = injector.get(ACCOUNT_CONFIG_OPTIONS);
    return route.snapshot.queryParams.returnUrl || options.redirectUrl || '/';
}

const { maxLength: maxLength$2, required: required$3 } = Validators;
class LoginComponent {
    constructor(injector, fb, toasterService, authService, configState) {
        this.injector = injector;
        this.fb = fb;
        this.toasterService = toasterService;
        this.authService = authService;
        this.configState = configState;
        this.isSelfRegistrationEnabled = true;
        this.authWrapperKey = "Account.AuthWrapperComponent" /* AuthWrapper */;
    }
    ngOnInit() {
        this.init();
        this.buildForm();
    }
    init() {
        this.isSelfRegistrationEnabled =
            (this.configState.getSetting('Abp.Account.IsSelfRegistrationEnabled') || '').toLowerCase() !== 'false';
    }
    buildForm() {
        this.form = this.fb.group({
            username: ['', [required$3, maxLength$2(255)]],
            password: ['', [required$3, maxLength$2(128)]],
            rememberMe: [false],
        });
    }
    onSubmit() {
        if (this.form.invalid)
            return;
        this.inProgress = true;
        const { username, password, rememberMe } = this.form.value;
        const redirectUrl = getRedirectUrl(this.injector);
        this.authService
            .login({ username, password, rememberMe, redirectUrl })
            .pipe(catchError(err => {
            this.toasterService.error(snq(() => err.error.error_description) ||
                snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'), 'Error', { life: 7000 });
            return throwError(err);
        }), finalize(() => (this.inProgress = false)))
            .subscribe();
    }
}
LoginComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-login',
                template: "<h4>{{ 'AbpAccount::Login' | abpLocalization }}</h4>\n<strong *ngIf=\"isSelfRegistrationEnabled\">\n  {{ 'AbpAccount::AreYouANewUser' | abpLocalization }}\n  <a class=\"text-decoration-none\" routerLink=\"/account/register\" queryParamsHandling=\"preserve\">{{\n    'AbpAccount::Register' | abpLocalization\n  }}</a>\n</strong>\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" validateOnSubmit class=\"mt-4\">\n  <div class=\"form-group\">\n    <label for=\"login-input-user-name-or-email-address\">{{\n      'AbpAccount::UserNameOrEmailAddress' | abpLocalization\n    }}</label>\n    <input\n      class=\"form-control\"\n      type=\"text\"\n      id=\"login-input-user-name-or-email-address\"\n      formControlName=\"username\"\n      autocomplete=\"username\"\n      autofocus\n    />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"login-input-password\">{{ 'AbpAccount::Password' | abpLocalization }}</label>\n    <input\n      class=\"form-control\"\n      type=\"password\"\n      id=\"login-input-password\"\n      formControlName=\"password\"\n      autocomplete=\"current-password\"\n    />\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col\">\n      <label class=\"custom-checkbox custom-control mb-2\" for=\"login-input-remember-me\">\n        <input\n          class=\"form-check-input\"\n          type=\"checkbox\"\n          id=\"login-input-remember-me\"\n          formControlName=\"rememberMe\"\n        />\n        {{ 'AbpAccount::RememberMe' | abpLocalization }}\n      </label>\n    </div>\n    <div class=\"text-right col\">\n      <a routerLink=\"/account/forgot-password\">{{\n        'AbpAccount::ForgotPassword' | abpLocalization\n      }}</a>\n    </div>\n  </div>\n\n  <abp-button\n    [loading]=\"inProgress\"\n    buttonType=\"submit\"\n    name=\"Action\"\n    buttonClass=\"btn-block btn-lg mt-3 btn btn-primary\"\n  >\n    {{ 'AbpAccount::Login' | abpLocalization }}\n  </abp-button>\n</form>\n"
            },] }
];
LoginComponent.ctorParameters = () => [
    { type: Injector },
    { type: FormBuilder },
    { type: ToasterService },
    { type: AuthService },
    { type: ConfigStateService }
];

class ManageProfileStateService {
    constructor() {
        this.store = new InternalStore({});
    }
    get createOnUpdateStream() {
        return this.store.sliceUpdate;
    }
    getProfile$() {
        return this.store.sliceState(state => state.profile);
    }
    getProfile() {
        return this.store.state.profile;
    }
    setProfile(profile) {
        this.store.patch({ profile });
    }
}
ManageProfileStateService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ManageProfileStateService_Factory() { return new ManageProfileStateService(); }, token: ManageProfileStateService, providedIn: "root" });
ManageProfileStateService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];

class ManageProfileComponent {
    constructor(profileService, manageProfileState) {
        this.profileService = profileService;
        this.manageProfileState = manageProfileState;
        this.selectedTab = 0;
        this.changePasswordKey = "Account.ChangePasswordComponent" /* ChangePassword */;
        this.personalSettingsKey = "Account.PersonalSettingsComponent" /* PersonalSettings */;
        this.profile$ = this.manageProfileState.getProfile$();
    }
    ngOnInit() {
        this.profileService.get().subscribe(profile => {
            this.manageProfileState.setProfile(profile);
            if (profile.isExternal) {
                this.hideChangePasswordTab = true;
                this.selectedTab = 1;
            }
        });
    }
}
ManageProfileComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-manage-profile',
                template: "<div id=\"AbpContentToolbar\"></div>\n\n<div class=\"card border-0 shadow-sm min-h-400\" [abpLoading]=\"!(profile$ | async)\">\n  <div class=\"card-body\">\n    <div class=\"row\">\n      <div class=\"col-12 col-md-3\">\n        <ul class=\"nav flex-column nav-pills\" id=\"nav-tab\" role=\"tablist\">\n          <li\n            *ngIf=\"!hideChangePasswordTab && (profile$ | async)\"\n            class=\"nav-item\"\n            (click)=\"selectedTab = 0\"\n          >\n            <a\n              class=\"nav-link\"\n              [ngClass]=\"{ active: selectedTab === 0 }\"\n              role=\"tab\"\n              href=\"javascript:void(0)\"\n              >{{ 'AbpUi::ChangePassword' | abpLocalization }}</a\n            >\n          </li>\n          <li class=\"nav-item mb-2\" (click)=\"selectedTab = 1\">\n            <a\n              class=\"nav-link\"\n              [ngClass]=\"{ active: selectedTab === 1 }\"\n              role=\"tab\"\n              href=\"javascript:void(0)\"\n              >{{ 'AbpAccount::PersonalSettings' | abpLocalization }}</a\n            >\n          </li>\n        </ul>\n      </div>\n      <div *ngIf=\"profile$ | async\" class=\"col-12 col-md-9\">\n        <div class=\"tab-content\" *ngIf=\"selectedTab === 0\" [@fadeIn]>\n          <div class=\"tab-pane active\" role=\"tabpanel\">\n            <h4>\n              {{ 'AbpIdentity::ChangePassword' | abpLocalization }}\n              <hr />\n            </h4>\n            <abp-change-password-form\n              *abpReplaceableTemplate=\"{\n                componentKey: changePasswordKey\n              }\"\n            ></abp-change-password-form>\n          </div>\n        </div>\n        <div class=\"tab-content\" *ngIf=\"selectedTab === 1\" [@fadeIn]>\n          <div class=\"tab-pane active\" role=\"tabpanel\">\n            <h4>\n              {{ 'AbpIdentity::PersonalSettings' | abpLocalization }}\n              <hr />\n            </h4>\n            <abp-personal-settings-form\n              *abpReplaceableTemplate=\"{\n                componentKey: personalSettingsKey\n              }\"\n            ></abp-personal-settings-form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                animations: [trigger('fadeIn', [transition(':enter', useAnimation(fadeIn))])],
                styles: [`
      .min-h-400 {
        min-height: 400px;
      }
    `]
            },] }
];
ManageProfileComponent.ctorParameters = () => [
    { type: ProfileService },
    { type: ManageProfileStateService }
];

const { maxLength: maxLength$1, required: required$2, email: email$1 } = Validators;
class RegisterComponent {
    constructor(fb, accountService, configState, toasterService, authService, injector) {
        this.fb = fb;
        this.accountService = accountService;
        this.configState = configState;
        this.toasterService = toasterService;
        this.authService = authService;
        this.injector = injector;
        this.isSelfRegistrationEnabled = true;
        this.authWrapperKey = "Account.AuthWrapperComponent" /* AuthWrapper */;
    }
    ngOnInit() {
        this.init();
        this.buildForm();
    }
    init() {
        this.isSelfRegistrationEnabled =
            (this.configState.getSetting('Abp.Account.IsSelfRegistrationEnabled') || '').toLowerCase() !==
                'false';
        if (!this.isSelfRegistrationEnabled) {
            this.toasterService.warn({
                key: 'AbpAccount::SelfRegistrationDisabledMessage',
                defaultValue: 'Self registration is disabled.',
            }, null, { life: 10000 });
            return;
        }
    }
    buildForm() {
        this.form = this.fb.group({
            username: ['', [required$2, maxLength$1(255)]],
            password: ['', [required$2, ...getPasswordValidators(this.injector)]],
            email: ['', [required$2, email$1]],
        });
    }
    onSubmit() {
        if (this.form.invalid)
            return;
        this.inProgress = true;
        const newUser = {
            userName: this.form.get('username').value,
            password: this.form.get('password').value,
            emailAddress: this.form.get('email').value,
            appName: 'Angular',
        };
        this.accountService
            .register(newUser)
            .pipe(switchMap(() => this.authService.login({
            username: newUser.userName,
            password: newUser.password,
            redirectUrl: getRedirectUrl(this.injector),
        })), catchError(err => {
            this.toasterService.error(snq(() => err.error.error_description) ||
                snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'), 'Error', { life: 7000 });
            return throwError(err);
        }), finalize(() => (this.inProgress = false)))
            .subscribe();
    }
}
RegisterComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-register',
                template: "<h4>{{ 'AbpAccount::Register' | abpLocalization }}</h4>\n<strong>\n  {{ 'AbpAccount::AlreadyRegistered' | abpLocalization }}\n  <a class=\"text-decoration-none\" routerLink=\"/account/login\">{{\n    'AbpAccount::Login' | abpLocalization\n  }}</a>\n</strong>\n<form\n  *ngIf=\"isSelfRegistrationEnabled\"\n  [formGroup]=\"form\"\n  (ngSubmit)=\"onSubmit()\"\n  validateOnSubmit\n  class=\"mt-4\"\n>\n  <div class=\"form-group\">\n    <label for=\"input-user-name\">{{ 'AbpAccount::UserName' | abpLocalization }}</label\n    ><span> * </span\n    ><input\n      autofocus\n      type=\"text\"\n      id=\"input-user-name\"\n      class=\"form-control\"\n      formControlName=\"username\"\n      autocomplete=\"username\"\n    />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"input-email-address\">{{ 'AbpAccount::EmailAddress' | abpLocalization }}</label\n    ><span> * </span\n    ><input type=\"email\" id=\"input-email-address\" class=\"form-control\" formControlName=\"email\" />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"input-password\">{{ 'AbpAccount::Password' | abpLocalization }}</label\n    ><span> * </span\n    ><input\n      type=\"password\"\n      id=\"input-password\"\n      class=\"form-control\"\n      formControlName=\"password\"\n      autocomplete=\"current-password\"\n    />\n  </div>\n  <abp-button\n    [loading]=\"inProgress\"\n    buttonType=\"submit\"\n    name=\"Action\"\n    buttonClass=\"btn-block btn-lg mt-3 btn btn-primary\"\n  >\n    {{ 'AbpAccount::Register' | abpLocalization }}\n  </abp-button>\n</form>\n"
            },] }
];
RegisterComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: AccountService$1 },
    { type: ConfigStateService },
    { type: ToasterService },
    { type: AuthService },
    { type: Injector }
];

const PASSWORD_FIELDS$1 = ['password', 'confirmPassword'];
class ResetPasswordComponent {
    constructor(fb, accountService, route, router, injector) {
        this.fb = fb;
        this.accountService = accountService;
        this.route = route;
        this.router = router;
        this.injector = injector;
        this.inProgress = false;
        this.isPasswordReset = false;
        this.mapErrorsFn = (errors, groupErrors, control) => {
            if (PASSWORD_FIELDS$1.indexOf(String(control.name)) < 0)
                return errors;
            return errors.concat(groupErrors.filter(({ key }) => key === 'passwordMismatch'));
        };
    }
    ngOnInit() {
        this.route.queryParams.subscribe(({ userId, resetToken }) => {
            if (!userId || !resetToken)
                this.router.navigateByUrl('/account/login');
            this.form = this.fb.group({
                userId: [userId, [Validators.required]],
                resetToken: [resetToken, [Validators.required]],
                password: ['', [Validators.required, ...getPasswordValidators(this.injector)]],
                confirmPassword: ['', [Validators.required, ...getPasswordValidators(this.injector)]],
            }, {
                validators: [comparePasswords(PASSWORD_FIELDS$1)],
            });
        });
    }
    onSubmit() {
        if (this.form.invalid || this.inProgress)
            return;
        this.inProgress = true;
        this.accountService
            .resetPassword({
            userId: this.form.get('userId').value,
            resetToken: this.form.get('resetToken').value,
            password: this.form.get('password').value,
        })
            .pipe(finalize(() => (this.inProgress = false)))
            .subscribe(() => {
            this.isPasswordReset = true;
        });
    }
}
ResetPasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-reset-password',
                template: "<h4>{{ 'AbpAccount::ResetPassword' | abpLocalization }}</h4>\n\n<form\n  *ngIf=\"!isPasswordReset; else passwordResetTemplate\"\n  [formGroup]=\"form\"\n  [mapErrorsFn]=\"mapErrorsFn\"\n  (ngSubmit)=\"onSubmit()\"\n  validateOnSubmit\n>\n  <p>{{ 'AbpAccount::ResetPassword_Information' | abpLocalization }}</p>\n  <div class=\"form-group\">\n    <label for=\"input-password\">{{ 'AbpAccount::Password' | abpLocalization }}</label\n    ><span> * </span>\n    <input type=\"password\" id=\"input-password\" class=\"form-control\" formControlName=\"password\" />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"input-confirm-password\">{{ 'AbpAccount::ConfirmPassword' | abpLocalization }}</label\n    ><span> * </span>\n    <input\n      type=\"password\"\n      id=\"input-confirm-password\"\n      class=\"form-control\"\n      formControlName=\"confirmPassword\"\n    />\n  </div>\n  <button class=\"mr-2 btn btn-secondary\" type=\"button\" routerLink=\"/account/login\">\n    {{ 'AbpAccount::Cancel' | abpLocalization }}\n  </button>\n  <abp-button\n    buttonType=\"submit\"\n    buttonClass=\"mr-2 btn btn-primary\"\n    [loading]=\"inProgress\"\n    (click)=\"onSubmit()\"\n  >\n    {{ 'AbpAccount::Submit' | abpLocalization }}\n  </abp-button>\n</form>\n\n<ng-template #passwordResetTemplate>\n  <p>\n    {{ 'AbpAccount::YourPasswordIsSuccessfullyReset' | abpLocalization }}\n  </p>\n\n  <a routerLink=\"/account/login\">\n    <button class=\"d-block mt-2 mb-3 btn btn-primary\">\n      {{ 'AbpAccount::BackToLogin' | abpLocalization }}\n    </button>\n  </a>\n</ng-template>\n"
            },] }
];
ResetPasswordComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: AccountService$1 },
    { type: ActivatedRoute },
    { type: Router },
    { type: Injector }
];

class AuthenticationFlowGuard {
    constructor(authService) {
        this.authService = authService;
    }
    canActivate() {
        if (this.authService.isInternalAuth)
            return true;
        this.authService.navigateToLogin();
        return false;
    }
}
AuthenticationFlowGuard.decorators = [
    { type: Injectable }
];
AuthenticationFlowGuard.ctorParameters = () => [
    { type: AuthService }
];

const ɵ0 = {
    replaceableComponent: {
        key: "Account.LoginComponent" /* Login */,
        defaultComponent: LoginComponent,
    },
}, ɵ1 = {
    replaceableComponent: {
        key: "Account.RegisterComponent" /* Register */,
        defaultComponent: RegisterComponent,
    },
}, ɵ2 = {
    replaceableComponent: {
        key: "Account.ForgotPasswordComponent" /* ForgotPassword */,
        defaultComponent: ForgotPasswordComponent,
    },
}, ɵ3 = {
    tenantBoxVisible: false,
    replaceableComponent: {
        key: "Account.ResetPasswordComponent" /* ResetPassword */,
        defaultComponent: ResetPasswordComponent,
    },
}, ɵ4 = {
    replaceableComponent: {
        key: "Account.ManageProfileComponent" /* ManageProfile */,
        defaultComponent: ManageProfileComponent,
    },
};
const routes = [
    { path: '', pathMatch: 'full', redirectTo: 'login' },
    {
        path: '',
        component: DynamicLayoutComponent,
        children: [
            {
                path: 'login',
                component: ReplaceableRouteContainerComponent,
                canActivate: [AuthenticationFlowGuard],
                data: ɵ0,
            },
            {
                path: 'register',
                component: ReplaceableRouteContainerComponent,
                canActivate: [AuthenticationFlowGuard],
                data: ɵ1,
            },
            {
                path: 'forgot-password',
                component: ReplaceableRouteContainerComponent,
                canActivate: [AuthenticationFlowGuard],
                data: ɵ2,
            },
            {
                path: 'reset-password',
                component: ReplaceableRouteContainerComponent,
                canActivate: [],
                data: ɵ3,
            },
            {
                path: 'manage',
                component: ReplaceableRouteContainerComponent,
                canActivate: [AuthGuard],
                data: ɵ4,
            },
        ],
    },
];
class AccountRoutingModule {
}
AccountRoutingModule.decorators = [
    { type: NgModule, args: [{
                imports: [RouterModule.forChild(routes)],
                exports: [RouterModule],
            },] }
];

const { required: required$1 } = Validators;
const PASSWORD_FIELDS = ['newPassword', 'repeatNewPassword'];
class ChangePasswordComponent {
    constructor(fb, injector, toasterService, profileService, manageProfileState) {
        this.fb = fb;
        this.injector = injector;
        this.toasterService = toasterService;
        this.profileService = profileService;
        this.manageProfileState = manageProfileState;
        this.mapErrorsFn = (errors, groupErrors, control) => {
            if (PASSWORD_FIELDS.indexOf(String(control.name)) < 0)
                return errors;
            return errors.concat(groupErrors.filter(({ key }) => key === 'passwordMismatch'));
        };
    }
    ngOnInit() {
        var _a;
        this.hideCurrentPassword = !((_a = this.manageProfileState.getProfile()) === null || _a === void 0 ? void 0 : _a.hasPassword);
        const passwordValidations = getPasswordValidators(this.injector);
        this.form = this.fb.group({
            password: ['', required$1],
            newPassword: [
                '',
                {
                    validators: [required$1, ...passwordValidations],
                },
            ],
            repeatNewPassword: [
                '',
                {
                    validators: [required$1, ...passwordValidations],
                },
            ],
        }, {
            validators: [comparePasswords(PASSWORD_FIELDS)],
        });
        if (this.hideCurrentPassword)
            this.form.removeControl('password');
    }
    onSubmit() {
        if (this.form.invalid)
            return;
        this.inProgress = true;
        this.profileService
            .changePassword(Object.assign(Object.assign({}, (!this.hideCurrentPassword && { currentPassword: this.form.get('password').value })), { newPassword: this.form.get('newPassword').value }))
            .pipe(finalize(() => (this.inProgress = false)))
            .subscribe({
            next: () => {
                this.form.reset();
                this.toasterService.success('AbpAccount::PasswordChangedMessage', '', {
                    life: 5000,
                });
                if (this.hideCurrentPassword) {
                    this.hideCurrentPassword = false;
                    this.form.addControl('password', new FormControl('', [required$1]));
                }
            },
            error: err => {
                this.toasterService.error(snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'));
            },
        });
    }
}
ChangePasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-change-password-form',
                template: "<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" [mapErrorsFn]=\"mapErrorsFn\" validateOnSubmit>\n  <div *ngIf=\"!hideCurrentPassword\" class=\"form-group\">\n    <label for=\"current-password\">{{\n      'AbpIdentity::DisplayName:CurrentPassword' | abpLocalization\n    }}</label\n    ><span> * </span\n    ><input\n      type=\"password\"\n      id=\"current-password\"\n      class=\"form-control\"\n      formControlName=\"password\"\n      autofocus\n      autocomplete=\"current-password\"\n    />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"new-password\">{{ 'AbpIdentity::DisplayName:NewPassword' | abpLocalization }}</label\n    ><span> * </span\n    ><input\n      type=\"password\"\n      id=\"new-password\"\n      class=\"form-control\"\n      formControlName=\"newPassword\"\n      autocomplete=\"new-password\"\n    />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"confirm-new-password\">{{\n      'AbpIdentity::DisplayName:NewPasswordConfirm' | abpLocalization\n    }}</label\n    ><span> * </span\n    ><input\n      type=\"password\"\n      id=\"confirm-new-password\"\n      class=\"form-control\"\n      formControlName=\"repeatNewPassword\"\n      autocomplete=\"new-password\"\n    />\n  </div>\n  <abp-button\n    iconClass=\"fa fa-check\"\n    buttonClass=\"btn btn-primary color-white\"\n    buttonType=\"submit\"\n    [loading]=\"inProgress\"\n    [disabled]=\"form?.invalid\"\n    >{{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\n  >\n</form>\n",
                exportAs: 'abpChangePasswordForm'
            },] }
];
ChangePasswordComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: Injector },
    { type: ToasterService },
    { type: ProfileService },
    { type: ManageProfileStateService }
];

const { maxLength, required, email } = Validators;
class PersonalSettingsComponent {
    constructor(fb, toasterService, profileService, manageProfileState) {
        this.fb = fb;
        this.toasterService = toasterService;
        this.profileService = profileService;
        this.manageProfileState = manageProfileState;
    }
    ngOnInit() {
        this.buildForm();
    }
    buildForm() {
        const profile = this.manageProfileState.getProfile();
        this.form = this.fb.group({
            userName: [profile.userName, [required, maxLength(256)]],
            email: [profile.email, [required, email, maxLength(256)]],
            name: [profile.name || '', [maxLength(64)]],
            surname: [profile.surname || '', [maxLength(64)]],
            phoneNumber: [profile.phoneNumber || '', [maxLength(16)]],
        });
    }
    submit() {
        if (this.form.invalid)
            return;
        this.inProgress = true;
        this.profileService
            .update(this.form.value)
            .pipe(finalize(() => (this.inProgress = false)))
            .subscribe(profile => {
            this.manageProfileState.setProfile(profile);
            this.toasterService.success('AbpAccount::PersonalSettingsSaved', 'Success', { life: 5000 });
        });
    }
}
PersonalSettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-personal-settings-form',
                template: "<form validateOnSubmit *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n  <div class=\"form-group\">\n    <label for=\"username\">{{ 'AbpIdentity::DisplayName:UserName' | abpLocalization }}</label\n    ><span> * </span\n    ><input\n      type=\"text\"\n      id=\"username\"\n      class=\"form-control\"\n      formControlName=\"userName\"\n      autofocus\n      (keydown.space)=\"$event.preventDefault()\"\n    />\n  </div>\n  <div class=\"row\">\n    <div class=\"col col-md-6\">\n      <div class=\"form-group\">\n        <label for=\"name\">{{ 'AbpIdentity::DisplayName:Name' | abpLocalization }}</label\n        ><input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\" />\n      </div>\n    </div>\n    <div class=\"col col-md-6\">\n      <div class=\"form-group\">\n        <label for=\"surname\">{{ 'AbpIdentity::DisplayName:Surname' | abpLocalization }}</label\n        ><input type=\"text\" id=\"surname\" class=\"form-control\" formControlName=\"surname\" />\n      </div>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"email-address\">{{ 'AbpIdentity::DisplayName:Email' | abpLocalization }}</label\n    ><span> * </span\n    ><input type=\"text\" id=\"email-address\" class=\"form-control\" formControlName=\"email\" />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"phone-number\">{{ 'AbpIdentity::DisplayName:PhoneNumber' | abpLocalization }}</label\n    ><input type=\"text\" id=\"phone-number\" class=\"form-control\" formControlName=\"phoneNumber\" />\n  </div>\n  <abp-button\n    buttonType=\"submit\"\n    iconClass=\"fa fa-check\"\n    buttonClass=\"btn btn-primary color-white\"\n    [loading]=\"inProgress\"\n    [disabled]=\"form?.invalid\"\n  >\n    {{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\n  >\n</form>\n",
                exportAs: 'abpPersonalSettingsForm'
            },] }
];
PersonalSettingsComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: ToasterService },
    { type: ProfileService },
    { type: ManageProfileStateService }
];

function accountConfigOptionsFactory(options) {
    return Object.assign({ redirectUrl: '/' }, options);
}

const declarations = [
    LoginComponent,
    RegisterComponent,
    ChangePasswordComponent,
    ManageProfileComponent,
    PersonalSettingsComponent,
    ForgotPasswordComponent,
    ResetPasswordComponent,
];
class AccountModule {
    static forChild(options = {}) {
        return {
            ngModule: AccountModule,
            providers: [
                AuthenticationFlowGuard,
                { provide: ACCOUNT_CONFIG_OPTIONS, useValue: options },
                {
                    provide: 'ACCOUNT_OPTIONS',
                    useFactory: accountConfigOptionsFactory,
                    deps: [ACCOUNT_CONFIG_OPTIONS],
                },
            ],
        };
    }
    static forLazy(options = {}) {
        return new LazyModuleFactory(AccountModule.forChild(options));
    }
}
AccountModule.decorators = [
    { type: NgModule, args: [{
                declarations: [...declarations],
                imports: [
                    CoreModule,
                    AccountRoutingModule,
                    ThemeSharedModule,
                    NgbDropdownModule,
                    NgxValidateCoreModule,
                ],
                exports: [...declarations],
            },] }
];

var LoginResultType;
(function (LoginResultType) {
    LoginResultType[LoginResultType["Success"] = 1] = "Success";
    LoginResultType[LoginResultType["InvalidUserNameOrPassword"] = 2] = "InvalidUserNameOrPassword";
    LoginResultType[LoginResultType["NotAllowed"] = 3] = "NotAllowed";
    LoginResultType[LoginResultType["LockedOut"] = 4] = "LockedOut";
    LoginResultType[LoginResultType["RequiresTwoFactor"] = 5] = "RequiresTwoFactor";
})(LoginResultType || (LoginResultType = {}));
const loginResultTypeOptions = mapEnumToOptions(LoginResultType);

var index$4 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get LoginResultType () { return LoginResultType; },
    loginResultTypeOptions: loginResultTypeOptions
});

class AccountService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpAccount';
        this.checkPasswordByLogin = (login) => this.restService.request({
            method: 'POST',
            url: '/api/account/check-password',
            body: login,
        }, { apiName: this.apiName });
        this.loginByLogin = (login) => this.restService.request({
            method: 'POST',
            url: '/api/account/login',
            body: login,
        }, { apiName: this.apiName });
        this.logout = () => this.restService.request({
            method: 'GET',
            url: '/api/account/logout',
        }, { apiName: this.apiName });
    }
}
AccountService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AccountService_Factory() { return new AccountService(i0.ɵɵinject(i1.RestService)); }, token: AccountService, providedIn: "root" });
AccountService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
AccountService.ctorParameters = () => [
    { type: RestService }
];

var index$3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Models: index$4,
    AccountService: AccountService
});

var index$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Controllers: index$3
});

var index$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Account: index$2
});

var index = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Areas: index$1
});

/**
 * Generated bundle index. Do not edit.
 */

export { ACCOUNT_CONFIG_OPTIONS, AccountModule, AccountService$1 as AccountService, AuthenticationFlowGuard, ChangePasswordComponent, ForgotPasswordComponent, LoginComponent, ManageProfileComponent, ManageProfileStateService, PersonalSettingsComponent, RegisterComponent, ResetPasswordComponent, index as Web, LoginComponent as ɵa, RegisterComponent as ɵb, AccountService$1 as ɵc, ChangePasswordComponent as ɵd, ManageProfileStateService as ɵe, ManageProfileComponent as ɵf, PersonalSettingsComponent as ɵg, ForgotPasswordComponent as ɵh, ResetPasswordComponent as ɵi, AccountRoutingModule as ɵj, AuthenticationFlowGuard as ɵk, ACCOUNT_CONFIG_OPTIONS as ɵm, accountConfigOptionsFactory as ɵn };
//# sourceMappingURL=abp-ng.account.js.map
