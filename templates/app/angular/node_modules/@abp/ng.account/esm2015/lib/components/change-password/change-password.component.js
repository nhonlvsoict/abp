import { ProfileService } from '@abp/ng.core';
import { getPasswordValidators, ToasterService } from '@abp/ng.theme.shared';
import { Component, Injector } from '@angular/core';
import { FormBuilder, FormControl, Validators } from '@angular/forms';
import { comparePasswords } from '@ngx-validate/core';
import { finalize } from 'rxjs/operators';
import snq from 'snq';
import { ManageProfileStateService } from '../../services/manage-profile.state.service';
const { required } = Validators;
const PASSWORD_FIELDS = ['newPassword', 'repeatNewPassword'];
export class ChangePasswordComponent {
    constructor(fb, injector, toasterService, profileService, manageProfileState) {
        this.fb = fb;
        this.injector = injector;
        this.toasterService = toasterService;
        this.profileService = profileService;
        this.manageProfileState = manageProfileState;
        this.mapErrorsFn = (errors, groupErrors, control) => {
            if (PASSWORD_FIELDS.indexOf(String(control.name)) < 0)
                return errors;
            return errors.concat(groupErrors.filter(({ key }) => key === 'passwordMismatch'));
        };
    }
    ngOnInit() {
        var _a;
        this.hideCurrentPassword = !((_a = this.manageProfileState.getProfile()) === null || _a === void 0 ? void 0 : _a.hasPassword);
        const passwordValidations = getPasswordValidators(this.injector);
        this.form = this.fb.group({
            password: ['', required],
            newPassword: [
                '',
                {
                    validators: [required, ...passwordValidations],
                },
            ],
            repeatNewPassword: [
                '',
                {
                    validators: [required, ...passwordValidations],
                },
            ],
        }, {
            validators: [comparePasswords(PASSWORD_FIELDS)],
        });
        if (this.hideCurrentPassword)
            this.form.removeControl('password');
    }
    onSubmit() {
        if (this.form.invalid)
            return;
        this.inProgress = true;
        this.profileService
            .changePassword(Object.assign(Object.assign({}, (!this.hideCurrentPassword && { currentPassword: this.form.get('password').value })), { newPassword: this.form.get('newPassword').value }))
            .pipe(finalize(() => (this.inProgress = false)))
            .subscribe({
            next: () => {
                this.form.reset();
                this.toasterService.success('AbpAccount::PasswordChangedMessage', '', {
                    life: 5000,
                });
                if (this.hideCurrentPassword) {
                    this.hideCurrentPassword = false;
                    this.form.addControl('password', new FormControl('', [required]));
                }
            },
            error: err => {
                this.toasterService.error(snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'));
            },
        });
    }
}
ChangePasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-change-password-form',
                template: "<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" [mapErrorsFn]=\"mapErrorsFn\" validateOnSubmit>\n  <div *ngIf=\"!hideCurrentPassword\" class=\"form-group\">\n    <label for=\"current-password\">{{\n      'AbpIdentity::DisplayName:CurrentPassword' | abpLocalization\n    }}</label\n    ><span> * </span\n    ><input\n      type=\"password\"\n      id=\"current-password\"\n      class=\"form-control\"\n      formControlName=\"password\"\n      autofocus\n      autocomplete=\"current-password\"\n    />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"new-password\">{{ 'AbpIdentity::DisplayName:NewPassword' | abpLocalization }}</label\n    ><span> * </span\n    ><input\n      type=\"password\"\n      id=\"new-password\"\n      class=\"form-control\"\n      formControlName=\"newPassword\"\n      autocomplete=\"new-password\"\n    />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"confirm-new-password\">{{\n      'AbpIdentity::DisplayName:NewPasswordConfirm' | abpLocalization\n    }}</label\n    ><span> * </span\n    ><input\n      type=\"password\"\n      id=\"confirm-new-password\"\n      class=\"form-control\"\n      formControlName=\"repeatNewPassword\"\n      autocomplete=\"new-password\"\n    />\n  </div>\n  <abp-button\n    iconClass=\"fa fa-check\"\n    buttonClass=\"btn btn-primary color-white\"\n    buttonType=\"submit\"\n    [loading]=\"inProgress\"\n    [disabled]=\"form?.invalid\"\n    >{{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\n  >\n</form>\n",
                exportAs: 'abpChangePasswordForm'
            },] }
];
ChangePasswordComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: Injector },
    { type: ToasterService },
    { type: ProfileService },
    { type: ManageProfileStateService }
];
//# sourceMappingURL=data:application/json;base64,