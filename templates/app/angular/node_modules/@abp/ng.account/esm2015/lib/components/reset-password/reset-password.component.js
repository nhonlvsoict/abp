import { getPasswordValidators } from '@abp/ng.theme.shared';
import { Component, Injector } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { comparePasswords } from '@ngx-validate/core';
import { finalize } from 'rxjs/operators';
import { AccountService } from '../../proxy/account/account.service';
const PASSWORD_FIELDS = ['password', 'confirmPassword'];
export class ResetPasswordComponent {
    constructor(fb, accountService, route, router, injector) {
        this.fb = fb;
        this.accountService = accountService;
        this.route = route;
        this.router = router;
        this.injector = injector;
        this.inProgress = false;
        this.isPasswordReset = false;
        this.mapErrorsFn = (errors, groupErrors, control) => {
            if (PASSWORD_FIELDS.indexOf(String(control.name)) < 0)
                return errors;
            return errors.concat(groupErrors.filter(({ key }) => key === 'passwordMismatch'));
        };
    }
    ngOnInit() {
        this.route.queryParams.subscribe(({ userId, resetToken }) => {
            if (!userId || !resetToken)
                this.router.navigateByUrl('/account/login');
            this.form = this.fb.group({
                userId: [userId, [Validators.required]],
                resetToken: [resetToken, [Validators.required]],
                password: ['', [Validators.required, ...getPasswordValidators(this.injector)]],
                confirmPassword: ['', [Validators.required, ...getPasswordValidators(this.injector)]],
            }, {
                validators: [comparePasswords(PASSWORD_FIELDS)],
            });
        });
    }
    onSubmit() {
        if (this.form.invalid || this.inProgress)
            return;
        this.inProgress = true;
        this.accountService
            .resetPassword({
            userId: this.form.get('userId').value,
            resetToken: this.form.get('resetToken').value,
            password: this.form.get('password').value,
        })
            .pipe(finalize(() => (this.inProgress = false)))
            .subscribe(() => {
            this.isPasswordReset = true;
        });
    }
}
ResetPasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-reset-password',
                template: "<h4>{{ 'AbpAccount::ResetPassword' | abpLocalization }}</h4>\n\n<form\n  *ngIf=\"!isPasswordReset; else passwordResetTemplate\"\n  [formGroup]=\"form\"\n  [mapErrorsFn]=\"mapErrorsFn\"\n  (ngSubmit)=\"onSubmit()\"\n  validateOnSubmit\n>\n  <p>{{ 'AbpAccount::ResetPassword_Information' | abpLocalization }}</p>\n  <div class=\"form-group\">\n    <label for=\"input-password\">{{ 'AbpAccount::Password' | abpLocalization }}</label\n    ><span> * </span>\n    <input type=\"password\" id=\"input-password\" class=\"form-control\" formControlName=\"password\" />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"input-confirm-password\">{{ 'AbpAccount::ConfirmPassword' | abpLocalization }}</label\n    ><span> * </span>\n    <input\n      type=\"password\"\n      id=\"input-confirm-password\"\n      class=\"form-control\"\n      formControlName=\"confirmPassword\"\n    />\n  </div>\n  <button class=\"mr-2 btn btn-secondary\" type=\"button\" routerLink=\"/account/login\">\n    {{ 'AbpAccount::Cancel' | abpLocalization }}\n  </button>\n  <abp-button\n    buttonType=\"submit\"\n    buttonClass=\"mr-2 btn btn-primary\"\n    [loading]=\"inProgress\"\n    (click)=\"onSubmit()\"\n  >\n    {{ 'AbpAccount::Submit' | abpLocalization }}\n  </abp-button>\n</form>\n\n<ng-template #passwordResetTemplate>\n  <p>\n    {{ 'AbpAccount::YourPasswordIsSuccessfullyReset' | abpLocalization }}\n  </p>\n\n  <a routerLink=\"/account/login\">\n    <button class=\"d-block mt-2 mb-3 btn btn-primary\">\n      {{ 'AbpAccount::BackToLogin' | abpLocalization }}\n    </button>\n  </a>\n</ng-template>\n"
            },] }
];
ResetPasswordComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: AccountService },
    { type: ActivatedRoute },
    { type: Router },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXQtcGFzc3dvcmQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYWNjb3VudC9zcmMvbGliL2NvbXBvbmVudHMvcmVzZXQtcGFzc3dvcmQvcmVzZXQtcGFzc3dvcmQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzdELE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBRSxXQUFXLEVBQWEsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQWMsTUFBTSxvQkFBb0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRXJFLE1BQU0sZUFBZSxHQUFHLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFNeEQsTUFBTSxPQUFPLHNCQUFzQjtJQWFqQyxZQUNVLEVBQWUsRUFDZixjQUE4QixFQUM5QixLQUFxQixFQUNyQixNQUFjLEVBQ2QsUUFBa0I7UUFKbEIsT0FBRSxHQUFGLEVBQUUsQ0FBYTtRQUNmLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUNyQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQWY1QixlQUFVLEdBQUcsS0FBSyxDQUFDO1FBRW5CLG9CQUFlLEdBQUcsS0FBSyxDQUFDO1FBRXhCLGdCQUFXLEdBQTJCLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsRUFBRTtZQUNyRSxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUM7Z0JBQUUsT0FBTyxNQUFNLENBQUM7WUFFckUsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBQ3BGLENBQUMsQ0FBQztJQVFDLENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRTtZQUMxRCxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsVUFBVTtnQkFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBRXhFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQ3ZCO2dCQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDdkMsVUFBVSxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMvQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQzlFLGVBQWUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUN0RixFQUNEO2dCQUNFLFVBQVUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDO2FBQ2hELENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxVQUFVO1lBQUUsT0FBTztRQUVqRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUV2QixJQUFJLENBQUMsY0FBYzthQUNoQixhQUFhLENBQUM7WUFDYixNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSztZQUNyQyxVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSztZQUM3QyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSztTQUMxQyxDQUFDO2FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUMvQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzs7WUExREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLHFrREFBOEM7YUFDL0M7OztZQVhRLFdBQVc7WUFJWCxjQUFjO1lBSGQsY0FBYztZQUFFLE1BQU07WUFGWCxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0UGFzc3dvcmRWYWxpZGF0b3JzIH0gZnJvbSAnQGFicC9uZy50aGVtZS5zaGFyZWQnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3RvciwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciwgRm9ybUdyb3VwLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBjb21wYXJlUGFzc3dvcmRzLCBWYWxpZGF0aW9uIH0gZnJvbSAnQG5neC12YWxpZGF0ZS9jb3JlJztcbmltcG9ydCB7IGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQWNjb3VudFNlcnZpY2UgfSBmcm9tICcuLi8uLi9wcm94eS9hY2NvdW50L2FjY291bnQuc2VydmljZSc7XG5cbmNvbnN0IFBBU1NXT1JEX0ZJRUxEUyA9IFsncGFzc3dvcmQnLCAnY29uZmlybVBhc3N3b3JkJ107XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FicC1yZXNldC1wYXNzd29yZCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9yZXNldC1wYXNzd29yZC5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIFJlc2V0UGFzc3dvcmRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBmb3JtOiBGb3JtR3JvdXA7XG5cbiAgaW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gIGlzUGFzc3dvcmRSZXNldCA9IGZhbHNlO1xuXG4gIG1hcEVycm9yc0ZuOiBWYWxpZGF0aW9uLk1hcEVycm9yc0ZuID0gKGVycm9ycywgZ3JvdXBFcnJvcnMsIGNvbnRyb2wpID0+IHtcbiAgICBpZiAoUEFTU1dPUkRfRklFTERTLmluZGV4T2YoU3RyaW5nKGNvbnRyb2wubmFtZSkpIDwgMCkgcmV0dXJuIGVycm9ycztcblxuICAgIHJldHVybiBlcnJvcnMuY29uY2F0KGdyb3VwRXJyb3JzLmZpbHRlcigoeyBrZXkgfSkgPT4ga2V5ID09PSAncGFzc3dvcmRNaXNtYXRjaCcpKTtcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGZiOiBGb3JtQnVpbGRlcixcbiAgICBwcml2YXRlIGFjY291bnRTZXJ2aWNlOiBBY2NvdW50U2VydmljZSxcbiAgICBwcml2YXRlIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICApIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5yb3V0ZS5xdWVyeVBhcmFtcy5zdWJzY3JpYmUoKHsgdXNlcklkLCByZXNldFRva2VuIH0pID0+IHtcbiAgICAgIGlmICghdXNlcklkIHx8ICFyZXNldFRva2VuKSB0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKCcvYWNjb3VudC9sb2dpbicpO1xuXG4gICAgICB0aGlzLmZvcm0gPSB0aGlzLmZiLmdyb3VwKFxuICAgICAgICB7XG4gICAgICAgICAgdXNlcklkOiBbdXNlcklkLCBbVmFsaWRhdG9ycy5yZXF1aXJlZF1dLFxuICAgICAgICAgIHJlc2V0VG9rZW46IFtyZXNldFRva2VuLCBbVmFsaWRhdG9ycy5yZXF1aXJlZF1dLFxuICAgICAgICAgIHBhc3N3b3JkOiBbJycsIFtWYWxpZGF0b3JzLnJlcXVpcmVkLCAuLi5nZXRQYXNzd29yZFZhbGlkYXRvcnModGhpcy5pbmplY3RvcildXSxcbiAgICAgICAgICBjb25maXJtUGFzc3dvcmQ6IFsnJywgW1ZhbGlkYXRvcnMucmVxdWlyZWQsIC4uLmdldFBhc3N3b3JkVmFsaWRhdG9ycyh0aGlzLmluamVjdG9yKV1dLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdmFsaWRhdG9yczogW2NvbXBhcmVQYXNzd29yZHMoUEFTU1dPUkRfRklFTERTKV0sXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgb25TdWJtaXQoKSB7XG4gICAgaWYgKHRoaXMuZm9ybS5pbnZhbGlkIHx8IHRoaXMuaW5Qcm9ncmVzcykgcmV0dXJuO1xuXG4gICAgdGhpcy5pblByb2dyZXNzID0gdHJ1ZTtcblxuICAgIHRoaXMuYWNjb3VudFNlcnZpY2VcbiAgICAgIC5yZXNldFBhc3N3b3JkKHtcbiAgICAgICAgdXNlcklkOiB0aGlzLmZvcm0uZ2V0KCd1c2VySWQnKS52YWx1ZSxcbiAgICAgICAgcmVzZXRUb2tlbjogdGhpcy5mb3JtLmdldCgncmVzZXRUb2tlbicpLnZhbHVlLFxuICAgICAgICBwYXNzd29yZDogdGhpcy5mb3JtLmdldCgncGFzc3dvcmQnKS52YWx1ZSxcbiAgICAgIH0pXG4gICAgICAucGlwZShmaW5hbGl6ZSgoKSA9PiAodGhpcy5pblByb2dyZXNzID0gZmFsc2UpKSlcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLmlzUGFzc3dvcmRSZXNldCA9IHRydWU7XG4gICAgICB9KTtcbiAgfVxufVxuIl19