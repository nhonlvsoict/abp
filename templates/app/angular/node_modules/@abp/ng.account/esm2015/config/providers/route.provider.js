import { RoutesService } from '@abp/ng.core';
import { APP_INITIALIZER } from '@angular/core';
export const ACCOUNT_ROUTE_PROVIDERS = [
    { provide: APP_INITIALIZER, useFactory: configureRoutes, deps: [RoutesService], multi: true },
];
export function configureRoutes(routes) {
    return () => {
        routes.add([
            {
                path: undefined,
                name: "AbpAccount::Menu:Account" /* Account */,
                invisible: true,
                layout: "account" /* account */,
                order: 1,
            },
            {
                path: '/account/login',
                name: "AbpAccount::Login" /* Login */,
                parentName: "AbpAccount::Menu:Account" /* Account */,
                order: 1,
            },
            {
                path: '/account/register',
                name: "AbpAccount::Register" /* Register */,
                parentName: "AbpAccount::Menu:Account" /* Account */,
                order: 2,
            },
            {
                path: '/account/manage',
                name: "AbpAccount::MyAccount" /* ManageProfile */,
                parentName: "AbpAccount::Menu:Account" /* Account */,
                layout: "application" /* application */,
                order: 3,
            },
            {
                path: '/account/forgot-password',
                parentName: "AbpAccount::Menu:Account" /* Account */,
                name: "AbpAccount::ForgotPassword" /* ForgotPassword */,
                invisible: true,
            },
            {
                path: '/account/reset-password',
                parentName: "AbpAccount::Menu:Account" /* Account */,
                name: "AbpAccount::ResetPassword" /* ResetPassword */,
                invisible: true,
            },
        ]);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hY2NvdW50L2NvbmZpZy9zcmMvcHJvdmlkZXJzL3JvdXRlLnByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdoRCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRztJQUNyQyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0NBQzlGLENBQUM7QUFFRixNQUFNLFVBQVUsZUFBZSxDQUFDLE1BQXFCO0lBQ25ELE9BQU8sR0FBRyxFQUFFO1FBQ1YsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUNUO2dCQUNFLElBQUksRUFBRSxTQUFTO2dCQUNmLElBQUksMENBQTRCO2dCQUNoQyxTQUFTLEVBQUUsSUFBSTtnQkFDZixNQUFNLHlCQUFxQjtnQkFDM0IsS0FBSyxFQUFFLENBQUM7YUFDVDtZQUNEO2dCQUNFLElBQUksRUFBRSxnQkFBZ0I7Z0JBQ3RCLElBQUksaUNBQTBCO2dCQUM5QixVQUFVLDBDQUE0QjtnQkFDdEMsS0FBSyxFQUFFLENBQUM7YUFDVDtZQUNEO2dCQUNFLElBQUksRUFBRSxtQkFBbUI7Z0JBQ3pCLElBQUksdUNBQTZCO2dCQUNqQyxVQUFVLDBDQUE0QjtnQkFDdEMsS0FBSyxFQUFFLENBQUM7YUFDVDtZQUNEO2dCQUNFLElBQUksRUFBRSxpQkFBaUI7Z0JBQ3ZCLElBQUksNkNBQWtDO2dCQUN0QyxVQUFVLDBDQUE0QjtnQkFDdEMsTUFBTSxpQ0FBeUI7Z0JBQy9CLEtBQUssRUFBRSxDQUFDO2FBQ1Q7WUFDRDtnQkFDRSxJQUFJLEVBQUUsMEJBQTBCO2dCQUNoQyxVQUFVLDBDQUE0QjtnQkFDdEMsSUFBSSxtREFBbUM7Z0JBQ3ZDLFNBQVMsRUFBRSxJQUFJO2FBQ2hCO1lBQ0Q7Z0JBQ0UsSUFBSSxFQUFFLHlCQUF5QjtnQkFDL0IsVUFBVSwwQ0FBNEI7Z0JBQ3RDLElBQUksaURBQWtDO2dCQUN0QyxTQUFTLEVBQUUsSUFBSTthQUNoQjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlTGF5b3V0VHlwZSwgUm91dGVzU2VydmljZSB9IGZyb20gJ0BhYnAvbmcuY29yZSc7XG5pbXBvcnQgeyBBUFBfSU5JVElBTElaRVIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGVBY2NvdW50Um91dGVOYW1lcyB9IGZyb20gJy4uL2VudW1zL3JvdXRlLW5hbWVzJztcblxuZXhwb3J0IGNvbnN0IEFDQ09VTlRfUk9VVEVfUFJPVklERVJTID0gW1xuICB7IHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUiwgdXNlRmFjdG9yeTogY29uZmlndXJlUm91dGVzLCBkZXBzOiBbUm91dGVzU2VydmljZV0sIG11bHRpOiB0cnVlIH0sXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlUm91dGVzKHJvdXRlczogUm91dGVzU2VydmljZSkge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHJvdXRlcy5hZGQoW1xuICAgICAge1xuICAgICAgICBwYXRoOiB1bmRlZmluZWQsXG4gICAgICAgIG5hbWU6IGVBY2NvdW50Um91dGVOYW1lcy5BY2NvdW50LFxuICAgICAgICBpbnZpc2libGU6IHRydWUsXG4gICAgICAgIGxheW91dDogZUxheW91dFR5cGUuYWNjb3VudCxcbiAgICAgICAgb3JkZXI6IDEsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXRoOiAnL2FjY291bnQvbG9naW4nLFxuICAgICAgICBuYW1lOiBlQWNjb3VudFJvdXRlTmFtZXMuTG9naW4sXG4gICAgICAgIHBhcmVudE5hbWU6IGVBY2NvdW50Um91dGVOYW1lcy5BY2NvdW50LFxuICAgICAgICBvcmRlcjogMSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdGg6ICcvYWNjb3VudC9yZWdpc3RlcicsXG4gICAgICAgIG5hbWU6IGVBY2NvdW50Um91dGVOYW1lcy5SZWdpc3RlcixcbiAgICAgICAgcGFyZW50TmFtZTogZUFjY291bnRSb3V0ZU5hbWVzLkFjY291bnQsXG4gICAgICAgIG9yZGVyOiAyLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcGF0aDogJy9hY2NvdW50L21hbmFnZScsXG4gICAgICAgIG5hbWU6IGVBY2NvdW50Um91dGVOYW1lcy5NYW5hZ2VQcm9maWxlLFxuICAgICAgICBwYXJlbnROYW1lOiBlQWNjb3VudFJvdXRlTmFtZXMuQWNjb3VudCxcbiAgICAgICAgbGF5b3V0OiBlTGF5b3V0VHlwZS5hcHBsaWNhdGlvbixcbiAgICAgICAgb3JkZXI6IDMsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXRoOiAnL2FjY291bnQvZm9yZ290LXBhc3N3b3JkJyxcbiAgICAgICAgcGFyZW50TmFtZTogZUFjY291bnRSb3V0ZU5hbWVzLkFjY291bnQsXG4gICAgICAgIG5hbWU6IGVBY2NvdW50Um91dGVOYW1lcy5Gb3Jnb3RQYXNzd29yZCxcbiAgICAgICAgaW52aXNpYmxlOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcGF0aDogJy9hY2NvdW50L3Jlc2V0LXBhc3N3b3JkJyxcbiAgICAgICAgcGFyZW50TmFtZTogZUFjY291bnRSb3V0ZU5hbWVzLkFjY291bnQsXG4gICAgICAgIG5hbWU6IGVBY2NvdW50Um91dGVOYW1lcy5SZXNldFBhc3N3b3JkLFxuICAgICAgICBpbnZpc2libGU6IHRydWUsXG4gICAgICB9LFxuICAgIF0pO1xuICB9O1xufVxuIl19