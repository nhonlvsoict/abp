(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@abp/ng.core'), require('@abp/ng.theme.shared'), require('@angular/core'), require('@ng-bootstrap/ng-bootstrap'), require('@ngx-validate/core'), require('@angular/router'), require('@angular/forms'), require('rxjs/operators'), require('rxjs'), require('snq'), require('@angular/animations')) :
    typeof define === 'function' && define.amd ? define('@abp/ng.account', ['exports', '@abp/ng.core', '@abp/ng.theme.shared', '@angular/core', '@ng-bootstrap/ng-bootstrap', '@ngx-validate/core', '@angular/router', '@angular/forms', 'rxjs/operators', 'rxjs', 'snq', '@angular/animations'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.abp = global.abp || {}, global.abp.ng = global.abp.ng || {}, global.abp.ng.account = {}), global.i1, global.ng_theme_shared, global.ng.core, global.ngBootstrap, global.core, global.ng.router, global.ng.forms, global.rxjs.operators, global.rxjs, global.snq, global.ng.animations));
}(this, (function (exports, i1, ng_theme_shared, i0, ngBootstrap, core, router, forms, operators, rxjs, snq, animations) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var snq__default = /*#__PURE__*/_interopDefaultLegacy(snq);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var AccountService$1 = /** @class */ (function () {
        function AccountService(restService) {
            var _this = this;
            this.restService = restService;
            this.apiName = 'AbpAccount';
            this.register = function (input) { return _this.restService.request({
                method: 'POST',
                url: '/api/account/register',
                body: input,
            }, { apiName: _this.apiName }); };
            this.resetPassword = function (input) { return _this.restService.request({
                method: 'POST',
                url: '/api/account/reset-password',
                body: input,
            }, { apiName: _this.apiName }); };
            this.sendPasswordResetCode = function (input) { return _this.restService.request({
                method: 'POST',
                url: '/api/account/send-password-reset-code',
                body: input,
            }, { apiName: _this.apiName }); };
        }
        return AccountService;
    }());
    AccountService$1.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function AccountService_Factory() { return new AccountService$1(i0__namespace.ɵɵinject(i1__namespace.RestService)); }, token: AccountService$1, providedIn: "root" });
    AccountService$1.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AccountService$1.ctorParameters = function () { return [
        { type: i1.RestService }
    ]; };

    var ForgotPasswordComponent = /** @class */ (function () {
        function ForgotPasswordComponent(fb, accountService) {
            this.fb = fb;
            this.accountService = accountService;
            this.isEmailSent = false;
            this.form = this.fb.group({
                email: ['', [forms.Validators.required, forms.Validators.email]],
            });
        }
        ForgotPasswordComponent.prototype.onSubmit = function () {
            var _this = this;
            if (this.form.invalid)
                return;
            this.inProgress = true;
            this.accountService
                .sendPasswordResetCode({ email: this.form.get('email').value, appName: 'Angular' })
                .pipe(operators.finalize(function () { return (_this.inProgress = false); }))
                .subscribe(function () {
                _this.isEmailSent = true;
            });
        };
        return ForgotPasswordComponent;
    }());
    ForgotPasswordComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'abp-forgot-password',
                    template: "<h4>{{ 'AbpAccount::ForgotPassword' | abpLocalization }}</h4>\n\n<form\n  *ngIf=\"!isEmailSent; else emailSentTemplate\"\n  [formGroup]=\"form\"\n  (ngSubmit)=\"onSubmit()\"\n  validateOnSubmit\n>\n  <p>{{ 'AbpAccount::SendPasswordResetLink_Information' | abpLocalization }}</p>\n  <div class=\"form-group\">\n    <label for=\"input-email-address\">{{ 'AbpAccount::EmailAddress' | abpLocalization }}</label\n    ><span> * </span>\n    <input type=\"email\" id=\"input-email-address\" class=\"form-control\" formControlName=\"email\" />\n  </div>\n  <abp-button\n    class=\"d-block\"\n    buttonClass=\"mt-2 mb-3 btn btn-primary btn-block\"\n    [loading]=\"inProgress\"\n    buttonType=\"submit\"\n    [disabled]=\"form?.invalid\"\n  >\n    {{ 'AbpAccount::Submit' | abpLocalization }}\n  </abp-button>\n  <a routerLink=\"/account/login\"\n    ><i class=\"fa fa-long-arrow-left mr-1\"></i>{{ 'AbpAccount::Login' | abpLocalization }}</a\n  >\n</form>\n\n<ng-template #emailSentTemplate>\n  <p>\n    {{ 'AbpAccount::PasswordResetMailSentMessage' | abpLocalization }}\n  </p>\n\n  <a routerLink=\"/account/login\">\n    <button class=\"d-block mt-2 mb-3 btn btn-primary btn-block\">\n      <i class=\"fa fa-long-arrow-left mr-1\"></i>\n      {{ 'AbpAccount::BackToLogin' | abpLocalization }}\n    </button>\n  </a>\n</ng-template>\n"
                },] }
    ];
    ForgotPasswordComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: AccountService$1 }
    ]; };

    var ACCOUNT_CONFIG_OPTIONS = new i0.InjectionToken('ACCOUNT_CONFIG_OPTIONS');

    function getRedirectUrl(injector) {
        var route = injector.get(router.ActivatedRoute);
        var options = injector.get(ACCOUNT_CONFIG_OPTIONS);
        return route.snapshot.queryParams.returnUrl || options.redirectUrl || '/';
    }

    var maxLength$2 = forms.Validators.maxLength, required$3 = forms.Validators.required;
    var LoginComponent = /** @class */ (function () {
        function LoginComponent(injector, fb, toasterService, authService, configState) {
            this.injector = injector;
            this.fb = fb;
            this.toasterService = toasterService;
            this.authService = authService;
            this.configState = configState;
            this.isSelfRegistrationEnabled = true;
            this.authWrapperKey = "Account.AuthWrapperComponent" /* AuthWrapper */;
        }
        LoginComponent.prototype.ngOnInit = function () {
            this.init();
            this.buildForm();
        };
        LoginComponent.prototype.init = function () {
            this.isSelfRegistrationEnabled =
                (this.configState.getSetting('Abp.Account.IsSelfRegistrationEnabled') || '').toLowerCase() !== 'false';
        };
        LoginComponent.prototype.buildForm = function () {
            this.form = this.fb.group({
                username: ['', [required$3, maxLength$2(255)]],
                password: ['', [required$3, maxLength$2(128)]],
                rememberMe: [false],
            });
        };
        LoginComponent.prototype.onSubmit = function () {
            var _this = this;
            if (this.form.invalid)
                return;
            this.inProgress = true;
            var _a = this.form.value, username = _a.username, password = _a.password, rememberMe = _a.rememberMe;
            var redirectUrl = getRedirectUrl(this.injector);
            this.authService
                .login({ username: username, password: password, rememberMe: rememberMe, redirectUrl: redirectUrl })
                .pipe(operators.catchError(function (err) {
                _this.toasterService.error(snq__default['default'](function () { return err.error.error_description; }) ||
                    snq__default['default'](function () { return err.error.error.message; }, 'AbpAccount::DefaultErrorMessage'), 'Error', { life: 7000 });
                return rxjs.throwError(err);
            }), operators.finalize(function () { return (_this.inProgress = false); }))
                .subscribe();
        };
        return LoginComponent;
    }());
    LoginComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'abp-login',
                    template: "<h4>{{ 'AbpAccount::Login' | abpLocalization }}</h4>\n<strong *ngIf=\"isSelfRegistrationEnabled\">\n  {{ 'AbpAccount::AreYouANewUser' | abpLocalization }}\n  <a class=\"text-decoration-none\" routerLink=\"/account/register\" queryParamsHandling=\"preserve\">{{\n    'AbpAccount::Register' | abpLocalization\n  }}</a>\n</strong>\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" validateOnSubmit class=\"mt-4\">\n  <div class=\"form-group\">\n    <label for=\"login-input-user-name-or-email-address\">{{\n      'AbpAccount::UserNameOrEmailAddress' | abpLocalization\n    }}</label>\n    <input\n      class=\"form-control\"\n      type=\"text\"\n      id=\"login-input-user-name-or-email-address\"\n      formControlName=\"username\"\n      autocomplete=\"username\"\n      autofocus\n    />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"login-input-password\">{{ 'AbpAccount::Password' | abpLocalization }}</label>\n    <input\n      class=\"form-control\"\n      type=\"password\"\n      id=\"login-input-password\"\n      formControlName=\"password\"\n      autocomplete=\"current-password\"\n    />\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col\">\n      <label class=\"custom-checkbox custom-control mb-2\" for=\"login-input-remember-me\">\n        <input\n          class=\"form-check-input\"\n          type=\"checkbox\"\n          id=\"login-input-remember-me\"\n          formControlName=\"rememberMe\"\n        />\n        {{ 'AbpAccount::RememberMe' | abpLocalization }}\n      </label>\n    </div>\n    <div class=\"text-right col\">\n      <a routerLink=\"/account/forgot-password\">{{\n        'AbpAccount::ForgotPassword' | abpLocalization\n      }}</a>\n    </div>\n  </div>\n\n  <abp-button\n    [loading]=\"inProgress\"\n    buttonType=\"submit\"\n    name=\"Action\"\n    buttonClass=\"btn-block btn-lg mt-3 btn btn-primary\"\n  >\n    {{ 'AbpAccount::Login' | abpLocalization }}\n  </abp-button>\n</form>\n"
                },] }
    ];
    LoginComponent.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: forms.FormBuilder },
        { type: ng_theme_shared.ToasterService },
        { type: i1.AuthService },
        { type: i1.ConfigStateService }
    ]; };

    var ManageProfileStateService = /** @class */ (function () {
        function ManageProfileStateService() {
            this.store = new i1.InternalStore({});
        }
        Object.defineProperty(ManageProfileStateService.prototype, "createOnUpdateStream", {
            get: function () {
                return this.store.sliceUpdate;
            },
            enumerable: false,
            configurable: true
        });
        ManageProfileStateService.prototype.getProfile$ = function () {
            return this.store.sliceState(function (state) { return state.profile; });
        };
        ManageProfileStateService.prototype.getProfile = function () {
            return this.store.state.profile;
        };
        ManageProfileStateService.prototype.setProfile = function (profile) {
            this.store.patch({ profile: profile });
        };
        return ManageProfileStateService;
    }());
    ManageProfileStateService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ManageProfileStateService_Factory() { return new ManageProfileStateService(); }, token: ManageProfileStateService, providedIn: "root" });
    ManageProfileStateService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    var ManageProfileComponent = /** @class */ (function () {
        function ManageProfileComponent(profileService, manageProfileState) {
            this.profileService = profileService;
            this.manageProfileState = manageProfileState;
            this.selectedTab = 0;
            this.changePasswordKey = "Account.ChangePasswordComponent" /* ChangePassword */;
            this.personalSettingsKey = "Account.PersonalSettingsComponent" /* PersonalSettings */;
            this.profile$ = this.manageProfileState.getProfile$();
        }
        ManageProfileComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.profileService.get().subscribe(function (profile) {
                _this.manageProfileState.setProfile(profile);
                if (profile.isExternal) {
                    _this.hideChangePasswordTab = true;
                    _this.selectedTab = 1;
                }
            });
        };
        return ManageProfileComponent;
    }());
    ManageProfileComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'abp-manage-profile',
                    template: "<div id=\"AbpContentToolbar\"></div>\n\n<div class=\"card border-0 shadow-sm min-h-400\" [abpLoading]=\"!(profile$ | async)\">\n  <div class=\"card-body\">\n    <div class=\"row\">\n      <div class=\"col-12 col-md-3\">\n        <ul class=\"nav flex-column nav-pills\" id=\"nav-tab\" role=\"tablist\">\n          <li\n            *ngIf=\"!hideChangePasswordTab && (profile$ | async)\"\n            class=\"nav-item\"\n            (click)=\"selectedTab = 0\"\n          >\n            <a\n              class=\"nav-link\"\n              [ngClass]=\"{ active: selectedTab === 0 }\"\n              role=\"tab\"\n              href=\"javascript:void(0)\"\n              >{{ 'AbpUi::ChangePassword' | abpLocalization }}</a\n            >\n          </li>\n          <li class=\"nav-item mb-2\" (click)=\"selectedTab = 1\">\n            <a\n              class=\"nav-link\"\n              [ngClass]=\"{ active: selectedTab === 1 }\"\n              role=\"tab\"\n              href=\"javascript:void(0)\"\n              >{{ 'AbpAccount::PersonalSettings' | abpLocalization }}</a\n            >\n          </li>\n        </ul>\n      </div>\n      <div *ngIf=\"profile$ | async\" class=\"col-12 col-md-9\">\n        <div class=\"tab-content\" *ngIf=\"selectedTab === 0\" [@fadeIn]>\n          <div class=\"tab-pane active\" role=\"tabpanel\">\n            <h4>\n              {{ 'AbpIdentity::ChangePassword' | abpLocalization }}\n              <hr />\n            </h4>\n            <abp-change-password-form\n              *abpReplaceableTemplate=\"{\n                componentKey: changePasswordKey\n              }\"\n            ></abp-change-password-form>\n          </div>\n        </div>\n        <div class=\"tab-content\" *ngIf=\"selectedTab === 1\" [@fadeIn]>\n          <div class=\"tab-pane active\" role=\"tabpanel\">\n            <h4>\n              {{ 'AbpIdentity::PersonalSettings' | abpLocalization }}\n              <hr />\n            </h4>\n            <abp-personal-settings-form\n              *abpReplaceableTemplate=\"{\n                componentKey: personalSettingsKey\n              }\"\n            ></abp-personal-settings-form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    animations: [animations.trigger('fadeIn', [animations.transition(':enter', animations.useAnimation(ng_theme_shared.fadeIn))])],
                    styles: ["\n      .min-h-400 {\n        min-height: 400px;\n      }\n    "]
                },] }
    ];
    ManageProfileComponent.ctorParameters = function () { return [
        { type: i1.ProfileService },
        { type: ManageProfileStateService }
    ]; };

    var maxLength$1 = forms.Validators.maxLength, required$2 = forms.Validators.required, email$1 = forms.Validators.email;
    var RegisterComponent = /** @class */ (function () {
        function RegisterComponent(fb, accountService, configState, toasterService, authService, injector) {
            this.fb = fb;
            this.accountService = accountService;
            this.configState = configState;
            this.toasterService = toasterService;
            this.authService = authService;
            this.injector = injector;
            this.isSelfRegistrationEnabled = true;
            this.authWrapperKey = "Account.AuthWrapperComponent" /* AuthWrapper */;
        }
        RegisterComponent.prototype.ngOnInit = function () {
            this.init();
            this.buildForm();
        };
        RegisterComponent.prototype.init = function () {
            this.isSelfRegistrationEnabled =
                (this.configState.getSetting('Abp.Account.IsSelfRegistrationEnabled') || '').toLowerCase() !==
                    'false';
            if (!this.isSelfRegistrationEnabled) {
                this.toasterService.warn({
                    key: 'AbpAccount::SelfRegistrationDisabledMessage',
                    defaultValue: 'Self registration is disabled.',
                }, null, { life: 10000 });
                return;
            }
        };
        RegisterComponent.prototype.buildForm = function () {
            this.form = this.fb.group({
                username: ['', [required$2, maxLength$1(255)]],
                password: ['', __spread([required$2], ng_theme_shared.getPasswordValidators(this.injector))],
                email: ['', [required$2, email$1]],
            });
        };
        RegisterComponent.prototype.onSubmit = function () {
            var _this = this;
            if (this.form.invalid)
                return;
            this.inProgress = true;
            var newUser = {
                userName: this.form.get('username').value,
                password: this.form.get('password').value,
                emailAddress: this.form.get('email').value,
                appName: 'Angular',
            };
            this.accountService
                .register(newUser)
                .pipe(operators.switchMap(function () { return _this.authService.login({
                username: newUser.userName,
                password: newUser.password,
                redirectUrl: getRedirectUrl(_this.injector),
            }); }), operators.catchError(function (err) {
                _this.toasterService.error(snq__default['default'](function () { return err.error.error_description; }) ||
                    snq__default['default'](function () { return err.error.error.message; }, 'AbpAccount::DefaultErrorMessage'), 'Error', { life: 7000 });
                return rxjs.throwError(err);
            }), operators.finalize(function () { return (_this.inProgress = false); }))
                .subscribe();
        };
        return RegisterComponent;
    }());
    RegisterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'abp-register',
                    template: "<h4>{{ 'AbpAccount::Register' | abpLocalization }}</h4>\n<strong>\n  {{ 'AbpAccount::AlreadyRegistered' | abpLocalization }}\n  <a class=\"text-decoration-none\" routerLink=\"/account/login\">{{\n    'AbpAccount::Login' | abpLocalization\n  }}</a>\n</strong>\n<form\n  *ngIf=\"isSelfRegistrationEnabled\"\n  [formGroup]=\"form\"\n  (ngSubmit)=\"onSubmit()\"\n  validateOnSubmit\n  class=\"mt-4\"\n>\n  <div class=\"form-group\">\n    <label for=\"input-user-name\">{{ 'AbpAccount::UserName' | abpLocalization }}</label\n    ><span> * </span\n    ><input\n      autofocus\n      type=\"text\"\n      id=\"input-user-name\"\n      class=\"form-control\"\n      formControlName=\"username\"\n      autocomplete=\"username\"\n    />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"input-email-address\">{{ 'AbpAccount::EmailAddress' | abpLocalization }}</label\n    ><span> * </span\n    ><input type=\"email\" id=\"input-email-address\" class=\"form-control\" formControlName=\"email\" />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"input-password\">{{ 'AbpAccount::Password' | abpLocalization }}</label\n    ><span> * </span\n    ><input\n      type=\"password\"\n      id=\"input-password\"\n      class=\"form-control\"\n      formControlName=\"password\"\n      autocomplete=\"current-password\"\n    />\n  </div>\n  <abp-button\n    [loading]=\"inProgress\"\n    buttonType=\"submit\"\n    name=\"Action\"\n    buttonClass=\"btn-block btn-lg mt-3 btn btn-primary\"\n  >\n    {{ 'AbpAccount::Register' | abpLocalization }}\n  </abp-button>\n</form>\n"
                },] }
    ];
    RegisterComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: AccountService$1 },
        { type: i1.ConfigStateService },
        { type: ng_theme_shared.ToasterService },
        { type: i1.AuthService },
        { type: i0.Injector }
    ]; };

    var PASSWORD_FIELDS$1 = ['password', 'confirmPassword'];
    var ResetPasswordComponent = /** @class */ (function () {
        function ResetPasswordComponent(fb, accountService, route, router, injector) {
            this.fb = fb;
            this.accountService = accountService;
            this.route = route;
            this.router = router;
            this.injector = injector;
            this.inProgress = false;
            this.isPasswordReset = false;
            this.mapErrorsFn = function (errors, groupErrors, control) {
                if (PASSWORD_FIELDS$1.indexOf(String(control.name)) < 0)
                    return errors;
                return errors.concat(groupErrors.filter(function (_a) {
                    var key = _a.key;
                    return key === 'passwordMismatch';
                }));
            };
        }
        ResetPasswordComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.route.queryParams.subscribe(function (_a) {
                var userId = _a.userId, resetToken = _a.resetToken;
                if (!userId || !resetToken)
                    _this.router.navigateByUrl('/account/login');
                _this.form = _this.fb.group({
                    userId: [userId, [forms.Validators.required]],
                    resetToken: [resetToken, [forms.Validators.required]],
                    password: ['', __spread([forms.Validators.required], ng_theme_shared.getPasswordValidators(_this.injector))],
                    confirmPassword: ['', __spread([forms.Validators.required], ng_theme_shared.getPasswordValidators(_this.injector))],
                }, {
                    validators: [core.comparePasswords(PASSWORD_FIELDS$1)],
                });
            });
        };
        ResetPasswordComponent.prototype.onSubmit = function () {
            var _this = this;
            if (this.form.invalid || this.inProgress)
                return;
            this.inProgress = true;
            this.accountService
                .resetPassword({
                userId: this.form.get('userId').value,
                resetToken: this.form.get('resetToken').value,
                password: this.form.get('password').value,
            })
                .pipe(operators.finalize(function () { return (_this.inProgress = false); }))
                .subscribe(function () {
                _this.isPasswordReset = true;
            });
        };
        return ResetPasswordComponent;
    }());
    ResetPasswordComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'abp-reset-password',
                    template: "<h4>{{ 'AbpAccount::ResetPassword' | abpLocalization }}</h4>\n\n<form\n  *ngIf=\"!isPasswordReset; else passwordResetTemplate\"\n  [formGroup]=\"form\"\n  [mapErrorsFn]=\"mapErrorsFn\"\n  (ngSubmit)=\"onSubmit()\"\n  validateOnSubmit\n>\n  <p>{{ 'AbpAccount::ResetPassword_Information' | abpLocalization }}</p>\n  <div class=\"form-group\">\n    <label for=\"input-password\">{{ 'AbpAccount::Password' | abpLocalization }}</label\n    ><span> * </span>\n    <input type=\"password\" id=\"input-password\" class=\"form-control\" formControlName=\"password\" />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"input-confirm-password\">{{ 'AbpAccount::ConfirmPassword' | abpLocalization }}</label\n    ><span> * </span>\n    <input\n      type=\"password\"\n      id=\"input-confirm-password\"\n      class=\"form-control\"\n      formControlName=\"confirmPassword\"\n    />\n  </div>\n  <button class=\"mr-2 btn btn-secondary\" type=\"button\" routerLink=\"/account/login\">\n    {{ 'AbpAccount::Cancel' | abpLocalization }}\n  </button>\n  <abp-button\n    buttonType=\"submit\"\n    buttonClass=\"mr-2 btn btn-primary\"\n    [loading]=\"inProgress\"\n    (click)=\"onSubmit()\"\n  >\n    {{ 'AbpAccount::Submit' | abpLocalization }}\n  </abp-button>\n</form>\n\n<ng-template #passwordResetTemplate>\n  <p>\n    {{ 'AbpAccount::YourPasswordIsSuccessfullyReset' | abpLocalization }}\n  </p>\n\n  <a routerLink=\"/account/login\">\n    <button class=\"d-block mt-2 mb-3 btn btn-primary\">\n      {{ 'AbpAccount::BackToLogin' | abpLocalization }}\n    </button>\n  </a>\n</ng-template>\n"
                },] }
    ];
    ResetPasswordComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: AccountService$1 },
        { type: router.ActivatedRoute },
        { type: router.Router },
        { type: i0.Injector }
    ]; };

    var AuthenticationFlowGuard = /** @class */ (function () {
        function AuthenticationFlowGuard(authService) {
            this.authService = authService;
        }
        AuthenticationFlowGuard.prototype.canActivate = function () {
            if (this.authService.isInternalAuth)
                return true;
            this.authService.navigateToLogin();
            return false;
        };
        return AuthenticationFlowGuard;
    }());
    AuthenticationFlowGuard.decorators = [
        { type: i0.Injectable }
    ];
    AuthenticationFlowGuard.ctorParameters = function () { return [
        { type: i1.AuthService }
    ]; };

    var ɵ0 = {
        replaceableComponent: {
            key: "Account.LoginComponent" /* Login */,
            defaultComponent: LoginComponent,
        },
    }, ɵ1 = {
        replaceableComponent: {
            key: "Account.RegisterComponent" /* Register */,
            defaultComponent: RegisterComponent,
        },
    }, ɵ2 = {
        replaceableComponent: {
            key: "Account.ForgotPasswordComponent" /* ForgotPassword */,
            defaultComponent: ForgotPasswordComponent,
        },
    }, ɵ3 = {
        tenantBoxVisible: false,
        replaceableComponent: {
            key: "Account.ResetPasswordComponent" /* ResetPassword */,
            defaultComponent: ResetPasswordComponent,
        },
    }, ɵ4 = {
        replaceableComponent: {
            key: "Account.ManageProfileComponent" /* ManageProfile */,
            defaultComponent: ManageProfileComponent,
        },
    };
    var routes = [
        { path: '', pathMatch: 'full', redirectTo: 'login' },
        {
            path: '',
            component: i1.DynamicLayoutComponent,
            children: [
                {
                    path: 'login',
                    component: i1.ReplaceableRouteContainerComponent,
                    canActivate: [AuthenticationFlowGuard],
                    data: ɵ0,
                },
                {
                    path: 'register',
                    component: i1.ReplaceableRouteContainerComponent,
                    canActivate: [AuthenticationFlowGuard],
                    data: ɵ1,
                },
                {
                    path: 'forgot-password',
                    component: i1.ReplaceableRouteContainerComponent,
                    canActivate: [AuthenticationFlowGuard],
                    data: ɵ2,
                },
                {
                    path: 'reset-password',
                    component: i1.ReplaceableRouteContainerComponent,
                    canActivate: [],
                    data: ɵ3,
                },
                {
                    path: 'manage',
                    component: i1.ReplaceableRouteContainerComponent,
                    canActivate: [i1.AuthGuard],
                    data: ɵ4,
                },
            ],
        },
    ];
    var AccountRoutingModule = /** @class */ (function () {
        function AccountRoutingModule() {
        }
        return AccountRoutingModule;
    }());
    AccountRoutingModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [router.RouterModule.forChild(routes)],
                    exports: [router.RouterModule],
                },] }
    ];

    var required$1 = forms.Validators.required;
    var PASSWORD_FIELDS = ['newPassword', 'repeatNewPassword'];
    var ChangePasswordComponent = /** @class */ (function () {
        function ChangePasswordComponent(fb, injector, toasterService, profileService, manageProfileState) {
            this.fb = fb;
            this.injector = injector;
            this.toasterService = toasterService;
            this.profileService = profileService;
            this.manageProfileState = manageProfileState;
            this.mapErrorsFn = function (errors, groupErrors, control) {
                if (PASSWORD_FIELDS.indexOf(String(control.name)) < 0)
                    return errors;
                return errors.concat(groupErrors.filter(function (_b) {
                    var key = _b.key;
                    return key === 'passwordMismatch';
                }));
            };
        }
        ChangePasswordComponent.prototype.ngOnInit = function () {
            var _a;
            this.hideCurrentPassword = !((_a = this.manageProfileState.getProfile()) === null || _a === void 0 ? void 0 : _a.hasPassword);
            var passwordValidations = ng_theme_shared.getPasswordValidators(this.injector);
            this.form = this.fb.group({
                password: ['', required$1],
                newPassword: [
                    '',
                    {
                        validators: __spread([required$1], passwordValidations),
                    },
                ],
                repeatNewPassword: [
                    '',
                    {
                        validators: __spread([required$1], passwordValidations),
                    },
                ],
            }, {
                validators: [core.comparePasswords(PASSWORD_FIELDS)],
            });
            if (this.hideCurrentPassword)
                this.form.removeControl('password');
        };
        ChangePasswordComponent.prototype.onSubmit = function () {
            var _this = this;
            if (this.form.invalid)
                return;
            this.inProgress = true;
            this.profileService
                .changePassword(Object.assign(Object.assign({}, (!this.hideCurrentPassword && { currentPassword: this.form.get('password').value })), { newPassword: this.form.get('newPassword').value }))
                .pipe(operators.finalize(function () { return (_this.inProgress = false); }))
                .subscribe({
                next: function () {
                    _this.form.reset();
                    _this.toasterService.success('AbpAccount::PasswordChangedMessage', '', {
                        life: 5000,
                    });
                    if (_this.hideCurrentPassword) {
                        _this.hideCurrentPassword = false;
                        _this.form.addControl('password', new forms.FormControl('', [required$1]));
                    }
                },
                error: function (err) {
                    _this.toasterService.error(snq__default['default'](function () { return err.error.error.message; }, 'AbpAccount::DefaultErrorMessage'));
                },
            });
        };
        return ChangePasswordComponent;
    }());
    ChangePasswordComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'abp-change-password-form',
                    template: "<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" [mapErrorsFn]=\"mapErrorsFn\" validateOnSubmit>\n  <div *ngIf=\"!hideCurrentPassword\" class=\"form-group\">\n    <label for=\"current-password\">{{\n      'AbpIdentity::DisplayName:CurrentPassword' | abpLocalization\n    }}</label\n    ><span> * </span\n    ><input\n      type=\"password\"\n      id=\"current-password\"\n      class=\"form-control\"\n      formControlName=\"password\"\n      autofocus\n      autocomplete=\"current-password\"\n    />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"new-password\">{{ 'AbpIdentity::DisplayName:NewPassword' | abpLocalization }}</label\n    ><span> * </span\n    ><input\n      type=\"password\"\n      id=\"new-password\"\n      class=\"form-control\"\n      formControlName=\"newPassword\"\n      autocomplete=\"new-password\"\n    />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"confirm-new-password\">{{\n      'AbpIdentity::DisplayName:NewPasswordConfirm' | abpLocalization\n    }}</label\n    ><span> * </span\n    ><input\n      type=\"password\"\n      id=\"confirm-new-password\"\n      class=\"form-control\"\n      formControlName=\"repeatNewPassword\"\n      autocomplete=\"new-password\"\n    />\n  </div>\n  <abp-button\n    iconClass=\"fa fa-check\"\n    buttonClass=\"btn btn-primary color-white\"\n    buttonType=\"submit\"\n    [loading]=\"inProgress\"\n    [disabled]=\"form?.invalid\"\n    >{{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\n  >\n</form>\n",
                    exportAs: 'abpChangePasswordForm'
                },] }
    ];
    ChangePasswordComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: i0.Injector },
        { type: ng_theme_shared.ToasterService },
        { type: i1.ProfileService },
        { type: ManageProfileStateService }
    ]; };

    var maxLength = forms.Validators.maxLength, required = forms.Validators.required, email = forms.Validators.email;
    var PersonalSettingsComponent = /** @class */ (function () {
        function PersonalSettingsComponent(fb, toasterService, profileService, manageProfileState) {
            this.fb = fb;
            this.toasterService = toasterService;
            this.profileService = profileService;
            this.manageProfileState = manageProfileState;
        }
        PersonalSettingsComponent.prototype.ngOnInit = function () {
            this.buildForm();
        };
        PersonalSettingsComponent.prototype.buildForm = function () {
            var profile = this.manageProfileState.getProfile();
            this.form = this.fb.group({
                userName: [profile.userName, [required, maxLength(256)]],
                email: [profile.email, [required, email, maxLength(256)]],
                name: [profile.name || '', [maxLength(64)]],
                surname: [profile.surname || '', [maxLength(64)]],
                phoneNumber: [profile.phoneNumber || '', [maxLength(16)]],
            });
        };
        PersonalSettingsComponent.prototype.submit = function () {
            var _this = this;
            if (this.form.invalid)
                return;
            this.inProgress = true;
            this.profileService
                .update(this.form.value)
                .pipe(operators.finalize(function () { return (_this.inProgress = false); }))
                .subscribe(function (profile) {
                _this.manageProfileState.setProfile(profile);
                _this.toasterService.success('AbpAccount::PersonalSettingsSaved', 'Success', { life: 5000 });
            });
        };
        return PersonalSettingsComponent;
    }());
    PersonalSettingsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'abp-personal-settings-form',
                    template: "<form validateOnSubmit *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n  <div class=\"form-group\">\n    <label for=\"username\">{{ 'AbpIdentity::DisplayName:UserName' | abpLocalization }}</label\n    ><span> * </span\n    ><input\n      type=\"text\"\n      id=\"username\"\n      class=\"form-control\"\n      formControlName=\"userName\"\n      autofocus\n      (keydown.space)=\"$event.preventDefault()\"\n    />\n  </div>\n  <div class=\"row\">\n    <div class=\"col col-md-6\">\n      <div class=\"form-group\">\n        <label for=\"name\">{{ 'AbpIdentity::DisplayName:Name' | abpLocalization }}</label\n        ><input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\" />\n      </div>\n    </div>\n    <div class=\"col col-md-6\">\n      <div class=\"form-group\">\n        <label for=\"surname\">{{ 'AbpIdentity::DisplayName:Surname' | abpLocalization }}</label\n        ><input type=\"text\" id=\"surname\" class=\"form-control\" formControlName=\"surname\" />\n      </div>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"email-address\">{{ 'AbpIdentity::DisplayName:Email' | abpLocalization }}</label\n    ><span> * </span\n    ><input type=\"text\" id=\"email-address\" class=\"form-control\" formControlName=\"email\" />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"phone-number\">{{ 'AbpIdentity::DisplayName:PhoneNumber' | abpLocalization }}</label\n    ><input type=\"text\" id=\"phone-number\" class=\"form-control\" formControlName=\"phoneNumber\" />\n  </div>\n  <abp-button\n    buttonType=\"submit\"\n    iconClass=\"fa fa-check\"\n    buttonClass=\"btn btn-primary color-white\"\n    [loading]=\"inProgress\"\n    [disabled]=\"form?.invalid\"\n  >\n    {{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\n  >\n</form>\n",
                    exportAs: 'abpPersonalSettingsForm'
                },] }
    ];
    PersonalSettingsComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: ng_theme_shared.ToasterService },
        { type: i1.ProfileService },
        { type: ManageProfileStateService }
    ]; };

    function accountConfigOptionsFactory(options) {
        return Object.assign({ redirectUrl: '/' }, options);
    }

    var declarations = [
        LoginComponent,
        RegisterComponent,
        ChangePasswordComponent,
        ManageProfileComponent,
        PersonalSettingsComponent,
        ForgotPasswordComponent,
        ResetPasswordComponent,
    ];
    var AccountModule = /** @class */ (function () {
        function AccountModule() {
        }
        AccountModule.forChild = function (options) {
            if (options === void 0) { options = {}; }
            return {
                ngModule: AccountModule,
                providers: [
                    AuthenticationFlowGuard,
                    { provide: ACCOUNT_CONFIG_OPTIONS, useValue: options },
                    {
                        provide: 'ACCOUNT_OPTIONS',
                        useFactory: accountConfigOptionsFactory,
                        deps: [ACCOUNT_CONFIG_OPTIONS],
                    },
                ],
            };
        };
        AccountModule.forLazy = function (options) {
            if (options === void 0) { options = {}; }
            return new i1.LazyModuleFactory(AccountModule.forChild(options));
        };
        return AccountModule;
    }());
    AccountModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: __spread(declarations),
                    imports: [
                        i1.CoreModule,
                        AccountRoutingModule,
                        ng_theme_shared.ThemeSharedModule,
                        ngBootstrap.NgbDropdownModule,
                        core.NgxValidateCoreModule,
                    ],
                    exports: __spread(declarations),
                },] }
    ];

    var LoginResultType;
    (function (LoginResultType) {
        LoginResultType[LoginResultType["Success"] = 1] = "Success";
        LoginResultType[LoginResultType["InvalidUserNameOrPassword"] = 2] = "InvalidUserNameOrPassword";
        LoginResultType[LoginResultType["NotAllowed"] = 3] = "NotAllowed";
        LoginResultType[LoginResultType["LockedOut"] = 4] = "LockedOut";
        LoginResultType[LoginResultType["RequiresTwoFactor"] = 5] = "RequiresTwoFactor";
    })(LoginResultType || (LoginResultType = {}));
    var loginResultTypeOptions = i1.mapEnumToOptions(LoginResultType);

    var index$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get LoginResultType () { return LoginResultType; },
        loginResultTypeOptions: loginResultTypeOptions
    });

    var AccountService = /** @class */ (function () {
        function AccountService(restService) {
            var _this = this;
            this.restService = restService;
            this.apiName = 'AbpAccount';
            this.checkPasswordByLogin = function (login) { return _this.restService.request({
                method: 'POST',
                url: '/api/account/check-password',
                body: login,
            }, { apiName: _this.apiName }); };
            this.loginByLogin = function (login) { return _this.restService.request({
                method: 'POST',
                url: '/api/account/login',
                body: login,
            }, { apiName: _this.apiName }); };
            this.logout = function () { return _this.restService.request({
                method: 'GET',
                url: '/api/account/logout',
            }, { apiName: _this.apiName }); };
        }
        return AccountService;
    }());
    AccountService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function AccountService_Factory() { return new AccountService(i0__namespace.ɵɵinject(i1__namespace.RestService)); }, token: AccountService, providedIn: "root" });
    AccountService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AccountService.ctorParameters = function () { return [
        { type: i1.RestService }
    ]; };

    var index$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Models: index$4,
        AccountService: AccountService
    });

    var index$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Controllers: index$3
    });

    var index$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Account: index$2
    });

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Areas: index$1
    });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ACCOUNT_CONFIG_OPTIONS = ACCOUNT_CONFIG_OPTIONS;
    exports.AccountModule = AccountModule;
    exports.AccountService = AccountService$1;
    exports.AuthenticationFlowGuard = AuthenticationFlowGuard;
    exports.ChangePasswordComponent = ChangePasswordComponent;
    exports.ForgotPasswordComponent = ForgotPasswordComponent;
    exports.LoginComponent = LoginComponent;
    exports.ManageProfileComponent = ManageProfileComponent;
    exports.ManageProfileStateService = ManageProfileStateService;
    exports.PersonalSettingsComponent = PersonalSettingsComponent;
    exports.RegisterComponent = RegisterComponent;
    exports.ResetPasswordComponent = ResetPasswordComponent;
    exports.Web = index;
    exports.ɵa = LoginComponent;
    exports.ɵb = RegisterComponent;
    exports.ɵc = AccountService$1;
    exports.ɵd = ChangePasswordComponent;
    exports.ɵe = ManageProfileStateService;
    exports.ɵf = ManageProfileComponent;
    exports.ɵg = PersonalSettingsComponent;
    exports.ɵh = ForgotPasswordComponent;
    exports.ɵi = ResetPasswordComponent;
    exports.ɵj = AccountRoutingModule;
    exports.ɵk = AuthenticationFlowGuard;
    exports.ɵm = ACCOUNT_CONFIG_OPTIONS;
    exports.ɵn = accountConfigOptionsFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=abp-ng.account.umd.js.map
