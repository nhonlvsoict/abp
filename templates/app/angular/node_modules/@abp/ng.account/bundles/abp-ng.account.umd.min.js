!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ng-bootstrap/ng-bootstrap"),require("@ngx-validate/core"),require("@angular/router"),require("@angular/forms"),require("rxjs/operators"),require("rxjs"),require("snq"),require("@angular/animations")):"function"==typeof define&&define.amd?define("@abp/ng.account",["exports","@abp/ng.core","@abp/ng.theme.shared","@angular/core","@ng-bootstrap/ng-bootstrap","@ngx-validate/core","@angular/router","@angular/forms","rxjs/operators","rxjs","snq","@angular/animations"],n):n(((e="undefined"!=typeof globalThis?globalThis:e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng.account={}),e.i1,e.ng_theme_shared,e.ng.core,e.ngBootstrap,e.core,e.ng.router,e.ng.forms,e.rxjs.operators,e.rxjs,e.snq,e.ng.animations)}(this,(function(e,n,t,o,r,a,i,s,c,l,p,u){"use strict";function d(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function m(e){if(e&&e.__esModule)return e;var n=Object.create(null);return e&&Object.keys(e).forEach((function(t){if("default"!==t){var o=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(n,t,o.get?o:{enumerable:!0,get:function(){return e[t]}})}})),n.default=e,Object.freeze(n)}var f=m(n),b=m(o),g=d(p);Object.create;function h(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var o,r,a=t.call(e),i=[];try{for(;(void 0===n||n-- >0)&&!(o=a.next()).done;)i.push(o.value)}catch(e){r={error:e}}finally{try{o&&!o.done&&(t=a.return)&&t.call(a)}finally{if(r)throw r.error}}return i}function v(){for(var e=[],n=0;n<arguments.length;n++)e=e.concat(h(arguments[n]));return e}Object.create;var y=function(e){var n=this;this.restService=e,this.apiName="AbpAccount",this.register=function(e){return n.restService.request({method:"POST",url:"/api/account/register",body:e},{apiName:n.apiName})},this.resetPassword=function(e){return n.restService.request({method:"POST",url:"/api/account/reset-password",body:e},{apiName:n.apiName})},this.sendPasswordResetCode=function(e){return n.restService.request({method:"POST",url:"/api/account/send-password-reset-code",body:e},{apiName:n.apiName})}};y.ɵprov=b.ɵɵdefineInjectable({factory:function(){return new y(b.ɵɵinject(f.RestService))},token:y,providedIn:"root"}),y.decorators=[{type:o.Injectable,args:[{providedIn:"root"}]}],y.ctorParameters=function(){return[{type:n.RestService}]};var w=function(){function e(e,n){this.fb=e,this.accountService=n,this.isEmailSent=!1,this.form=this.fb.group({email:["",[s.Validators.required,s.Validators.email]]})}return e.prototype.onSubmit=function(){var e=this;this.form.invalid||(this.inProgress=!0,this.accountService.sendPasswordResetCode({email:this.form.get("email").value,appName:"Angular"}).pipe(c.finalize((function(){return e.inProgress=!1}))).subscribe((function(){e.isEmailSent=!0})))},e}();w.decorators=[{type:o.Component,args:[{selector:"abp-forgot-password",template:'<h4>{{ \'AbpAccount::ForgotPassword\' | abpLocalization }}</h4>\n\n<form\n  *ngIf="!isEmailSent; else emailSentTemplate"\n  [formGroup]="form"\n  (ngSubmit)="onSubmit()"\n  validateOnSubmit\n>\n  <p>{{ \'AbpAccount::SendPasswordResetLink_Information\' | abpLocalization }}</p>\n  <div class="form-group">\n    <label for="input-email-address">{{ \'AbpAccount::EmailAddress\' | abpLocalization }}</label\n    ><span> * </span>\n    <input type="email" id="input-email-address" class="form-control" formControlName="email" />\n  </div>\n  <abp-button\n    class="d-block"\n    buttonClass="mt-2 mb-3 btn btn-primary btn-block"\n    [loading]="inProgress"\n    buttonType="submit"\n    [disabled]="form?.invalid"\n  >\n    {{ \'AbpAccount::Submit\' | abpLocalization }}\n  </abp-button>\n  <a routerLink="/account/login"\n    ><i class="fa fa-long-arrow-left mr-1"></i>{{ \'AbpAccount::Login\' | abpLocalization }}</a\n  >\n</form>\n\n<ng-template #emailSentTemplate>\n  <p>\n    {{ \'AbpAccount::PasswordResetMailSentMessage\' | abpLocalization }}\n  </p>\n\n  <a routerLink="/account/login">\n    <button class="d-block mt-2 mb-3 btn btn-primary btn-block">\n      <i class="fa fa-long-arrow-left mr-1"></i>\n      {{ \'AbpAccount::BackToLogin\' | abpLocalization }}\n    </button>\n  </a>\n</ng-template>\n'}]}],w.ctorParameters=function(){return[{type:s.FormBuilder},{type:y}]};var S=new o.InjectionToken("ACCOUNT_CONFIG_OPTIONS");function A(e){var n=e.get(i.ActivatedRoute),t=e.get(S);return n.snapshot.queryParams.returnUrl||t.redirectUrl||"/"}var P=s.Validators.maxLength,C=s.Validators.required,N=function(){function e(e,n,t,o,r){this.injector=e,this.fb=n,this.toasterService=t,this.authService=o,this.configState=r,this.isSelfRegistrationEnabled=!0,this.authWrapperKey="Account.AuthWrapperComponent"}return e.prototype.ngOnInit=function(){this.init(),this.buildForm()},e.prototype.init=function(){this.isSelfRegistrationEnabled="false"!==(this.configState.getSetting("Abp.Account.IsSelfRegistrationEnabled")||"").toLowerCase()},e.prototype.buildForm=function(){this.form=this.fb.group({username:["",[C,P(255)]],password:["",[C,P(128)]],rememberMe:[!1]})},e.prototype.onSubmit=function(){var e=this;if(!this.form.invalid){this.inProgress=!0;var n=this.form.value,t=n.username,o=n.password,r=n.rememberMe,a=A(this.injector);this.authService.login({username:t,password:o,rememberMe:r,redirectUrl:a}).pipe(c.catchError((function(n){return e.toasterService.error(g.default((function(){return n.error.error_description}))||g.default((function(){return n.error.error.message}),"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),l.throwError(n)})),c.finalize((function(){return e.inProgress=!1}))).subscribe()}},e}();N.decorators=[{type:o.Component,args:[{selector:"abp-login",template:'<h4>{{ \'AbpAccount::Login\' | abpLocalization }}</h4>\n<strong *ngIf="isSelfRegistrationEnabled">\n  {{ \'AbpAccount::AreYouANewUser\' | abpLocalization }}\n  <a class="text-decoration-none" routerLink="/account/register" queryParamsHandling="preserve">{{\n    \'AbpAccount::Register\' | abpLocalization\n  }}</a>\n</strong>\n<form [formGroup]="form" (ngSubmit)="onSubmit()" validateOnSubmit class="mt-4">\n  <div class="form-group">\n    <label for="login-input-user-name-or-email-address">{{\n      \'AbpAccount::UserNameOrEmailAddress\' | abpLocalization\n    }}</label>\n    <input\n      class="form-control"\n      type="text"\n      id="login-input-user-name-or-email-address"\n      formControlName="username"\n      autocomplete="username"\n      autofocus\n    />\n  </div>\n  <div class="form-group">\n    <label for="login-input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label>\n    <input\n      class="form-control"\n      type="password"\n      id="login-input-password"\n      formControlName="password"\n      autocomplete="current-password"\n    />\n  </div>\n\n  <div class="row">\n    <div class="col">\n      <label class="custom-checkbox custom-control mb-2" for="login-input-remember-me">\n        <input\n          class="form-check-input"\n          type="checkbox"\n          id="login-input-remember-me"\n          formControlName="rememberMe"\n        />\n        {{ \'AbpAccount::RememberMe\' | abpLocalization }}\n      </label>\n    </div>\n    <div class="text-right col">\n      <a routerLink="/account/forgot-password">{{\n        \'AbpAccount::ForgotPassword\' | abpLocalization\n      }}</a>\n    </div>\n  </div>\n\n  <abp-button\n    [loading]="inProgress"\n    buttonType="submit"\n    name="Action"\n    buttonClass="btn-block btn-lg mt-3 btn btn-primary"\n  >\n    {{ \'AbpAccount::Login\' | abpLocalization }}\n  </abp-button>\n</form>\n'}]}],N.ctorParameters=function(){return[{type:o.Injector},{type:s.FormBuilder},{type:t.ToasterService},{type:n.AuthService},{type:n.ConfigStateService}]};var L=function(){function e(){this.store=new n.InternalStore({})}return Object.defineProperty(e.prototype,"createOnUpdateStream",{get:function(){return this.store.sliceUpdate},enumerable:!1,configurable:!0}),e.prototype.getProfile$=function(){return this.store.sliceState((function(e){return e.profile}))},e.prototype.getProfile=function(){return this.store.state.profile},e.prototype.setProfile=function(e){this.store.patch({profile:e})},e}();L.ɵprov=b.ɵɵdefineInjectable({factory:function(){return new L},token:L,providedIn:"root"}),L.decorators=[{type:o.Injectable,args:[{providedIn:"root"}]}];var I=function(){function e(e,n){this.profileService=e,this.manageProfileState=n,this.selectedTab=0,this.changePasswordKey="Account.ChangePasswordComponent",this.personalSettingsKey="Account.PersonalSettingsComponent",this.profile$=this.manageProfileState.getProfile$()}return e.prototype.ngOnInit=function(){var e=this;this.profileService.get().subscribe((function(n){e.manageProfileState.setProfile(n),n.isExternal&&(e.hideChangePasswordTab=!0,e.selectedTab=1)}))},e}();I.decorators=[{type:o.Component,args:[{selector:"abp-manage-profile",template:'<div id="AbpContentToolbar"></div>\n\n<div class="card border-0 shadow-sm min-h-400" [abpLoading]="!(profile$ | async)">\n  <div class="card-body">\n    <div class="row">\n      <div class="col-12 col-md-3">\n        <ul class="nav flex-column nav-pills" id="nav-tab" role="tablist">\n          <li\n            *ngIf="!hideChangePasswordTab && (profile$ | async)"\n            class="nav-item"\n            (click)="selectedTab = 0"\n          >\n            <a\n              class="nav-link"\n              [ngClass]="{ active: selectedTab === 0 }"\n              role="tab"\n              href="javascript:void(0)"\n              >{{ \'AbpUi::ChangePassword\' | abpLocalization }}</a\n            >\n          </li>\n          <li class="nav-item mb-2" (click)="selectedTab = 1">\n            <a\n              class="nav-link"\n              [ngClass]="{ active: selectedTab === 1 }"\n              role="tab"\n              href="javascript:void(0)"\n              >{{ \'AbpAccount::PersonalSettings\' | abpLocalization }}</a\n            >\n          </li>\n        </ul>\n      </div>\n      <div *ngIf="profile$ | async" class="col-12 col-md-9">\n        <div class="tab-content" *ngIf="selectedTab === 0" [@fadeIn]>\n          <div class="tab-pane active" role="tabpanel">\n            <h4>\n              {{ \'AbpIdentity::ChangePassword\' | abpLocalization }}\n              <hr />\n            </h4>\n            <abp-change-password-form\n              *abpReplaceableTemplate="{\n                componentKey: changePasswordKey\n              }"\n            ></abp-change-password-form>\n          </div>\n        </div>\n        <div class="tab-content" *ngIf="selectedTab === 1" [@fadeIn]>\n          <div class="tab-pane active" role="tabpanel">\n            <h4>\n              {{ \'AbpIdentity::PersonalSettings\' | abpLocalization }}\n              <hr />\n            </h4>\n            <abp-personal-settings-form\n              *abpReplaceableTemplate="{\n                componentKey: personalSettingsKey\n              }"\n            ></abp-personal-settings-form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n',animations:[u.trigger("fadeIn",[u.transition(":enter",u.useAnimation(t.fadeIn))])],styles:["\n      .min-h-400 {\n        min-height: 400px;\n      }\n    "]}]}],I.ctorParameters=function(){return[{type:n.ProfileService},{type:L}]};var z=s.Validators.maxLength,O=s.Validators.required,R=s.Validators.email,T=function(){function e(e,n,t,o,r,a){this.fb=e,this.accountService=n,this.configState=t,this.toasterService=o,this.authService=r,this.injector=a,this.isSelfRegistrationEnabled=!0,this.authWrapperKey="Account.AuthWrapperComponent"}return e.prototype.ngOnInit=function(){this.init(),this.buildForm()},e.prototype.init=function(){this.isSelfRegistrationEnabled="false"!==(this.configState.getSetting("Abp.Account.IsSelfRegistrationEnabled")||"").toLowerCase(),this.isSelfRegistrationEnabled||this.toasterService.warn({key:"AbpAccount::SelfRegistrationDisabledMessage",defaultValue:"Self registration is disabled."},null,{life:1e4})},e.prototype.buildForm=function(){this.form=this.fb.group({username:["",[O,z(255)]],password:["",v([O],t.getPasswordValidators(this.injector))],email:["",[O,R]]})},e.prototype.onSubmit=function(){var e=this;if(!this.form.invalid){this.inProgress=!0;var n={userName:this.form.get("username").value,password:this.form.get("password").value,emailAddress:this.form.get("email").value,appName:"Angular"};this.accountService.register(n).pipe(c.switchMap((function(){return e.authService.login({username:n.userName,password:n.password,redirectUrl:A(e.injector)})})),c.catchError((function(n){return e.toasterService.error(g.default((function(){return n.error.error_description}))||g.default((function(){return n.error.error.message}),"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),l.throwError(n)})),c.finalize((function(){return e.inProgress=!1}))).subscribe()}},e}();T.decorators=[{type:o.Component,args:[{selector:"abp-register",template:'<h4>{{ \'AbpAccount::Register\' | abpLocalization }}</h4>\n<strong>\n  {{ \'AbpAccount::AlreadyRegistered\' | abpLocalization }}\n  <a class="text-decoration-none" routerLink="/account/login">{{\n    \'AbpAccount::Login\' | abpLocalization\n  }}</a>\n</strong>\n<form\n  *ngIf="isSelfRegistrationEnabled"\n  [formGroup]="form"\n  (ngSubmit)="onSubmit()"\n  validateOnSubmit\n  class="mt-4"\n>\n  <div class="form-group">\n    <label for="input-user-name">{{ \'AbpAccount::UserName\' | abpLocalization }}</label\n    ><span> * </span\n    ><input\n      autofocus\n      type="text"\n      id="input-user-name"\n      class="form-control"\n      formControlName="username"\n      autocomplete="username"\n    />\n  </div>\n  <div class="form-group">\n    <label for="input-email-address">{{ \'AbpAccount::EmailAddress\' | abpLocalization }}</label\n    ><span> * </span\n    ><input type="email" id="input-email-address" class="form-control" formControlName="email" />\n  </div>\n  <div class="form-group">\n    <label for="input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label\n    ><span> * </span\n    ><input\n      type="password"\n      id="input-password"\n      class="form-control"\n      formControlName="password"\n      autocomplete="current-password"\n    />\n  </div>\n  <abp-button\n    [loading]="inProgress"\n    buttonType="submit"\n    name="Action"\n    buttonClass="btn-block btn-lg mt-3 btn btn-primary"\n  >\n    {{ \'AbpAccount::Register\' | abpLocalization }}\n  </abp-button>\n</form>\n'}]}],T.ctorParameters=function(){return[{type:s.FormBuilder},{type:y},{type:n.ConfigStateService},{type:t.ToasterService},{type:n.AuthService},{type:o.Injector}]};var j=["password","confirmPassword"],k=function(){function e(e,n,t,o,r){this.fb=e,this.accountService=n,this.route=t,this.router=o,this.injector=r,this.inProgress=!1,this.isPasswordReset=!1,this.mapErrorsFn=function(e,n,t){return j.indexOf(String(t.name))<0?e:e.concat(n.filter((function(e){return"passwordMismatch"===e.key})))}}return e.prototype.ngOnInit=function(){var e=this;this.route.queryParams.subscribe((function(n){var o=n.userId,r=n.resetToken;o&&r||e.router.navigateByUrl("/account/login"),e.form=e.fb.group({userId:[o,[s.Validators.required]],resetToken:[r,[s.Validators.required]],password:["",v([s.Validators.required],t.getPasswordValidators(e.injector))],confirmPassword:["",v([s.Validators.required],t.getPasswordValidators(e.injector))]},{validators:[a.comparePasswords(j)]})}))},e.prototype.onSubmit=function(){var e=this;this.form.invalid||this.inProgress||(this.inProgress=!0,this.accountService.resetPassword({userId:this.form.get("userId").value,resetToken:this.form.get("resetToken").value,password:this.form.get("password").value}).pipe(c.finalize((function(){return e.inProgress=!1}))).subscribe((function(){e.isPasswordReset=!0})))},e}();k.decorators=[{type:o.Component,args:[{selector:"abp-reset-password",template:'<h4>{{ \'AbpAccount::ResetPassword\' | abpLocalization }}</h4>\n\n<form\n  *ngIf="!isPasswordReset; else passwordResetTemplate"\n  [formGroup]="form"\n  [mapErrorsFn]="mapErrorsFn"\n  (ngSubmit)="onSubmit()"\n  validateOnSubmit\n>\n  <p>{{ \'AbpAccount::ResetPassword_Information\' | abpLocalization }}</p>\n  <div class="form-group">\n    <label for="input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label\n    ><span> * </span>\n    <input type="password" id="input-password" class="form-control" formControlName="password" />\n  </div>\n  <div class="form-group">\n    <label for="input-confirm-password">{{ \'AbpAccount::ConfirmPassword\' | abpLocalization }}</label\n    ><span> * </span>\n    <input\n      type="password"\n      id="input-confirm-password"\n      class="form-control"\n      formControlName="confirmPassword"\n    />\n  </div>\n  <button class="mr-2 btn btn-secondary" type="button" routerLink="/account/login">\n    {{ \'AbpAccount::Cancel\' | abpLocalization }}\n  </button>\n  <abp-button\n    buttonType="submit"\n    buttonClass="mr-2 btn btn-primary"\n    [loading]="inProgress"\n    (click)="onSubmit()"\n  >\n    {{ \'AbpAccount::Submit\' | abpLocalization }}\n  </abp-button>\n</form>\n\n<ng-template #passwordResetTemplate>\n  <p>\n    {{ \'AbpAccount::YourPasswordIsSuccessfullyReset\' | abpLocalization }}\n  </p>\n\n  <a routerLink="/account/login">\n    <button class="d-block mt-2 mb-3 btn btn-primary">\n      {{ \'AbpAccount::BackToLogin\' | abpLocalization }}\n    </button>\n  </a>\n</ng-template>\n'}]}],k.ctorParameters=function(){return[{type:s.FormBuilder},{type:y},{type:i.ActivatedRoute},{type:i.Router},{type:o.Injector}]};var x=function(){function e(e){this.authService=e}return e.prototype.canActivate=function(){return!!this.authService.isInternalAuth||(this.authService.navigateToLogin(),!1)},e}();x.decorators=[{type:o.Injectable}],x.ctorParameters=function(){return[{type:n.AuthService}]};var E={replaceableComponent:{key:"Account.LoginComponent",defaultComponent:N}},_={replaceableComponent:{key:"Account.RegisterComponent",defaultComponent:T}},q={replaceableComponent:{key:"Account.ForgotPasswordComponent",defaultComponent:w}},M={tenantBoxVisible:!1,replaceableComponent:{key:"Account.ResetPasswordComponent",defaultComponent:k}},F={replaceableComponent:{key:"Account.ManageProfileComponent",defaultComponent:I}},V=[{path:"",pathMatch:"full",redirectTo:"login"},{path:"",component:n.DynamicLayoutComponent,children:[{path:"login",component:n.ReplaceableRouteContainerComponent,canActivate:[x],data:E},{path:"register",component:n.ReplaceableRouteContainerComponent,canActivate:[x],data:_},{path:"forgot-password",component:n.ReplaceableRouteContainerComponent,canActivate:[x],data:q},{path:"reset-password",component:n.ReplaceableRouteContainerComponent,canActivate:[],data:M},{path:"manage",component:n.ReplaceableRouteContainerComponent,canActivate:[n.AuthGuard],data:F}]}],U=function(){};U.decorators=[{type:o.NgModule,args:[{imports:[i.RouterModule.forChild(V)],exports:[i.RouterModule]}]}];var D=s.Validators.required,B=["newPassword","repeatNewPassword"],G=function(){function e(e,n,t,o,r){this.fb=e,this.injector=n,this.toasterService=t,this.profileService=o,this.manageProfileState=r,this.mapErrorsFn=function(e,n,t){return B.indexOf(String(t.name))<0?e:e.concat(n.filter((function(e){return"passwordMismatch"===e.key})))}}return e.prototype.ngOnInit=function(){var e;this.hideCurrentPassword=!(null===(e=this.manageProfileState.getProfile())||void 0===e?void 0:e.hasPassword);var n=t.getPasswordValidators(this.injector);this.form=this.fb.group({password:["",D],newPassword:["",{validators:v([D],n)}],repeatNewPassword:["",{validators:v([D],n)}]},{validators:[a.comparePasswords(B)]}),this.hideCurrentPassword&&this.form.removeControl("password")},e.prototype.onSubmit=function(){var e=this;this.form.invalid||(this.inProgress=!0,this.profileService.changePassword(Object.assign(Object.assign({},!this.hideCurrentPassword&&{currentPassword:this.form.get("password").value}),{newPassword:this.form.get("newPassword").value})).pipe(c.finalize((function(){return e.inProgress=!1}))).subscribe({next:function(){e.form.reset(),e.toasterService.success("AbpAccount::PasswordChangedMessage","",{life:5e3}),e.hideCurrentPassword&&(e.hideCurrentPassword=!1,e.form.addControl("password",new s.FormControl("",[D])))},error:function(n){e.toasterService.error(g.default((function(){return n.error.error.message}),"AbpAccount::DefaultErrorMessage"))}}))},e}();G.decorators=[{type:o.Component,args:[{selector:"abp-change-password-form",template:'<form [formGroup]="form" (ngSubmit)="onSubmit()" [mapErrorsFn]="mapErrorsFn" validateOnSubmit>\n  <div *ngIf="!hideCurrentPassword" class="form-group">\n    <label for="current-password">{{\n      \'AbpIdentity::DisplayName:CurrentPassword\' | abpLocalization\n    }}</label\n    ><span> * </span\n    ><input\n      type="password"\n      id="current-password"\n      class="form-control"\n      formControlName="password"\n      autofocus\n      autocomplete="current-password"\n    />\n  </div>\n  <div class="form-group">\n    <label for="new-password">{{ \'AbpIdentity::DisplayName:NewPassword\' | abpLocalization }}</label\n    ><span> * </span\n    ><input\n      type="password"\n      id="new-password"\n      class="form-control"\n      formControlName="newPassword"\n      autocomplete="new-password"\n    />\n  </div>\n  <div class="form-group">\n    <label for="confirm-new-password">{{\n      \'AbpIdentity::DisplayName:NewPasswordConfirm\' | abpLocalization\n    }}</label\n    ><span> * </span\n    ><input\n      type="password"\n      id="confirm-new-password"\n      class="form-control"\n      formControlName="repeatNewPassword"\n      autocomplete="new-password"\n    />\n  </div>\n  <abp-button\n    iconClass="fa fa-check"\n    buttonClass="btn btn-primary color-white"\n    buttonType="submit"\n    [loading]="inProgress"\n    [disabled]="form?.invalid"\n    >{{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\n  >\n</form>\n',exportAs:"abpChangePasswordForm"}]}],G.ctorParameters=function(){return[{type:s.FormBuilder},{type:o.Injector},{type:t.ToasterService},{type:n.ProfileService},{type:L}]};var K=s.Validators.maxLength,$=s.Validators.required,W=s.Validators.email,Y=function(){function e(e,n,t,o){this.fb=e,this.toasterService=n,this.profileService=t,this.manageProfileState=o}return e.prototype.ngOnInit=function(){this.buildForm()},e.prototype.buildForm=function(){var e=this.manageProfileState.getProfile();this.form=this.fb.group({userName:[e.userName,[$,K(256)]],email:[e.email,[$,W,K(256)]],name:[e.name||"",[K(64)]],surname:[e.surname||"",[K(64)]],phoneNumber:[e.phoneNumber||"",[K(16)]]})},e.prototype.submit=function(){var e=this;this.form.invalid||(this.inProgress=!0,this.profileService.update(this.form.value).pipe(c.finalize((function(){return e.inProgress=!1}))).subscribe((function(n){e.manageProfileState.setProfile(n),e.toasterService.success("AbpAccount::PersonalSettingsSaved","Success",{life:5e3})})))},e}();function H(e){return Object.assign({redirectUrl:"/"},e)}Y.decorators=[{type:o.Component,args:[{selector:"abp-personal-settings-form",template:'<form validateOnSubmit *ngIf="form" [formGroup]="form" (ngSubmit)="submit()">\n  <div class="form-group">\n    <label for="username">{{ \'AbpIdentity::DisplayName:UserName\' | abpLocalization }}</label\n    ><span> * </span\n    ><input\n      type="text"\n      id="username"\n      class="form-control"\n      formControlName="userName"\n      autofocus\n      (keydown.space)="$event.preventDefault()"\n    />\n  </div>\n  <div class="row">\n    <div class="col col-md-6">\n      <div class="form-group">\n        <label for="name">{{ \'AbpIdentity::DisplayName:Name\' | abpLocalization }}</label\n        ><input type="text" id="name" class="form-control" formControlName="name" />\n      </div>\n    </div>\n    <div class="col col-md-6">\n      <div class="form-group">\n        <label for="surname">{{ \'AbpIdentity::DisplayName:Surname\' | abpLocalization }}</label\n        ><input type="text" id="surname" class="form-control" formControlName="surname" />\n      </div>\n    </div>\n  </div>\n  <div class="form-group">\n    <label for="email-address">{{ \'AbpIdentity::DisplayName:Email\' | abpLocalization }}</label\n    ><span> * </span\n    ><input type="text" id="email-address" class="form-control" formControlName="email" />\n  </div>\n  <div class="form-group">\n    <label for="phone-number">{{ \'AbpIdentity::DisplayName:PhoneNumber\' | abpLocalization }}</label\n    ><input type="text" id="phone-number" class="form-control" formControlName="phoneNumber" />\n  </div>\n  <abp-button\n    buttonType="submit"\n    iconClass="fa fa-check"\n    buttonClass="btn btn-primary color-white"\n    [loading]="inProgress"\n    [disabled]="form?.invalid"\n  >\n    {{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\n  >\n</form>\n',exportAs:"abpPersonalSettingsForm"}]}],Y.ctorParameters=function(){return[{type:s.FormBuilder},{type:t.ToasterService},{type:n.ProfileService},{type:L}]};var J,Q=[N,T,G,I,Y,w,k],X=function(){function e(){}return e.forChild=function(n){return void 0===n&&(n={}),{ngModule:e,providers:[x,{provide:S,useValue:n},{provide:"ACCOUNT_OPTIONS",useFactory:H,deps:[S]}]}},e.forLazy=function(t){return void 0===t&&(t={}),new n.LazyModuleFactory(e.forChild(t))},e}();X.decorators=[{type:o.NgModule,args:[{declarations:v(Q),imports:[n.CoreModule,U,t.ThemeSharedModule,r.NgbDropdownModule,a.NgxValidateCoreModule],exports:v(Q)}]}],function(e){e[e.Success=1]="Success",e[e.InvalidUserNameOrPassword=2]="InvalidUserNameOrPassword",e[e.NotAllowed=3]="NotAllowed",e[e.LockedOut=4]="LockedOut",e[e.RequiresTwoFactor=5]="RequiresTwoFactor"}(J||(J={}));var Z=n.mapEnumToOptions(J),ee=Object.freeze({__proto__:null,get LoginResultType(){return J},loginResultTypeOptions:Z}),ne=function(e){var n=this;this.restService=e,this.apiName="AbpAccount",this.checkPasswordByLogin=function(e){return n.restService.request({method:"POST",url:"/api/account/check-password",body:e},{apiName:n.apiName})},this.loginByLogin=function(e){return n.restService.request({method:"POST",url:"/api/account/login",body:e},{apiName:n.apiName})},this.logout=function(){return n.restService.request({method:"GET",url:"/api/account/logout"},{apiName:n.apiName})}};ne.ɵprov=b.ɵɵdefineInjectable({factory:function(){return new ne(b.ɵɵinject(f.RestService))},token:ne,providedIn:"root"}),ne.decorators=[{type:o.Injectable,args:[{providedIn:"root"}]}],ne.ctorParameters=function(){return[{type:n.RestService}]};var te=Object.freeze({__proto__:null,Models:ee,AccountService:ne}),oe=Object.freeze({__proto__:null,Controllers:te}),re=Object.freeze({__proto__:null,Account:oe}),ae=Object.freeze({__proto__:null,Areas:re});e.ACCOUNT_CONFIG_OPTIONS=S,e.AccountModule=X,e.AccountService=y,e.AuthenticationFlowGuard=x,e.ChangePasswordComponent=G,e.ForgotPasswordComponent=w,e.LoginComponent=N,e.ManageProfileComponent=I,e.ManageProfileStateService=L,e.PersonalSettingsComponent=Y,e.RegisterComponent=T,e.ResetPasswordComponent=k,e.Web=ae,e.ɵa=N,e.ɵb=T,e.ɵc=y,e.ɵd=G,e.ɵe=L,e.ɵf=I,e.ɵg=Y,e.ɵh=w,e.ɵi=k,e.ɵj=U,e.ɵk=x,e.ɵm=S,e.ɵn=H,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=abp-ng.account.umd.min.js.map