import { __rest } from "tslib";
import { BaseCoreModule, coreOptionsFactory, CORE_OPTIONS, LIST_QUERY_DEBOUNCE_TIME, LOADER_DELAY, PermissionService, RestService, } from '@abp/ng.core';
import { APP_BASE_HREF } from '@angular/common';
import { NgModule } from '@angular/core';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { provideRoutes } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { MockPermissionService } from './services/mock-permission.service';
import { MockRestService } from './services/mock-rest.service';
/**
 * CoreTestingModule is the module that will be used in tests
 * and it provides mock alternatives
 */
export class CoreTestingModule {
    static withConfig(_a = {}) {
        var { baseHref = '/', listQueryDebounceTime = 0, routes = [] } = _a, options = __rest(_a, ["baseHref", "listQueryDebounceTime", "routes"]);
        return {
            ngModule: CoreTestingModule,
            providers: [
                { provide: APP_BASE_HREF, useValue: baseHref },
                {
                    provide: 'CORE_OPTIONS',
                    useValue: Object.assign({ skipGetAppConfiguration: true }, options),
                },
                {
                    provide: CORE_OPTIONS,
                    useFactory: coreOptionsFactory,
                    deps: ['CORE_OPTIONS'],
                },
                {
                    provide: LIST_QUERY_DEBOUNCE_TIME,
                    useValue: listQueryDebounceTime,
                },
                {
                    provide: PermissionService,
                    useClass: MockPermissionService,
                },
                {
                    provide: RestService,
                    useClass: MockRestService,
                },
                {
                    provide: LOADER_DELAY,
                    useValue: 0,
                },
                provideRoutes(routes),
            ],
        };
    }
}
CoreTestingModule.decorators = [
    { type: NgModule, args: [{
                exports: [RouterTestingModule, BaseCoreModule],
                imports: [NoopAnimationsModule, RouterTestingModule, BaseCoreModule],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS10ZXN0aW5nLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvdGVzdGluZy9zcmMvbGliL2NvcmUtdGVzdGluZy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFFTCxjQUFjLEVBQ2Qsa0JBQWtCLEVBQ2xCLFlBQVksRUFDWix3QkFBd0IsRUFDeEIsWUFBWSxFQUNaLGlCQUFpQixFQUNqQixXQUFXLEdBQ1osTUFBTSxjQUFjLENBQUM7QUFDdEIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFL0Q7OztHQUdHO0FBS0gsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixNQUFNLENBQUMsVUFBVSxDQUNmLEtBQXlFLEVBQWM7WUFBdkYsRUFBRSxRQUFRLEdBQUcsR0FBRyxFQUFFLHFCQUFxQixHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsRUFBRSxPQUErQixFQUExQixPQUFPLGNBQXBFLCtDQUFzRSxDQUFGO1FBRXBFLE9BQU87WUFDTCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLFNBQVMsRUFBRTtnQkFDVCxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRTtnQkFDOUM7b0JBQ0UsT0FBTyxFQUFFLGNBQWM7b0JBQ3ZCLFFBQVEsa0JBQ04sdUJBQXVCLEVBQUUsSUFBSSxJQUMxQixPQUFPLENBQ1g7aUJBQ0Y7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLFlBQVk7b0JBQ3JCLFVBQVUsRUFBRSxrQkFBa0I7b0JBQzlCLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQztpQkFDdkI7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLHdCQUF3QjtvQkFDakMsUUFBUSxFQUFFLHFCQUFxQjtpQkFDaEM7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLGlCQUFpQjtvQkFDMUIsUUFBUSxFQUFFLHFCQUFxQjtpQkFDaEM7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLFdBQVc7b0JBQ3BCLFFBQVEsRUFBRSxlQUFlO2lCQUMxQjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsWUFBWTtvQkFDckIsUUFBUSxFQUFFLENBQUM7aUJBQ1o7Z0JBQ0QsYUFBYSxDQUFDLE1BQU0sQ0FBQzthQUN0QjtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUEzQ0YsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixFQUFFLGNBQWMsQ0FBQztnQkFDOUMsT0FBTyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxDQUFDO2FBQ3JFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQUJQLFxuICBCYXNlQ29yZU1vZHVsZSxcbiAgY29yZU9wdGlvbnNGYWN0b3J5LFxuICBDT1JFX09QVElPTlMsXG4gIExJU1RfUVVFUllfREVCT1VOQ0VfVElNRSxcbiAgTE9BREVSX0RFTEFZLFxuICBQZXJtaXNzaW9uU2VydmljZSxcbiAgUmVzdFNlcnZpY2UsXG59IGZyb20gJ0BhYnAvbmcuY29yZSc7XG5pbXBvcnQgeyBBUFBfQkFTRV9IUkVGIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb29wQW5pbWF0aW9uc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBwcm92aWRlUm91dGVzIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFJvdXRlclRlc3RpbmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXIvdGVzdGluZyc7XG5pbXBvcnQgeyBNb2NrUGVybWlzc2lvblNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL21vY2stcGVybWlzc2lvbi5zZXJ2aWNlJztcbmltcG9ydCB7IE1vY2tSZXN0U2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvbW9jay1yZXN0LnNlcnZpY2UnO1xuXG4vKipcbiAqIENvcmVUZXN0aW5nTW9kdWxlIGlzIHRoZSBtb2R1bGUgdGhhdCB3aWxsIGJlIHVzZWQgaW4gdGVzdHNcbiAqIGFuZCBpdCBwcm92aWRlcyBtb2NrIGFsdGVybmF0aXZlc1xuICovXG5ATmdNb2R1bGUoe1xuICBleHBvcnRzOiBbUm91dGVyVGVzdGluZ01vZHVsZSwgQmFzZUNvcmVNb2R1bGVdLFxuICBpbXBvcnRzOiBbTm9vcEFuaW1hdGlvbnNNb2R1bGUsIFJvdXRlclRlc3RpbmdNb2R1bGUsIEJhc2VDb3JlTW9kdWxlXSxcbn0pXG5leHBvcnQgY2xhc3MgQ29yZVRlc3RpbmdNb2R1bGUge1xuICBzdGF0aWMgd2l0aENvbmZpZyhcbiAgICB7IGJhc2VIcmVmID0gJy8nLCBsaXN0UXVlcnlEZWJvdW5jZVRpbWUgPSAwLCByb3V0ZXMgPSBbXSwgLi4ub3B0aW9ucyB9ID0ge30gYXMgQUJQLlRlc3QsXG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnM8Q29yZVRlc3RpbmdNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IENvcmVUZXN0aW5nTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHsgcHJvdmlkZTogQVBQX0JBU0VfSFJFRiwgdXNlVmFsdWU6IGJhc2VIcmVmIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiAnQ09SRV9PUFRJT05TJyxcbiAgICAgICAgICB1c2VWYWx1ZToge1xuICAgICAgICAgICAgc2tpcEdldEFwcENvbmZpZ3VyYXRpb246IHRydWUsXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBDT1JFX09QVElPTlMsXG4gICAgICAgICAgdXNlRmFjdG9yeTogY29yZU9wdGlvbnNGYWN0b3J5LFxuICAgICAgICAgIGRlcHM6IFsnQ09SRV9PUFRJT05TJ10sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBMSVNUX1FVRVJZX0RFQk9VTkNFX1RJTUUsXG4gICAgICAgICAgdXNlVmFsdWU6IGxpc3RRdWVyeURlYm91bmNlVGltZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFBlcm1pc3Npb25TZXJ2aWNlLFxuICAgICAgICAgIHVzZUNsYXNzOiBNb2NrUGVybWlzc2lvblNlcnZpY2UsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBSZXN0U2VydmljZSxcbiAgICAgICAgICB1c2VDbGFzczogTW9ja1Jlc3RTZXJ2aWNlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogTE9BREVSX0RFTEFZLFxuICAgICAgICAgIHVzZVZhbHVlOiAwLFxuICAgICAgICB9LFxuICAgICAgICBwcm92aWRlUm91dGVzKHJvdXRlcyksXG4gICAgICBdLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==