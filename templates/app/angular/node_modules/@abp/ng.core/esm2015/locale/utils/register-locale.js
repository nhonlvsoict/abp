import { __awaiter } from "tslib";
import { differentLocales } from '@abp/ng.core';
import { isDevMode } from '@angular/core';
let localeMap = {};
export function registerLocale({ cultureNameLocaleFileMap = {}, errorHandlerFn = defaultLocalErrorHandlerFn, } = {}) {
    return (locale) => {
        localeMap = Object.assign(Object.assign({}, differentLocales), cultureNameLocaleFileMap);
        return new Promise((resolve, reject) => {
            return import(
            /* webpackMode: "lazy-once" */
            /* webpackChunkName: "locales"*/
            /* webpackInclude: /[/\\](ar|cs|en|en-GB|es|de|fi|fr|pt|tr|ru|hu|sl|zh-Hans|zh-Hant).js/ */
            /* webpackExclude: /[/\\]global|extra/ */
            `@angular/common/locales/${localeMap[locale] || locale}.js`)
                .then(resolve)
                .catch(error => {
                errorHandlerFn({
                    resolve,
                    reject,
                    error,
                    locale,
                });
            });
        });
    };
}
const extraLocales = {};
export function storeLocaleData(data, localeId) {
    extraLocales[localeId] = data;
}
export function defaultLocalErrorHandlerFn({ locale, resolve }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (extraLocales[locale]) {
            resolve({ default: extraLocales[localeMap[locale] || locale] });
            return;
        }
        if (isDevMode) {
            console.error(`Cannot find the ${locale} locale file. You can check how can add new culture at https://docs.abp.io/en/abp/latest/UI/Angular/Localization#adding-a-new-culture`);
        }
        resolve();
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXItbG9jYWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9sb2NhbGUvc3JjL3V0aWxzL3JlZ2lzdGVyLWxvY2FsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFTMUMsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBT25CLE1BQU0sVUFBVSxjQUFjLENBQzVCLEVBQ0Usd0JBQXdCLEdBQUcsRUFBRSxFQUM3QixjQUFjLEdBQUcsMEJBQTBCLE1BQ3pDLEVBQXdCO0lBRTVCLE9BQU8sQ0FBQyxNQUFjLEVBQWdCLEVBQUU7UUFDdEMsU0FBUyxtQ0FBUSxnQkFBZ0IsR0FBSyx3QkFBd0IsQ0FBRSxDQUFDO1FBRWpFLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsT0FBTyxNQUFNO1lBQ1gsOEJBQThCO1lBQzlCLGdDQUFnQztZQUNoQywyRkFBMkY7WUFDM0YseUNBQXlDO1lBQ3pDLDJCQUEyQixTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxLQUFLLENBQzVEO2lCQUNFLElBQUksQ0FBQyxPQUFPLENBQUM7aUJBQ2IsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNiLGNBQWMsQ0FBQztvQkFDYixPQUFPO29CQUNQLE1BQU07b0JBQ04sS0FBSztvQkFDTCxNQUFNO2lCQUNQLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLE1BQU0sVUFBVSxlQUFlLENBQUMsSUFBUyxFQUFFLFFBQWdCO0lBQ3pELFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDaEMsQ0FBQztBQUVELE1BQU0sVUFBZ0IsMEJBQTBCLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUEwQjs7UUFDMUYsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDeEIsT0FBTyxDQUFDLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2hFLE9BQU87U0FDUjtRQUVELElBQUksU0FBUyxFQUFFO1lBQ2IsT0FBTyxDQUFDLEtBQUssQ0FDWCxtQkFBbUIsTUFBTSx1SUFBdUksQ0FDakssQ0FBQztTQUNIO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0NBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkaWZmZXJlbnRMb2NhbGVzIH0gZnJvbSAnQGFicC9uZy5jb3JlJztcbmltcG9ydCB7IGlzRGV2TW9kZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvY2FsZUVycm9ySGFuZGxlckRhdGEge1xuICByZXNvbHZlOiBhbnk7XG4gIHJlamVjdDogYW55O1xuICBlcnJvcjogYW55O1xuICBsb2NhbGU6IHN0cmluZztcbn1cblxubGV0IGxvY2FsZU1hcCA9IHt9O1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlZ2lzdGVyTG9jYWxlRGF0YSB7XG4gIGN1bHR1cmVOYW1lTG9jYWxlRmlsZU1hcD86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4gIGVycm9ySGFuZGxlckZuPzogKGRhdGE6IExvY2FsZUVycm9ySGFuZGxlckRhdGEpID0+IGFueTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyTG9jYWxlKFxuICB7XG4gICAgY3VsdHVyZU5hbWVMb2NhbGVGaWxlTWFwID0ge30sXG4gICAgZXJyb3JIYW5kbGVyRm4gPSBkZWZhdWx0TG9jYWxFcnJvckhhbmRsZXJGbixcbiAgfSA9IHt9IGFzIFJlZ2lzdGVyTG9jYWxlRGF0YSxcbikge1xuICByZXR1cm4gKGxvY2FsZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICBsb2NhbGVNYXAgPSB7IC4uLmRpZmZlcmVudExvY2FsZXMsIC4uLmN1bHR1cmVOYW1lTG9jYWxlRmlsZU1hcCB9O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHJldHVybiBpbXBvcnQoXG4gICAgICAgIC8qIHdlYnBhY2tNb2RlOiBcImxhenktb25jZVwiICovXG4gICAgICAgIC8qIHdlYnBhY2tDaHVua05hbWU6IFwibG9jYWxlc1wiKi9cbiAgICAgICAgLyogd2VicGFja0luY2x1ZGU6IC9bL1xcXFxdKGFyfGNzfGVufGVuLUdCfGVzfGRlfGZpfGZyfHB0fHRyfHJ1fGh1fHNsfHpoLUhhbnN8emgtSGFudCkuanMvICovXG4gICAgICAgIC8qIHdlYnBhY2tFeGNsdWRlOiAvWy9cXFxcXWdsb2JhbHxleHRyYS8gKi9cbiAgICAgICAgYEBhbmd1bGFyL2NvbW1vbi9sb2NhbGVzLyR7bG9jYWxlTWFwW2xvY2FsZV0gfHwgbG9jYWxlfS5qc2BcbiAgICAgIClcbiAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICBlcnJvckhhbmRsZXJGbih7XG4gICAgICAgICAgICByZXNvbHZlLFxuICAgICAgICAgICAgcmVqZWN0LFxuICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICBsb2NhbGUsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufVxuXG5jb25zdCBleHRyYUxvY2FsZXMgPSB7fTtcbmV4cG9ydCBmdW5jdGlvbiBzdG9yZUxvY2FsZURhdGEoZGF0YTogYW55LCBsb2NhbGVJZDogc3RyaW5nKSB7XG4gIGV4dHJhTG9jYWxlc1tsb2NhbGVJZF0gPSBkYXRhO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVmYXVsdExvY2FsRXJyb3JIYW5kbGVyRm4oeyBsb2NhbGUsIHJlc29sdmUgfTogTG9jYWxlRXJyb3JIYW5kbGVyRGF0YSkge1xuICBpZiAoZXh0cmFMb2NhbGVzW2xvY2FsZV0pIHtcbiAgICByZXNvbHZlKHsgZGVmYXVsdDogZXh0cmFMb2NhbGVzW2xvY2FsZU1hcFtsb2NhbGVdIHx8IGxvY2FsZV0gfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlzRGV2TW9kZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBgQ2Fubm90IGZpbmQgdGhlICR7bG9jYWxlfSBsb2NhbGUgZmlsZS4gWW91IGNhbiBjaGVjayBob3cgY2FuIGFkZCBuZXcgY3VsdHVyZSBhdCBodHRwczovL2RvY3MuYWJwLmlvL2VuL2FicC9sYXRlc3QvVUkvQW5ndWxhci9Mb2NhbGl6YXRpb24jYWRkaW5nLWEtbmV3LWN1bHR1cmVgLFxuICAgICk7XG4gIH1cblxuICByZXNvbHZlKCk7XG59XG4iXX0=