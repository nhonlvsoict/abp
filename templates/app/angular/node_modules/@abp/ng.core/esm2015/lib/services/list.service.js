import { Injectable, Injector } from '@angular/core';
import { BehaviorSubject, of, ReplaySubject, Subject, } from 'rxjs';
import { catchError, debounceTime, filter, shareReplay, switchMap, takeUntil, tap, } from 'rxjs/operators';
import { LIST_QUERY_DEBOUNCE_TIME } from '../tokens/list.token';
export class ListService {
    constructor(injector) {
        this._filter = '';
        this._maxResultCount = 10;
        this._skipCount = 0;
        this._page = 0;
        this._sortKey = '';
        this._sortOrder = '';
        this._query$ = new ReplaySubject(1);
        this._isLoading$ = new BehaviorSubject(false);
        this.destroy$ = new Subject();
        this.get = () => {
            this.resetPageWhenUnchanged();
            this.next();
        };
        this.getWithoutPageReset = () => {
            this.next();
        };
        const delay = injector.get(LIST_QUERY_DEBOUNCE_TIME, 300);
        this.delay = delay ? debounceTime(delay) : tap();
        this.get();
    }
    set filter(value) {
        this._filter = value;
        this.get();
    }
    get filter() {
        return this._filter;
    }
    set maxResultCount(value) {
        this._maxResultCount = value;
        this.get();
    }
    get maxResultCount() {
        return this._maxResultCount;
    }
    set page(value) {
        if (value === this._page)
            return;
        this._page = value;
        this.get();
    }
    get page() {
        return this._page;
    }
    set sortKey(value) {
        this._sortKey = value;
        this.get();
    }
    get sortKey() {
        return this._sortKey;
    }
    set sortOrder(value) {
        this._sortOrder = value;
        this.get();
    }
    get sortOrder() {
        return this._sortOrder;
    }
    get query$() {
        return this._query$
            .asObservable()
            .pipe(this.delay, shareReplay({ bufferSize: 1, refCount: true }));
    }
    get isLoading$() {
        return this._isLoading$.asObservable();
    }
    hookToQuery(streamCreatorCallback) {
        this._isLoading$.next(true);
        return this.query$.pipe(switchMap(query => streamCreatorCallback(query).pipe(catchError(() => of(null)))), filter(Boolean), tap(() => this._isLoading$.next(false)), shareReplay({ bufferSize: 1, refCount: true }), takeUntil(this.destroy$));
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
    resetPageWhenUnchanged() {
        const skipCount = this._page * this._maxResultCount;
        if (skipCount === this._skipCount) {
            this._page = 0;
            this._skipCount = 0;
        }
        else
            this._skipCount = skipCount;
    }
    next() {
        this._query$.next({
            filter: this._filter || undefined,
            maxResultCount: this._maxResultCount,
            skipCount: this._page * this._maxResultCount,
            sorting: this._sortOrder ? `${this._sortKey} ${this._sortOrder}` : undefined,
        });
    }
}
ListService.decorators = [
    { type: Injectable }
];
ListService.ctorParameters = () => [
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,