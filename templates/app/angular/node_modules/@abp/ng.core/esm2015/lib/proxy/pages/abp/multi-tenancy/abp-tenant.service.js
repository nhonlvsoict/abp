import { Injectable } from '@angular/core';
import { RestService } from '../../../../services/rest.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/rest.service";
export class AbpTenantService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'abp';
        this.findTenantById = (id, headers) => this.restService.request({
            method: 'GET',
            url: `/api/abp/multi-tenancy/tenants/by-id/${id}`,
            headers,
        }, { apiName: this.apiName });
        this.findTenantByName = (name, headers) => this.restService.request({
            method: 'GET',
            url: `/api/abp/multi-tenancy/tenants/by-name/${name}`,
            headers,
        }, { apiName: this.apiName });
    }
}
AbpTenantService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AbpTenantService_Factory() { return new AbpTenantService(i0.ɵɵinject(i1.RestService)); }, token: AbpTenantService, providedIn: "root" });
AbpTenantService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
AbpTenantService.ctorParameters = () => [
    { type: RestService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJwLXRlbmFudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbGliL3Byb3h5L3BhZ2VzL2FicC9tdWx0aS10ZW5hbmN5L2FicC10ZW5hbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7O0FBTWhFLE1BQU0sT0FBTyxnQkFBZ0I7SUF1QjNCLFlBQW9CLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBdEI1QyxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBRWhCLG1CQUFjLEdBQUcsQ0FBQyxFQUFVLEVBQUUsT0FBK0IsRUFBRSxFQUFFLENBQy9ELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUN0QjtZQUNFLE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLHdDQUF3QyxFQUFFLEVBQUU7WUFDakQsT0FBTztTQUNSLEVBQ0QsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUMxQixDQUFDO1FBRUoscUJBQWdCLEdBQUcsQ0FBQyxJQUFZLEVBQUUsT0FBK0IsRUFBRSxFQUFFLENBQ25FLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUN0QjtZQUNFLE1BQU0sRUFBRSxLQUFLO1lBQ2IsR0FBRyxFQUFFLDBDQUEwQyxJQUFJLEVBQUU7WUFDckQsT0FBTztTQUNSLEVBQ0QsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUMxQixDQUFDO0lBRTJDLENBQUM7Ozs7WUExQmpELFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBTFEsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlc3RTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvcmVzdC5zZXJ2aWNlJztcbmltcG9ydCB0eXBlIHsgRmluZFRlbmFudFJlc3VsdER0byB9IGZyb20gJy4uLy4uLy4uL3ZvbG8vYWJwL2FzcC1uZXQtY29yZS9tdmMvbXVsdGktdGVuYW5jeS9tb2RlbHMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQWJwVGVuYW50U2VydmljZSB7XG4gIGFwaU5hbWUgPSAnYWJwJztcblxuICBmaW5kVGVuYW50QnlJZCA9IChpZDogc3RyaW5nLCBoZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSA9PlxuICAgIHRoaXMucmVzdFNlcnZpY2UucmVxdWVzdDxhbnksIEZpbmRUZW5hbnRSZXN1bHREdG8+KFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICB1cmw6IGAvYXBpL2FicC9tdWx0aS10ZW5hbmN5L3RlbmFudHMvYnktaWQvJHtpZH1gLFxuICAgICAgICBoZWFkZXJzLFxuICAgICAgfSxcbiAgICAgIHsgYXBpTmFtZTogdGhpcy5hcGlOYW1lIH0sXG4gICAgKTtcblxuICBmaW5kVGVuYW50QnlOYW1lID0gKG5hbWU6IHN0cmluZywgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPikgPT5cbiAgICB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3Q8YW55LCBGaW5kVGVuYW50UmVzdWx0RHRvPihcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgdXJsOiBgL2FwaS9hYnAvbXVsdGktdGVuYW5jeS90ZW5hbnRzL2J5LW5hbWUvJHtuYW1lfWAsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICB9LFxuICAgICAgeyBhcGlOYW1lOiB0aGlzLmFwaU5hbWUgfSxcbiAgICApO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVzdFNlcnZpY2U6IFJlc3RTZXJ2aWNlKSB7fVxufVxuIl19