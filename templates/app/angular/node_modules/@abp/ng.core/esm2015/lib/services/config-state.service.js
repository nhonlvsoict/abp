import { Injectable } from '@angular/core';
import { map, tap } from 'rxjs/operators';
import { InternalStore } from '../utils/internal-store-utils';
import { AbpApplicationConfigurationService } from '../proxy/volo/abp/asp-net-core/mvc/application-configurations/abp-application-configuration.service';
import * as i0 from "@angular/core";
import * as i1 from "../proxy/volo/abp/asp-net-core/mvc/application-configurations/abp-application-configuration.service";
export class ConfigStateService {
    constructor(abpConfigService) {
        this.abpConfigService = abpConfigService;
        this.store = new InternalStore({});
    }
    get createOnUpdateStream() {
        return this.store.sliceUpdate;
    }
    setState(state) {
        this.store.set(state);
    }
    refreshAppState() {
        return this.abpConfigService.get().pipe(tap(res => this.setState(res)));
    }
    getOne$(key) {
        return this.store.sliceState(state => state[key]);
    }
    getOne(key) {
        return this.store.state[key];
    }
    getAll$() {
        return this.store.sliceState(state => state);
    }
    getAll() {
        return this.store.state;
    }
    getDeep$(keys) {
        keys = splitKeys(keys);
        return this.store
            .sliceState(state => state)
            .pipe(map(state => {
            return keys.reduce((acc, val) => {
                if (acc) {
                    return acc[val];
                }
                return undefined;
            }, state);
        }));
    }
    getDeep(keys) {
        keys = splitKeys(keys);
        return keys.reduce((acc, val) => {
            if (acc) {
                return acc[val];
            }
            return undefined;
        }, this.store.state);
    }
    getFeature(key) {
        var _a, _b;
        return (_b = (_a = this.store.state.features) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b[key];
    }
    getFeature$(key) {
        return this.store.sliceState(state => { var _a, _b; return (_b = (_a = state.features) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b[key]; });
    }
    getFeatures(keys) {
        const { features } = this.store.state;
        if (!features)
            return;
        return keys.reduce((acc, key) => (Object.assign(Object.assign({}, acc), { [key]: features.values[key] })), {});
    }
    getFeatures$(keys) {
        return this.store.sliceState(({ features }) => {
            if (!(features === null || features === void 0 ? void 0 : features.values))
                return;
            return keys.reduce((acc, key) => (Object.assign(Object.assign({}, acc), { [key]: features.values[key] })), {});
        });
    }
    getSetting(key) {
        var _a, _b;
        return (_b = (_a = this.store.state.setting) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b[key];
    }
    getSetting$(key) {
        return this.store.sliceState(state => { var _a, _b; return (_b = (_a = state.setting) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b[key]; });
    }
    getSettings(keyword) {
        var _a;
        const settings = ((_a = this.store.state.setting) === null || _a === void 0 ? void 0 : _a.values) || {};
        if (!keyword)
            return settings;
        const keysFound = Object.keys(settings).filter(key => key.indexOf(keyword) > -1);
        return keysFound.reduce((acc, key) => {
            acc[key] = settings[key];
            return acc;
        }, {});
    }
    getSettings$(keyword) {
        return this.store
            .sliceState(state => { var _a; return (_a = state.setting) === null || _a === void 0 ? void 0 : _a.values; })
            .pipe(map((settings = {}) => {
            if (!keyword)
                return settings;
            const keysFound = Object.keys(settings).filter(key => key.indexOf(keyword) > -1);
            return keysFound.reduce((acc, key) => {
                acc[key] = settings[key];
                return acc;
            }, {});
        }));
    }
}
ConfigStateService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConfigStateService_Factory() { return new ConfigStateService(i0.ɵɵinject(i1.AbpApplicationConfigurationService)); }, token: ConfigStateService, providedIn: "root" });
ConfigStateService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ConfigStateService.ctorParameters = () => [
    { type: AbpApplicationConfigurationService }
];
function splitKeys(keys) {
    if (typeof keys === 'string') {
        keys = keys.split('.');
    }
    if (!Array.isArray(keys)) {
        throw new Error('The argument must be a dot string or an string array.');
    }
    return keys;
}
//# sourceMappingURL=data:application/json;base64,