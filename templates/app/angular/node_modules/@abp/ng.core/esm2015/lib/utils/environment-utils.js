import { HttpClient } from '@angular/common/http';
import { Store } from '@ngxs/store';
import { catchError, tap } from 'rxjs/operators';
import { RestOccurError } from '../actions/rest.actions';
import { EnvironmentService } from '../services/environment.service';
import { deepMerge } from './object-utils';
export function getRemoteEnv(injector, environment) {
    const environmentService = injector.get(EnvironmentService);
    const { remoteEnv } = environment;
    const { headers = {}, method = 'GET', url } = remoteEnv || {};
    if (!url)
        return Promise.resolve();
    const http = injector.get(HttpClient);
    const store = injector.get(Store);
    return http
        .request(method, url, { headers })
        .pipe(catchError(err => store.dispatch(new RestOccurError(err))), // TODO: Condiser get handle function from a provider
    tap(env => environmentService.setState(mergeEnvironments(environment, env, remoteEnv))))
        .toPromise();
}
function mergeEnvironments(local, remote, config) {
    switch (config.mergeStrategy) {
        case 'deepmerge':
            return deepMerge(local, remote);
        case 'overwrite':
        case null:
        case undefined:
            return remote;
        default:
            return config.mergeStrategy(local, remote);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52aXJvbm1lbnQtdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvdXRpbHMvZW52aXJvbm1lbnQtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDcEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFekQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDckUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE1BQU0sVUFBVSxZQUFZLENBQUMsUUFBa0IsRUFBRSxXQUFpQztJQUNoRixNQUFNLGtCQUFrQixHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUU1RCxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsV0FBVyxDQUFDO0lBQ2xDLE1BQU0sRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFFLE1BQU0sR0FBRyxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsU0FBUyxJQUFLLEVBQWdCLENBQUM7SUFDN0UsSUFBSSxDQUFDLEdBQUc7UUFBRSxPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUVuQyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFbEMsT0FBTyxJQUFJO1NBQ1IsT0FBTyxDQUFjLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQztTQUM5QyxJQUFJLENBQ0gsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUscURBQXFEO0lBQ2pILEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FDeEY7U0FDQSxTQUFTLEVBQUUsQ0FBQztBQUNqQixDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FDeEIsS0FBMkIsRUFDM0IsTUFBVyxFQUNYLE1BQWlCO0lBRWpCLFFBQVEsTUFBTSxDQUFDLGFBQWEsRUFBRTtRQUM1QixLQUFLLFdBQVc7WUFDZCxPQUFPLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbEMsS0FBSyxXQUFXLENBQUM7UUFDakIsS0FBSyxJQUFJLENBQUM7UUFDVixLQUFLLFNBQVM7WUFDWixPQUFPLE1BQU0sQ0FBQztRQUNoQjtZQUNFLE9BQU8sTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDOUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFJlc3RPY2N1ckVycm9yIH0gZnJvbSAnLi4vYWN0aW9ucy9yZXN0LmFjdGlvbnMnO1xuaW1wb3J0IHsgRW52aXJvbm1lbnQsIFJlbW90ZUVudiB9IGZyb20gJy4uL21vZGVscy9lbnZpcm9ubWVudCc7XG5pbXBvcnQgeyBFbnZpcm9ubWVudFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9lbnZpcm9ubWVudC5zZXJ2aWNlJztcbmltcG9ydCB7IGRlZXBNZXJnZSB9IGZyb20gJy4vb2JqZWN0LXV0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlbW90ZUVudihpbmplY3RvcjogSW5qZWN0b3IsIGVudmlyb25tZW50OiBQYXJ0aWFsPEVudmlyb25tZW50Pikge1xuICBjb25zdCBlbnZpcm9ubWVudFNlcnZpY2UgPSBpbmplY3Rvci5nZXQoRW52aXJvbm1lbnRTZXJ2aWNlKTtcblxuICBjb25zdCB7IHJlbW90ZUVudiB9ID0gZW52aXJvbm1lbnQ7XG4gIGNvbnN0IHsgaGVhZGVycyA9IHt9LCBtZXRob2QgPSAnR0VUJywgdXJsIH0gPSByZW1vdGVFbnYgfHwgKHt9IGFzIFJlbW90ZUVudik7XG4gIGlmICghdXJsKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgY29uc3QgaHR0cCA9IGluamVjdG9yLmdldChIdHRwQ2xpZW50KTtcbiAgY29uc3Qgc3RvcmUgPSBpbmplY3Rvci5nZXQoU3RvcmUpO1xuXG4gIHJldHVybiBodHRwXG4gICAgLnJlcXVlc3Q8RW52aXJvbm1lbnQ+KG1ldGhvZCwgdXJsLCB7IGhlYWRlcnMgfSlcbiAgICAucGlwZShcbiAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHN0b3JlLmRpc3BhdGNoKG5ldyBSZXN0T2NjdXJFcnJvcihlcnIpKSksIC8vIFRPRE86IENvbmRpc2VyIGdldCBoYW5kbGUgZnVuY3Rpb24gZnJvbSBhIHByb3ZpZGVyXG4gICAgICB0YXAoZW52ID0+IGVudmlyb25tZW50U2VydmljZS5zZXRTdGF0ZShtZXJnZUVudmlyb25tZW50cyhlbnZpcm9ubWVudCwgZW52LCByZW1vdGVFbnYpKSksXG4gICAgKVxuICAgIC50b1Byb21pc2UoKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VFbnZpcm9ubWVudHMoXG4gIGxvY2FsOiBQYXJ0aWFsPEVudmlyb25tZW50PixcbiAgcmVtb3RlOiBhbnksXG4gIGNvbmZpZzogUmVtb3RlRW52LFxuKTogRW52aXJvbm1lbnQge1xuICBzd2l0Y2ggKGNvbmZpZy5tZXJnZVN0cmF0ZWd5KSB7XG4gICAgY2FzZSAnZGVlcG1lcmdlJzpcbiAgICAgIHJldHVybiBkZWVwTWVyZ2UobG9jYWwsIHJlbW90ZSk7XG4gICAgY2FzZSAnb3ZlcndyaXRlJzpcbiAgICBjYXNlIG51bGw6XG4gICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICByZXR1cm4gcmVtb3RlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gY29uZmlnLm1lcmdlU3RyYXRlZ3kobG9jYWwsIHJlbW90ZSk7XG4gIH1cbn1cbiJdfQ==