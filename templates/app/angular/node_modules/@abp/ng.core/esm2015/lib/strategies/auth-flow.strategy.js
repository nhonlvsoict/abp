import { __awaiter } from "tslib";
import { HttpHeaders } from '@angular/common/http';
import { Router } from '@angular/router';
import { Store } from '@ngxs/store';
import { OAuthErrorEvent, OAuthInfoEvent, OAuthService, } from 'angular-oauth2-oidc';
import { from, of, pipe } from 'rxjs';
import { filter, switchMap, tap } from 'rxjs/operators';
import { RestOccurError } from '../actions/rest.actions';
import { AbpApplicationConfigurationService } from '../proxy/volo/abp/asp-net-core/mvc/application-configurations/abp-application-configuration.service';
import { ConfigStateService } from '../services/config-state.service';
import { EnvironmentService } from '../services/environment.service';
import { SessionStateService } from '../services/session-state.service';
import { removeRememberMe, setRememberMe } from '../utils/auth-utils';
import { noop } from '../utils/common-utils';
import { TENANT_KEY } from '../tokens/tenant-key.token';
export const oAuthStorage = localStorage;
export class AuthFlowStrategy {
    constructor(injector) {
        this.injector = injector;
        this.catchError = err => this.store.dispatch(new RestOccurError(err));
        this.store = injector.get(Store);
        this.environment = injector.get(EnvironmentService);
        this.configState = injector.get(ConfigStateService);
        this.oAuthService = injector.get(OAuthService);
        this.appConfigService = injector.get(AbpApplicationConfigurationService);
        this.sessionState = injector.get(SessionStateService);
        this.oAuthConfig = this.environment.getEnvironment().oAuthConfig;
        this.tenantKey = injector.get(TENANT_KEY);
        this.listenToOauthErrors();
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const shouldClear = shouldStorageClear(this.environment.getEnvironment().oAuthConfig.clientId, oAuthStorage);
            if (shouldClear)
                clearOAuthStorage(oAuthStorage);
            this.oAuthService.configure(this.oAuthConfig);
            return this.oAuthService
                .loadDiscoveryDocument()
                .then(() => {
                if (this.oAuthService.hasValidAccessToken() || !this.oAuthService.getRefreshToken()) {
                    return Promise.resolve();
                }
                return this.refreshToken();
            })
                .catch(this.catchError);
        });
    }
    refreshToken() {
        return this.oAuthService.refreshToken().catch(() => clearOAuthStorage());
    }
    listenToOauthErrors() {
        this.oAuthService.events
            .pipe(filter(event => event instanceof OAuthErrorEvent), tap(() => clearOAuthStorage()), switchMap(() => this.appConfigService.get()))
            .subscribe(res => {
            this.configState.setState(res);
        });
    }
}
export class AuthCodeFlowStrategy extends AuthFlowStrategy {
    constructor() {
        super(...arguments);
        this.isInternalAuth = false;
    }
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.init.call(this)
                .then(() => this.oAuthService.tryLogin().catch(noop))
                .then(() => this.oAuthService.setupAutomaticSilentRefresh({}, 'access_token'));
        });
    }
    navigateToLogin(queryParams) {
        this.oAuthService.initCodeFlow('', this.getCultureParams(queryParams));
    }
    checkIfInternalAuth(queryParams) {
        this.oAuthService.initCodeFlow('', this.getCultureParams(queryParams));
        return false;
    }
    logout(queryParams) {
        return from(this.oAuthService.revokeTokenAndLogout(this.getCultureParams(queryParams)));
    }
    login(queryParams) {
        this.oAuthService.initCodeFlow('', this.getCultureParams(queryParams));
        return of(null);
    }
    getCultureParams(queryParams) {
        const lang = this.sessionState.getLanguage();
        const culture = { culture: lang, 'ui-culture': lang };
        return Object.assign(Object.assign({}, (lang && culture)), queryParams);
    }
}
export class AuthPasswordFlowStrategy extends AuthFlowStrategy {
    constructor() {
        super(...arguments);
        this.isInternalAuth = true;
        this.cookieKey = 'rememberMe';
        this.storageKey = 'passwordFlow';
    }
    listenToTokenExpiration() {
        this.oAuthService.events
            .pipe(filter(event => event instanceof OAuthInfoEvent &&
            event.type === 'token_expires' &&
            event.info === 'access_token'))
            .subscribe(() => {
            if (this.oAuthService.getRefreshToken()) {
                this.refreshToken();
            }
            else {
                this.oAuthService.logOut();
                removeRememberMe();
                this.appConfigService.get().subscribe(res => {
                    this.configState.setState(res);
                });
            }
        });
    }
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (!getCookieValueByName(this.cookieKey) && localStorage.getItem(this.storageKey)) {
                this.oAuthService.logOut();
            }
            return _super.init.call(this).then(() => this.listenToTokenExpiration());
        });
    }
    navigateToLogin(queryParams) {
        const router = this.injector.get(Router);
        router.navigate(['/account/login'], { queryParams });
    }
    checkIfInternalAuth() {
        return true;
    }
    login(params) {
        const tenant = this.sessionState.getTenant();
        return from(this.oAuthService.fetchTokenUsingPasswordFlow(params.username, params.password, new HttpHeaders(Object.assign({}, (tenant && tenant.id && { [this.tenantKey]: tenant.id }))))).pipe(this.pipeToLogin(params));
    }
    pipeToLogin(params) {
        const router = this.injector.get(Router);
        return pipe(switchMap(() => this.appConfigService.get()), tap(res => {
            this.configState.setState(res);
            setRememberMe(params.rememberMe);
            if (params.redirectUrl)
                router.navigate([params.redirectUrl]);
        }));
    }
    logout(queryParams) {
        const router = this.injector.get(Router);
        return from(this.oAuthService.revokeTokenAndLogout(queryParams)).pipe(switchMap(() => this.appConfigService.get()), tap(res => {
            this.configState.setState(res);
            router.navigateByUrl('/');
            removeRememberMe();
        }));
    }
    refreshToken() {
        return this.oAuthService.refreshToken().catch(() => {
            clearOAuthStorage();
            removeRememberMe();
        });
    }
}
export const AUTH_FLOW_STRATEGY = {
    Code(injector) {
        return new AuthCodeFlowStrategy(injector);
    },
    Password(injector) {
        return new AuthPasswordFlowStrategy(injector);
    },
};
export function clearOAuthStorage(storage = oAuthStorage) {
    const keys = [
        'access_token',
        'id_token',
        'refresh_token',
        'nonce',
        'PKCE_verifier',
        'expires_at',
        'id_token_claims_obj',
        'id_token_expires_at',
        'id_token_stored_at',
        'access_token_stored_at',
        'granted_scopes',
        'session_state',
    ];
    keys.forEach(key => storage.removeItem(key));
}
function shouldStorageClear(clientId, storage) {
    const key = 'abpOAuthClientId';
    if (!storage.getItem(key)) {
        storage.setItem(key, clientId);
        return false;
    }
    const shouldClear = storage.getItem(key) !== clientId;
    if (shouldClear)
        storage.setItem(key, clientId);
    return shouldClear;
}
function getCookieValueByName(name) {
    const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
    return match ? match[2] : '';
}
//# sourceMappingURL=data:application/json;base64,