var ConfigState_1;
import { __decorate } from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Action, createSelector, Selector, State, Store } from '@ngxs/store';
import { throwError } from 'rxjs';
import { catchError, distinctUntilChanged, tap } from 'rxjs/operators';
import snq from 'snq';
import { GetAppConfiguration, PatchConfigState, SetEnvironment } from '../actions/config.actions';
import { RestOccurError } from '../actions/rest.actions';
import { ConfigStateService } from '../services/config-state.service';
import { EnvironmentService } from '../services/environment.service';
import { SessionStateService } from '../services/session-state.service';
import { interpolate } from '../utils/string-utils';
import compare from 'just-compare';
/**
 * @deprecated Use ConfigStateService instead. To be deleted in v5.0.
 */
let ConfigState = ConfigState_1 = class ConfigState {
    constructor(http, store, sessionState, environmentService, configState) {
        this.http = http;
        this.store = store;
        this.sessionState = sessionState;
        this.environmentService = environmentService;
        this.configState = configState;
        this.syncConfigState();
        this.syncEnvironment();
    }
    static getAll(state) {
        return state;
    }
    static getApplicationInfo(state) {
        return state.environment.application || {};
    }
    static getEnvironment(state) {
        return state.environment;
    }
    static getOne(key) {
        const selector = createSelector([ConfigState_1], (state) => {
            return state[key];
        });
        return selector;
    }
    static getDeep(keys) {
        if (typeof keys === 'string') {
            keys = keys.split('.');
        }
        if (!Array.isArray(keys)) {
            throw new Error('The argument must be a dot string or an string array.');
        }
        const selector = createSelector([ConfigState_1], (state) => {
            return keys.reduce((acc, val) => {
                if (acc) {
                    return acc[val];
                }
                return undefined;
            }, state);
        });
        return selector;
    }
    static getApiUrl(key) {
        const selector = createSelector([ConfigState_1], (state) => {
            return (state.environment.apis[key || 'default'] || state.environment.apis.default).url;
        });
        return selector;
    }
    static getFeature(key) {
        const selector = createSelector([ConfigState_1], (state) => {
            return snq(() => state.features.values[key]);
        });
        return selector;
    }
    static getSetting(key) {
        const selector = createSelector([ConfigState_1], (state) => {
            return snq(() => state.setting.values[key]);
        });
        return selector;
    }
    static getSettings(keyword) {
        const selector = createSelector([ConfigState_1], (state) => {
            const settings = snq(() => state.setting.values, {});
            if (!keyword)
                return settings;
            const keysFound = Object.keys(settings).filter(key => key.indexOf(keyword) > -1);
            return keysFound.reduce((acc, key) => {
                acc[key] = settings[key];
                return acc;
            }, {});
        });
        return selector;
    }
    /**
     * @deprecated use PermissionService's getGrantedPolicyStream or getGrantedPolicy methods.
     */
    static getGrantedPolicy(key) {
        const selector = createSelector([ConfigState_1], (state) => {
            if (!key)
                return true;
            const getPolicy = (k) => snq(() => state.auth.grantedPolicies[k], false);
            const orRegexp = /\|\|/g;
            const andRegexp = /&&/g;
            // TODO: Allow combination of ANDs & ORs
            if (orRegexp.test(key)) {
                const keys = key.split('||').filter(Boolean);
                if (keys.length < 2)
                    return false;
                return keys.some(k => getPolicy(k.trim()));
            }
            else if (andRegexp.test(key)) {
                const keys = key.split('&&').filter(Boolean);
                if (keys.length < 2)
                    return false;
                return keys.every(k => getPolicy(k.trim()));
            }
            return getPolicy(key);
        });
        return selector;
    }
    static getLocalizationResource(resourceName) {
        const selector = createSelector([ConfigState_1], (state) => {
            return state.localization.values[resourceName];
        });
        return selector;
    }
    static getLocalization(key, ...interpolateParams) {
        if (!key)
            key = '';
        let defaultValue;
        if (typeof key !== 'string') {
            defaultValue = key.defaultValue;
            key = key.key;
        }
        const keys = key.split('::');
        const selector = createSelector([ConfigState_1], (state) => {
            const warn = (message) => {
                if (!state.environment.production)
                    console.warn(message);
            };
            if (keys.length < 2) {
                warn('The localization source separator (::) not found.');
                return defaultValue || key;
            }
            if (!state.localization)
                return defaultValue || keys[1];
            const sourceName = keys[0] ||
                snq(() => state.environment.localization.defaultResourceName) ||
                state.localization.defaultResourceName;
            const sourceKey = keys[1];
            if (sourceName === '_') {
                return defaultValue || sourceKey;
            }
            if (!sourceName) {
                warn('Localization source name is not specified and the defaultResourceName was not defined!');
                return defaultValue || sourceKey;
            }
            const source = state.localization.values[sourceName];
            if (!source) {
                warn('Could not find localization source: ' + sourceName);
                return defaultValue || sourceKey;
            }
            let localization = source[sourceKey];
            if (typeof localization === 'undefined') {
                return defaultValue || sourceKey;
            }
            interpolateParams = interpolateParams.filter(params => params != null);
            if (localization)
                localization = interpolate(localization, interpolateParams);
            if (typeof localization !== 'string')
                localization = '';
            return localization || defaultValue || key;
        });
        return selector;
    }
    syncConfigState() {
        this.configState
            .createOnUpdateStream(state => state)
            .pipe(distinctUntilChanged(compare))
            .subscribe(config => this.store.dispatch(new PatchConfigState(config)));
    }
    syncEnvironment() {
        this.environmentService
            .createOnUpdateStream(state => state)
            .pipe(distinctUntilChanged(compare))
            .subscribe(env => this.store.dispatch(new PatchConfigState({ environment: env })));
    }
    addData({ patchState, dispatch }) {
        const apiName = 'default';
        const api = this.store.selectSnapshot(ConfigState_1.getApiUrl(apiName));
        return this.http
            .get(`${api}/api/abp/application-configuration`)
            .pipe(tap(configuration => this.configState.setState(configuration)), catchError((err) => {
            dispatch(new RestOccurError(err));
            return throwError(err);
        }));
    }
    setEnvironment(_, { environment }) {
        return this.environmentService.setState(environment);
    }
    setConfig({ patchState, getState }, { state }) {
        patchState(Object.assign(Object.assign({}, getState()), state));
    }
};
ConfigState.decorators = [
    { type: Injectable }
];
ConfigState.ctorParameters = () => [
    { type: HttpClient },
    { type: Store },
    { type: SessionStateService },
    { type: EnvironmentService },
    { type: ConfigStateService }
];
__decorate([
    Action(GetAppConfiguration)
], ConfigState.prototype, "addData", null);
__decorate([
    Action(SetEnvironment)
], ConfigState.prototype, "setEnvironment", null);
__decorate([
    Action(PatchConfigState)
], ConfigState.prototype, "setConfig", null);
__decorate([
    Selector()
], ConfigState, "getAll", null);
__decorate([
    Selector()
], ConfigState, "getApplicationInfo", null);
__decorate([
    Selector()
], ConfigState, "getEnvironment", null);
ConfigState = ConfigState_1 = __decorate([
    State({
        name: 'ConfigState',
        defaults: {},
    })
], ConfigState);
export { ConfigState };
//# sourceMappingURL=data:application/json;base64,