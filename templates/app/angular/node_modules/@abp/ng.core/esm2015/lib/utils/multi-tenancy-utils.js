import { __awaiter } from "tslib";
import clone from 'just-clone';
import { tap } from 'rxjs/operators';
import { EnvironmentService } from '../services/environment.service';
import { MultiTenancyService } from '../services/multi-tenancy.service';
import { createTokenParser } from './string-utils';
const tenancyPlaceholder = '{0}';
function getCurrentTenancyName(appBaseUrl) {
    var _a;
    if (appBaseUrl.charAt(appBaseUrl.length - 1) !== '/')
        appBaseUrl += '/';
    const parseTokens = createTokenParser(appBaseUrl);
    const token = tenancyPlaceholder.replace(/[}{]/g, '');
    return (_a = parseTokens(window.location.href)[token]) === null || _a === void 0 ? void 0 : _a[0];
}
function getCurrentTenancyNameFromUrl(tenantKey) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(tenantKey);
}
export function parseTenantFromUrl(injector) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const environmentService = injector.get(EnvironmentService);
        const multiTenancyService = injector.get(MultiTenancyService);
        const baseUrl = ((_b = (_a = environmentService.getEnvironment()) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.baseUrl) || '';
        const tenancyName = getCurrentTenancyName(baseUrl);
        const hideTenantBox = () => {
            multiTenancyService.isTenantBoxVisible = false;
        };
        const setDomainTenant = (tenant) => {
            multiTenancyService.domainTenant = {
                id: tenant.tenantId,
                name: tenant.name,
                isAvailable: true,
            };
        };
        const setEnvironmentWithDomainTenant = (tenant) => {
            hideTenantBox();
            setDomainTenant(tenant);
            replaceTenantNameWithinEnvironment(injector, tenant.name);
        };
        if (tenancyName) {
            return multiTenancyService
                .setTenantByName(tenancyName)
                .pipe(tap(setEnvironmentWithDomainTenant))
                .toPromise();
        }
        else {
            /**
             * If there is no tenant, we still have to clean up {0}. from baseUrl to avoid incorrect http requests.
             */
            replaceTenantNameWithinEnvironment(injector, '', tenancyPlaceholder + '.');
            const tenantIdFromQueryParams = getCurrentTenancyNameFromUrl(multiTenancyService.tenantKey);
            if (tenantIdFromQueryParams) {
                return multiTenancyService.setTenantById(tenantIdFromQueryParams).toPromise();
            }
        }
        return Promise.resolve();
    });
}
function replaceTenantNameWithinEnvironment(injector, tenancyName, placeholder = tenancyPlaceholder) {
    const environmentService = injector.get(EnvironmentService);
    const environment = clone(environmentService.getEnvironment());
    if (environment.application.baseUrl) {
        environment.application.baseUrl = environment.application.baseUrl.replace(placeholder, tenancyName);
    }
    if (environment.oAuthConfig.redirectUri) {
        environment.oAuthConfig.redirectUri = environment.oAuthConfig.redirectUri.replace(placeholder, tenancyName);
    }
    environment.oAuthConfig.issuer = environment.oAuthConfig.issuer.replace(placeholder, tenancyName);
    Object.keys(environment.apis).forEach(api => {
        Object.keys(environment.apis[api]).forEach(key => {
            environment.apis[api][key] = environment.apis[api][key].replace(placeholder, tenancyName);
        });
    });
    return environmentService.setState(environment);
}
//# sourceMappingURL=data:application/json;base64,