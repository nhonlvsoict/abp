import { registerLocaleData } from '@angular/common';
import { Injectable, Injector, isDevMode, Optional, SkipSelf } from '@angular/core';
import { from, Subject } from 'rxjs';
import { filter, map, mapTo, switchMap, tap } from 'rxjs/operators';
import { AbpApplicationConfigurationService } from '../proxy/volo/abp/asp-net-core/mvc/application-configurations/abp-application-configuration.service';
import { CORE_OPTIONS } from '../tokens/options.token';
import { createLocalizer, createLocalizerWithFallback } from '../utils/localization-utils';
import { interpolate } from '../utils/string-utils';
import { ConfigStateService } from './config-state.service';
import { SessionStateService } from './session-state.service';
import * as i0 from "@angular/core";
import * as i1 from "./session-state.service";
import * as i2 from "./config-state.service";
import * as i3 from "../proxy/volo/abp/asp-net-core/mvc/application-configurations/abp-application-configuration.service";
export class LocalizationService {
    constructor(sessionState, injector, otherInstance, configState, appConfigService) {
        this.sessionState = sessionState;
        this.injector = injector;
        this.configState = configState;
        this.appConfigService = appConfigService;
        this.latestLang = this.sessionState.getLanguage();
        this._languageChange$ = new Subject();
        if (otherInstance)
            throw new Error('LocalizationService should have only one instance.');
        this.listenToSetLanguage();
    }
    /**
     * Returns currently selected language
     */
    get currentLang() {
        return this.latestLang || this.sessionState.getLanguage();
    }
    get languageChange$() {
        return this._languageChange$.asObservable();
    }
    listenToSetLanguage() {
        this.sessionState
            .onLanguageChange$()
            .pipe(filter(lang => this.configState.getDeep('localization.currentCulture.cultureName') !== lang), switchMap(lang => this.appConfigService
            .get()
            .pipe(tap(res => this.configState.setState(res)))
            .pipe(mapTo(lang))), switchMap(lang => from(this.registerLocale(lang).then(() => lang))))
            .subscribe(lang => this._languageChange$.next(lang));
    }
    registerLocale(locale) {
        const { registerLocaleFn } = this.injector.get(CORE_OPTIONS);
        return registerLocaleFn(locale).then(module => {
            if (module === null || module === void 0 ? void 0 : module.default)
                registerLocaleData(module.default);
            this.latestLang = locale;
        });
    }
    /**
     * Returns an observable localized text with the given interpolation parameters in current language.
     * @param key Localizaton key to replace with localized text
     * @param interpolateParams Values to interpolate
     */
    get(key, ...interpolateParams) {
        return this.configState
            .getAll$()
            .pipe(map(state => getLocalization(state, key, ...interpolateParams)));
    }
    getResource(resourceName) {
        return this.configState.getDeep(`localization.values.${resourceName}`);
    }
    getResource$(resourceName) {
        return this.configState.getDeep$(`localization.values.${resourceName}`);
    }
    /**
     * Returns localized text with the given interpolation parameters in current language.
     * @param key Localization key to replace with localized text
     * @param interpolateParams Values to intepolate.
     */
    instant(key, ...interpolateParams) {
        return getLocalization(this.configState.getAll(), key, ...interpolateParams);
    }
    localize(resourceName, key, defaultValue) {
        return this.configState.getOne$('localization').pipe(map(createLocalizer), map(localize => localize(resourceName, key, defaultValue)));
    }
    localizeSync(resourceName, key, defaultValue) {
        const localization = this.configState.getOne('localization');
        return createLocalizer(localization)(resourceName, key, defaultValue);
    }
    localizeWithFallback(resourceNames, keys, defaultValue) {
        return this.configState.getOne$('localization').pipe(map(createLocalizerWithFallback), map(localizeWithFallback => localizeWithFallback(resourceNames, keys, defaultValue)));
    }
    localizeWithFallbackSync(resourceNames, keys, defaultValue) {
        const localization = this.configState.getOne('localization');
        return createLocalizerWithFallback(localization)(resourceNames, keys, defaultValue);
    }
}
LocalizationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LocalizationService_Factory() { return new LocalizationService(i0.ɵɵinject(i1.SessionStateService), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(LocalizationService, 12), i0.ɵɵinject(i2.ConfigStateService), i0.ɵɵinject(i3.AbpApplicationConfigurationService)); }, token: LocalizationService, providedIn: "root" });
LocalizationService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
LocalizationService.ctorParameters = () => [
    { type: SessionStateService },
    { type: Injector },
    { type: LocalizationService, decorators: [{ type: Optional }, { type: SkipSelf }] },
    { type: ConfigStateService },
    { type: AbpApplicationConfigurationService }
];
function getLocalization(state, key, ...interpolateParams) {
    if (!key)
        key = '';
    let defaultValue;
    if (typeof key !== 'string') {
        defaultValue = key.defaultValue;
        key = key.key;
    }
    const keys = key.split('::');
    const warn = (message) => {
        if (isDevMode)
            console.warn(message);
    };
    if (keys.length < 2) {
        warn('The localization source separator (::) not found.');
        return defaultValue || key;
    }
    if (!state.localization)
        return defaultValue || keys[1];
    const sourceName = keys[0] || state.localization.defaultResourceName;
    const sourceKey = keys[1];
    if (sourceName === '_') {
        return defaultValue || sourceKey;
    }
    if (!sourceName) {
        warn('Localization source name is not specified and the defaultResourceName was not defined!');
        return defaultValue || sourceKey;
    }
    const source = state.localization.values[sourceName];
    if (!source) {
        warn('Could not find localization source: ' + sourceName);
        return defaultValue || sourceKey;
    }
    let localization = source[sourceKey];
    if (typeof localization === 'undefined') {
        return defaultValue || sourceKey;
    }
    interpolateParams = interpolateParams.filter(params => params != null);
    if (localization)
        localization = interpolate(localization, interpolateParams);
    if (typeof localization !== 'string')
        localization = '';
    return localization || defaultValue || key;
}
//# sourceMappingURL=data:application/json;base64,