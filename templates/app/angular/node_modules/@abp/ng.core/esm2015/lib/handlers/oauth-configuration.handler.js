import { Inject, Injectable } from '@angular/core';
import { OAuthService } from 'angular-oauth2-oidc';
import compare from 'just-compare';
import { filter, map } from 'rxjs/operators';
import { EnvironmentService } from '../services/environment.service';
import { CORE_OPTIONS } from '../tokens/options.token';
import * as i0 from "@angular/core";
import * as i1 from "angular-oauth2-oidc";
import * as i2 from "../services/environment.service";
import * as i3 from "../tokens/options.token";
export class OAuthConfigurationHandler {
    constructor(oAuthService, environmentService, options) {
        this.oAuthService = oAuthService;
        this.environmentService = environmentService;
        this.options = options;
        this.listenToSetEnvironment();
    }
    listenToSetEnvironment() {
        this.environmentService
            .createOnUpdateStream(state => state)
            .pipe(map(environment => environment.oAuthConfig), filter(config => !compare(config, this.options.environment.oAuthConfig)))
            .subscribe(config => {
            this.oAuthService.configure(config);
        });
    }
}
OAuthConfigurationHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function OAuthConfigurationHandler_Factory() { return new OAuthConfigurationHandler(i0.ɵɵinject(i1.OAuthService), i0.ɵɵinject(i2.EnvironmentService), i0.ɵɵinject(i3.CORE_OPTIONS)); }, token: OAuthConfigurationHandler, providedIn: "root" });
OAuthConfigurationHandler.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
OAuthConfigurationHandler.ctorParameters = () => [
    { type: OAuthService },
    { type: EnvironmentService },
    { type: undefined, decorators: [{ type: Inject, args: [CORE_OPTIONS,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2F1dGgtY29uZmlndXJhdGlvbi5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbGliL2hhbmRsZXJzL29hdXRoLWNvbmZpZ3VyYXRpb24uaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkQsT0FBTyxPQUFPLE1BQU0sY0FBYyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDckUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7OztBQUt2RCxNQUFNLE9BQU8seUJBQXlCO0lBQ3BDLFlBQ1UsWUFBMEIsRUFDMUIsa0JBQXNDLEVBQ2hCLE9BQWlCO1FBRnZDLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDaEIsWUFBTyxHQUFQLE9BQU8sQ0FBVTtRQUUvQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRU8sc0JBQXNCO1FBQzVCLElBQUksQ0FBQyxrQkFBa0I7YUFDcEIsb0JBQW9CLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7YUFDcEMsSUFBSSxDQUNILEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsRUFDM0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQ3pFO2FBQ0EsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7OztZQXRCRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQVRRLFlBQVk7WUFJWixrQkFBa0I7NENBVXRCLE1BQU0sU0FBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPQXV0aFNlcnZpY2UgfSBmcm9tICdhbmd1bGFyLW9hdXRoMi1vaWRjJztcbmltcG9ydCBjb21wYXJlIGZyb20gJ2p1c3QtY29tcGFyZSc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFCUCB9IGZyb20gJy4uL21vZGVscy9jb21tb24nO1xuaW1wb3J0IHsgRW52aXJvbm1lbnRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZW52aXJvbm1lbnQuc2VydmljZSc7XG5pbXBvcnQgeyBDT1JFX09QVElPTlMgfSBmcm9tICcuLi90b2tlbnMvb3B0aW9ucy50b2tlbic7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBPQXV0aENvbmZpZ3VyYXRpb25IYW5kbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBvQXV0aFNlcnZpY2U6IE9BdXRoU2VydmljZSxcbiAgICBwcml2YXRlIGVudmlyb25tZW50U2VydmljZTogRW52aXJvbm1lbnRTZXJ2aWNlLFxuICAgIEBJbmplY3QoQ09SRV9PUFRJT05TKSBwcml2YXRlIG9wdGlvbnM6IEFCUC5Sb290LFxuICApIHtcbiAgICB0aGlzLmxpc3RlblRvU2V0RW52aXJvbm1lbnQoKTtcbiAgfVxuXG4gIHByaXZhdGUgbGlzdGVuVG9TZXRFbnZpcm9ubWVudCgpIHtcbiAgICB0aGlzLmVudmlyb25tZW50U2VydmljZVxuICAgICAgLmNyZWF0ZU9uVXBkYXRlU3RyZWFtKHN0YXRlID0+IHN0YXRlKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChlbnZpcm9ubWVudCA9PiBlbnZpcm9ubWVudC5vQXV0aENvbmZpZyksXG4gICAgICAgIGZpbHRlcihjb25maWcgPT4gIWNvbXBhcmUoY29uZmlnLCB0aGlzLm9wdGlvbnMuZW52aXJvbm1lbnQub0F1dGhDb25maWcpKSxcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoY29uZmlnID0+IHtcbiAgICAgICAgdGhpcy5vQXV0aFNlcnZpY2UuY29uZmlndXJlKGNvbmZpZyk7XG4gICAgICB9KTtcbiAgfVxufVxuIl19