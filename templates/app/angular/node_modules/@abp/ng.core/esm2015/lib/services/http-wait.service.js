import { Injectable, Injector } from '@angular/core';
import { InternalStore } from '../utils/internal-store-utils';
import { getPathName } from '../utils/http-utils';
import { map, mapTo, switchMap, takeUntil, tap } from 'rxjs/operators';
import { of, Subject, timer } from 'rxjs';
import { LOADER_DELAY } from '../tokens/lodaer-delay.token';
import * as i0 from "@angular/core";
export class HttpWaitService {
    constructor(injector) {
        this.store = new InternalStore({
            requests: [],
            filteredRequests: [],
        });
        this.destroy$ = new Subject();
        this.delay = injector.get(LOADER_DELAY, 500);
    }
    getLoading() {
        return !!this.applyFilter(this.store.state.requests).length;
    }
    getLoading$() {
        return this.store
            .sliceState(({ requests }) => requests)
            .pipe(map(requests => !!this.applyFilter(requests).length), switchMap(condition => condition
            ? this.delay === 0
                ? of(true)
                : timer(this.delay).pipe(mapTo(true), takeUntil(this.destroy$))
            : of(false)), tap(() => this.destroy$.next()));
    }
    updateLoading$() {
        return this.store.sliceUpdate(({ requests }) => !!this.applyFilter(requests).length);
    }
    clearLoading() {
        this.store.patch({ requests: [] });
    }
    addRequest(request) {
        this.store.patch({ requests: [...this.store.state.requests, request] });
    }
    deleteRequest(request) {
        const requests = this.store.state.requests.filter(r => r !== request);
        this.store.patch({ requests });
    }
    addFilter(request) {
        const requests = Array.isArray(request) ? request : [request];
        const filteredRequests = [
            ...this.store.state.filteredRequests.filter(f => !requests.some(r => this.isSameRequest(f, r))),
            ...requests,
        ];
        this.store.patch({ filteredRequests });
    }
    removeFilter(request) {
        const requests = Array.isArray(request) ? request : [request];
        const filteredRequests = this.store.state.filteredRequests.filter(f => !requests.some(r => this.isSameRequest(f, r)));
        this.store.patch({ filteredRequests });
    }
    applyFilter(requests) {
        const { filteredRequests } = this.store.state;
        return requests.filter(({ method, url }) => !filteredRequests.find(filteredRequest => this.isSameRequest(filteredRequest, { method, endpoint: getPathName(url) })));
    }
    isSameRequest(filteredRequest, request) {
        const { method, endpoint } = filteredRequest;
        return endpoint === request.endpoint && method === request.method;
    }
}
HttpWaitService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpWaitService_Factory() { return new HttpWaitService(i0.ɵɵinject(i0.INJECTOR)); }, token: HttpWaitService, providedIn: "root" });
HttpWaitService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
HttpWaitService.ctorParameters = () => [
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,