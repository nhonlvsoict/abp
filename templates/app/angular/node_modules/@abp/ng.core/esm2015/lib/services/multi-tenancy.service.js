import { Injectable, Inject } from '@angular/core';
import { switchMap, map } from 'rxjs/operators';
import { RestService } from './rest.service';
import { AbpTenantService } from '../proxy/pages/abp/multi-tenancy';
import { ConfigStateService } from './config-state.service';
import { SessionStateService } from './session-state.service';
import { TENANT_KEY } from '../tokens/tenant-key.token';
import * as i0 from "@angular/core";
import * as i1 from "./rest.service";
import * as i2 from "./session-state.service";
import * as i3 from "../proxy/pages/abp/multi-tenancy/abp-tenant.service";
import * as i4 from "./config-state.service";
import * as i5 from "../tokens/tenant-key.token";
export class MultiTenancyService {
    constructor(restService, sessionState, tenantService, configStateService, tenantKey) {
        this.restService = restService;
        this.sessionState = sessionState;
        this.tenantService = tenantService;
        this.configStateService = configStateService;
        this.tenantKey = tenantKey;
        this.domainTenant = null;
        this.isTenantBoxVisible = true;
        this.apiName = 'abp';
        this.setTenantToState = (tenant) => {
            this.sessionState.setTenant({ id: tenant.tenantId, name: tenant.name, isAvailable: true });
            return this.configStateService.refreshAppState().pipe(map(_ => tenant));
        };
    }
    /**
     * @deprecated Use AbpTenantService.findTenantByName method instead. To be deleted in v5.0.
     */
    findTenantByName(name, headers) {
        return this.restService.request({
            url: `/api/abp/multi-tenancy/tenants/by-name/${name}`,
            method: 'GET',
            headers,
        }, { apiName: this.apiName });
    }
    /**
     * @deprecated Use AbpTenantService.findTenantById method instead. To be deleted in v5.0.
     */
    findTenantById(id, headers) {
        return this.restService.request({ url: `/api/abp/multi-tenancy/tenants/by-id/${id}`, method: 'GET', headers }, { apiName: this.apiName });
    }
    setTenantByName(tenantName) {
        return this.tenantService
            .findTenantByName(tenantName, { [this.tenantKey]: '' })
            .pipe(switchMap(this.setTenantToState));
    }
    setTenantById(tenantId) {
        return this.tenantService
            .findTenantById(tenantId, { [this.tenantKey]: '' })
            .pipe(switchMap(this.setTenantToState));
    }
}
MultiTenancyService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MultiTenancyService_Factory() { return new MultiTenancyService(i0.ɵɵinject(i1.RestService), i0.ɵɵinject(i2.SessionStateService), i0.ɵɵinject(i3.AbpTenantService), i0.ɵɵinject(i4.ConfigStateService), i0.ɵɵinject(i5.TENANT_KEY)); }, token: MultiTenancyService, providedIn: "root" });
MultiTenancyService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
MultiTenancyService.ctorParameters = () => [
    { type: RestService },
    { type: SessionStateService },
    { type: AbpTenantService },
    { type: ConfigStateService },
    { type: String, decorators: [{ type: Inject, args: [TENANT_KEY,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktdGVuYW5jeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbGliL3NlcnZpY2VzL211bHRpLXRlbmFuY3kuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBT2hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7Ozs7Ozs7QUFHeEQsTUFBTSxPQUFPLG1CQUFtQjtJQVk5QixZQUNVLFdBQXdCLEVBQ3hCLFlBQWlDLEVBQ2pDLGFBQStCLEVBQy9CLGtCQUFzQyxFQUNuQixTQUFpQjtRQUpwQyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixpQkFBWSxHQUFaLFlBQVksQ0FBcUI7UUFDakMsa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQy9CLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDbkIsY0FBUyxHQUFULFNBQVMsQ0FBUTtRQWhCOUMsaUJBQVksR0FBcUIsSUFBSSxDQUFDO1FBRXRDLHVCQUFrQixHQUFHLElBQUksQ0FBQztRQUUxQixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBRVIscUJBQWdCLEdBQUcsQ0FBQyxNQUEyQixFQUFFLEVBQUU7WUFDekQsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUMzRixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUM7SUFRQyxDQUFDO0lBRUo7O09BRUc7SUFDSCxnQkFBZ0IsQ0FBQyxJQUFZLEVBQUUsT0FBK0I7UUFDNUQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FDN0I7WUFDRSxHQUFHLEVBQUUsMENBQTBDLElBQUksRUFBRTtZQUNyRCxNQUFNLEVBQUUsS0FBSztZQUNiLE9BQU87U0FDUixFQUNELEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNILGNBQWMsQ0FBQyxFQUFVLEVBQUUsT0FBK0I7UUFDeEQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FDN0IsRUFBRSxHQUFHLEVBQUUsd0NBQXdDLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQzdFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFRCxlQUFlLENBQUMsVUFBa0I7UUFDaEMsT0FBTyxJQUFJLENBQUMsYUFBYTthQUN0QixnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQzthQUN0RCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELGFBQWEsQ0FBQyxRQUFnQjtRQUM1QixPQUFPLElBQUksQ0FBQyxhQUFhO2FBQ3RCLGNBQWMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQzthQUNsRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7OztZQXZERixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7WUFOekIsV0FBVztZQUdYLG1CQUFtQjtZQUZuQixnQkFBZ0I7WUFDaEIsa0JBQWtCO3lDQXNCdEIsTUFBTSxTQUFDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHN3aXRjaE1hcCwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQUJQIH0gZnJvbSAnLi4vbW9kZWxzL2NvbW1vbic7XG5pbXBvcnQge1xuICBGaW5kVGVuYW50UmVzdWx0RHRvLFxuICBDdXJyZW50VGVuYW50RHRvLFxufSBmcm9tICcuLi9wcm94eS92b2xvL2FicC9hc3AtbmV0LWNvcmUvbXZjL211bHRpLXRlbmFuY3kvbW9kZWxzJztcbmltcG9ydCB7IFJlc3RTZXJ2aWNlIH0gZnJvbSAnLi9yZXN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgQWJwVGVuYW50U2VydmljZSB9IGZyb20gJy4uL3Byb3h5L3BhZ2VzL2FicC9tdWx0aS10ZW5hbmN5JztcbmltcG9ydCB7IENvbmZpZ1N0YXRlU2VydmljZSB9IGZyb20gJy4vY29uZmlnLXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2Vzc2lvblN0YXRlU2VydmljZSB9IGZyb20gJy4vc2Vzc2lvbi1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IFRFTkFOVF9LRVkgfSBmcm9tICcuLi90b2tlbnMvdGVuYW50LWtleS50b2tlbic7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTXVsdGlUZW5hbmN5U2VydmljZSB7XG4gIGRvbWFpblRlbmFudDogQ3VycmVudFRlbmFudER0byA9IG51bGw7XG5cbiAgaXNUZW5hbnRCb3hWaXNpYmxlID0gdHJ1ZTtcblxuICBhcGlOYW1lID0gJ2FicCc7XG5cbiAgcHJpdmF0ZSBzZXRUZW5hbnRUb1N0YXRlID0gKHRlbmFudDogRmluZFRlbmFudFJlc3VsdER0bykgPT4ge1xuICAgIHRoaXMuc2Vzc2lvblN0YXRlLnNldFRlbmFudCh7IGlkOiB0ZW5hbnQudGVuYW50SWQsIG5hbWU6IHRlbmFudC5uYW1lLCBpc0F2YWlsYWJsZTogdHJ1ZSB9KTtcbiAgICByZXR1cm4gdGhpcy5jb25maWdTdGF0ZVNlcnZpY2UucmVmcmVzaEFwcFN0YXRlKCkucGlwZShtYXAoXyA9PiB0ZW5hbnQpKTtcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlc3RTZXJ2aWNlOiBSZXN0U2VydmljZSxcbiAgICBwcml2YXRlIHNlc3Npb25TdGF0ZTogU2Vzc2lvblN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIHRlbmFudFNlcnZpY2U6IEFicFRlbmFudFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjb25maWdTdGF0ZVNlcnZpY2U6IENvbmZpZ1N0YXRlU2VydmljZSxcbiAgICBASW5qZWN0KFRFTkFOVF9LRVkpIHB1YmxpYyB0ZW5hbnRLZXk6IHN0cmluZyxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgQWJwVGVuYW50U2VydmljZS5maW5kVGVuYW50QnlOYW1lIG1ldGhvZCBpbnN0ZWFkLiBUbyBiZSBkZWxldGVkIGluIHY1LjAuXG4gICAqL1xuICBmaW5kVGVuYW50QnlOYW1lKG5hbWU6IHN0cmluZywgaGVhZGVyczogQUJQLkRpY3Rpb25hcnk8c3RyaW5nPik6IE9ic2VydmFibGU8RmluZFRlbmFudFJlc3VsdER0bz4ge1xuICAgIHJldHVybiB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3QoXG4gICAgICB7XG4gICAgICAgIHVybDogYC9hcGkvYWJwL211bHRpLXRlbmFuY3kvdGVuYW50cy9ieS1uYW1lLyR7bmFtZX1gLFxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBoZWFkZXJzLFxuICAgICAgfSxcbiAgICAgIHsgYXBpTmFtZTogdGhpcy5hcGlOYW1lIH0sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgQWJwVGVuYW50U2VydmljZS5maW5kVGVuYW50QnlJZCBtZXRob2QgaW5zdGVhZC4gVG8gYmUgZGVsZXRlZCBpbiB2NS4wLlxuICAgKi9cbiAgZmluZFRlbmFudEJ5SWQoaWQ6IHN0cmluZywgaGVhZGVyczogQUJQLkRpY3Rpb25hcnk8c3RyaW5nPik6IE9ic2VydmFibGU8RmluZFRlbmFudFJlc3VsdER0bz4ge1xuICAgIHJldHVybiB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3QoXG4gICAgICB7IHVybDogYC9hcGkvYWJwL211bHRpLXRlbmFuY3kvdGVuYW50cy9ieS1pZC8ke2lkfWAsIG1ldGhvZDogJ0dFVCcsIGhlYWRlcnMgfSxcbiAgICAgIHsgYXBpTmFtZTogdGhpcy5hcGlOYW1lIH0sXG4gICAgKTtcbiAgfVxuXG4gIHNldFRlbmFudEJ5TmFtZSh0ZW5hbnROYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy50ZW5hbnRTZXJ2aWNlXG4gICAgICAuZmluZFRlbmFudEJ5TmFtZSh0ZW5hbnROYW1lLCB7IFt0aGlzLnRlbmFudEtleV06ICcnIH0pXG4gICAgICAucGlwZShzd2l0Y2hNYXAodGhpcy5zZXRUZW5hbnRUb1N0YXRlKSk7XG4gIH1cblxuICBzZXRUZW5hbnRCeUlkKHRlbmFudElkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy50ZW5hbnRTZXJ2aWNlXG4gICAgICAuZmluZFRlbmFudEJ5SWQodGVuYW50SWQsIHsgW3RoaXMudGVuYW50S2V5XTogJycgfSlcbiAgICAgIC5waXBlKHN3aXRjaE1hcCh0aGlzLnNldFRlbmFudFRvU3RhdGUpKTtcbiAgfVxufVxuIl19