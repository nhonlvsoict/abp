{"version":3,"file":"abp-ng.core-locale.js","sources":["../../../packages/core/locale/src/utils/register-locale.ts","../../../packages/core/locale/src/abp-ng.core-locale.ts"],"names":[],"mappings":";;;;AAUA,IAAI,SAAS,GAAG,EAAE,CAAC;AAEnB,SAKgB,cAAc,CAC5B,EACE,wBAAwB,GAAG,EAAE,EAC7B,cAAc,GAAG,0BAA0B,MACzC,EAAwB;AAC3B,IACD,OAAO,CAAC,MAAc;AAAQ,QAC5B,SAAS,mCAAQ,gBAAgB,GAAK,wBAAwB,CAAE,CAAC;AAErE,QAAI,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;AACtC,YAAK,OAAO;AACZ;AACK;AACK;AACK;AACK,YAAb,2BAA2B,SAAS,CAAC,MAAM,CAAC,IAAI,MAAM,KAAK,CAC5D;AACN,iBAAQ,IAAI,CAAC,OAAO,CAAC;AACrB,iBAAQ,KAAK,CAAC,KAAK;AACnB,gBAAS,cAAc,CAAC;AACxB,oBAAW,OAAO;AAClB,oBAAW,MAAM;AACjB,oBAAW,KAAK;AAChB,oBAAW,MAAM;AACjB,iBAAU,CAAC,CAAC;AACZ,aAAQ,CAAC,CAAC;AACV,SAAI,CAAC,CAAC;AACN,KAAE,CAAC;AACJ,CAAC;AAED,MAAM,YAAY,GAAG,EAAE,CAAC;AACvB,SAAe,eAAe,CAAC,IAAS,EAAE,QAAgB;AAC1D,IAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;AAChC,CAAC;AAED,SAAsB,0BAA0B,CAAC,EAAE,MAAM,EAAE,OAAO,EAA0B;AAC3F;AAC6B,QAD5B,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE;AAC3B,YAAG,OAAO,CAAC,EAAE,OAAO,EAAE,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC;AACnE,YAAG,OAAO;AACV,SAAE;AAEH,QAAE,IAAI,SAAS,EAAE;AAChB,YAAG,OAAO,CAAC,KAAK,CACX,mBAAmB,MAAM,uIAAuI,CACjK,CAAC;AACL,SAAE;AAEH,QAAE,OAAO,EAAE,CAAC;AACX,KAAA;AACE;AAAE;AClEL;AACC;AACC;AAED;AAAC;AAC0C","sourcesContent":["import { differentLocales } from '@abp/ng.core';\nimport { isDevMode } from '@angular/core';\n\nexport interface LocaleErrorHandlerData {\n  resolve: any;\n  reject: any;\n  error: any;\n  locale: string;\n}\n\nlet localeMap = {};\n\nexport interface RegisterLocaleData {\n  cultureNameLocaleFileMap?: Record<string, string>;\n  errorHandlerFn?: (data: LocaleErrorHandlerData) => any;\n}\n\nexport function registerLocale(\n  {\n    cultureNameLocaleFileMap = {},\n    errorHandlerFn = defaultLocalErrorHandlerFn,\n  } = {} as RegisterLocaleData,\n) {\n  return (locale: string): Promise<any> => {\n    localeMap = { ...differentLocales, ...cultureNameLocaleFileMap };\n\n    return new Promise((resolve, reject) => {\n      return import(\n        /* webpackMode: \"lazy-once\" */\n        /* webpackChunkName: \"locales\"*/\n        /* webpackInclude: /[/\\\\](ar|cs|en|en-GB|es|de|fi|fr|pt|tr|ru|hu|sl|zh-Hans|zh-Hant).js/ */\n        /* webpackExclude: /[/\\\\]global|extra/ */\n        `@angular/common/locales/${localeMap[locale] || locale}.js`\n      )\n        .then(resolve)\n        .catch(error => {\n          errorHandlerFn({\n            resolve,\n            reject,\n            error,\n            locale,\n          });\n        });\n    });\n  };\n}\n\nconst extraLocales = {};\nexport function storeLocaleData(data: any, localeId: string) {\n  extraLocales[localeId] = data;\n}\n\nexport async function defaultLocalErrorHandlerFn({ locale, resolve }: LocaleErrorHandlerData) {\n  if (extraLocales[locale]) {\n    resolve({ default: extraLocales[localeMap[locale] || locale] });\n    return;\n  }\n\n  if (isDevMode) {\n    console.error(\n      `Cannot find the ${locale} locale file. You can check how can add new culture at https://docs.abp.io/en/abp/latest/UI/Angular/Localization#adding-a-new-culture`,\n    );\n  }\n\n  resolve();\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}