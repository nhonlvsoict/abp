(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('@angular/common'), require('rxjs'), require('rxjs/operators'), require('@angular/common/http'), require('@ngxs/store'), require('just-compare'), require('snq'), require('@angular/forms'), require('angular-oauth2-oidc'), require('just-clone')) :
    typeof define === 'function' && define.amd ? define('@abp/ng.core', ['exports', '@angular/core', '@angular/router', '@angular/common', 'rxjs', 'rxjs/operators', '@angular/common/http', '@ngxs/store', 'just-compare', 'snq', '@angular/forms', 'angular-oauth2-oidc', 'just-clone'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.abp = global.abp || {}, global.abp.ng = global.abp.ng || {}, global.abp.ng.core = {}), global.ng.core, global.ng.router, global.ng.common, global.rxjs, global.rxjs.operators, global.ng.common.http, global.i4, global.compare, global.snq, global.ng.forms, global.i1$1, global.clone));
}(this, (function (exports, i0, i1, common, rxjs, operators, i2, i4, compare, snq, forms, i1$1, clone) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var compare__default = /*#__PURE__*/_interopDefaultLegacy(compare);
    var snq__default = /*#__PURE__*/_interopDefaultLegacy(snq);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var clone__default = /*#__PURE__*/_interopDefaultLegacy(clone);

    // Not an abstract class on purpose. Do not change!
    // tslint:disable-next-line: use-component-selector
    var AbstractNgModelComponent = /** @class */ (function () {
        function AbstractNgModelComponent(injector) {
            this.injector = injector;
            this.valueFn = function (value) { return value; };
            this.valueLimitFn = function (value) { return false; };
            // tslint:disable-next-line: deprecation
            this.cdRef = injector.get(i0.ChangeDetectorRef);
        }
        Object.defineProperty(AbstractNgModelComponent.prototype, "value", {
            get: function () {
                return this._value || this.defaultValue;
            },
            set: function (value) {
                value = this.valueFn(value, this._value);
                if (this.valueLimitFn(value, this._value) !== false || this.readonly)
                    return;
                this._value = value;
                this.notifyValueChange();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractNgModelComponent.prototype, "defaultValue", {
            get: function () {
                return this._value;
            },
            enumerable: false,
            configurable: true
        });
        AbstractNgModelComponent.prototype.notifyValueChange = function () {
            if (this.onChange) {
                this.onChange(this.value);
            }
        };
        AbstractNgModelComponent.prototype.writeValue = function (value) {
            var _this = this;
            this._value = this.valueLimitFn(value, this._value) || value;
            setTimeout(function () { return _this.cdRef.markForCheck(); }, 0);
        };
        AbstractNgModelComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        AbstractNgModelComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        AbstractNgModelComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        return AbstractNgModelComponent;
    }());
    AbstractNgModelComponent.decorators = [
        { type: i0.Component, args: [{ template: '' },] }
    ];
    AbstractNgModelComponent.ctorParameters = function () { return [
        { type: i0.Injector }
    ]; };
    AbstractNgModelComponent.propDecorators = {
        disabled: [{ type: i0.Input }],
        readonly: [{ type: i0.Input }],
        valueFn: [{ type: i0.Input }],
        valueLimitFn: [{ type: i0.Input }],
        value: [{ type: i0.Input }]
    };

    /**
     * @deprecated Use ConfigStateService. To be deleted in v5.0.
     */
    var GetAppConfiguration = /** @class */ (function () {
        function GetAppConfiguration() {
        }
        return GetAppConfiguration;
    }());
    GetAppConfiguration.type = '[Config] Get App Configuration';
    /**
     * @deprecated Use EnvironmentService instead. To be deleted in v5.0.
     */
    var SetEnvironment = /** @class */ (function () {
        function SetEnvironment(environment) {
            this.environment = environment;
        }
        return SetEnvironment;
    }());
    SetEnvironment.type = '[Config] Set Environment';
    /**
     * @deprecated Use EnvironmentService instead. To be deleted in v5.0.
     */
    var PatchConfigState = /** @class */ (function () {
        function PatchConfigState(state) {
            this.state = state;
        }
        return PatchConfigState;
    }());
    PatchConfigState.type = '[Config] Set State';

    var StartLoader = /** @class */ (function () {
        function StartLoader(payload) {
            this.payload = payload;
        }
        return StartLoader;
    }());
    StartLoader.type = '[Loader] Start';
    var StopLoader = /** @class */ (function () {
        function StopLoader(payload) {
            this.payload = payload;
        }
        return StopLoader;
    }());
    StopLoader.type = '[Loader] Stop';

    var GetProfile = /** @class */ (function () {
        function GetProfile() {
        }
        return GetProfile;
    }());
    GetProfile.type = '[Profile] Get';
    var UpdateProfile = /** @class */ (function () {
        function UpdateProfile(payload) {
            this.payload = payload;
        }
        return UpdateProfile;
    }());
    UpdateProfile.type = '[Profile] Update';
    var ChangePassword = /** @class */ (function () {
        function ChangePassword(payload) {
            this.payload = payload;
        }
        return ChangePassword;
    }());
    ChangePassword.type = '[Profile] Change Password';

    var RestOccurError = /** @class */ (function () {
        function RestOccurError(payload) {
            this.payload = payload;
        }
        return RestOccurError;
    }());
    RestOccurError.type = '[Rest] Error';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var CORE_OPTIONS = new i0.InjectionToken('CORE_OPTIONS');
    function coreOptionsFactory(_a) {
        var options = __rest(_a, []);
        return Object.assign({}, options);
    }

    function noop() {
        // tslint:disable-next-line: only-arrow-functions
        var fn = function () { };
        return fn;
    }
    function isUndefinedOrEmptyString(value) {
        return value === undefined || value === '';
    }
    function isNullOrUndefined(obj) {
        return obj === null || obj === undefined;
    }
    function exists(obj) {
        return !isNullOrUndefined(obj);
    }
    function isObject(obj) {
        return obj instanceof Object;
    }
    function isArray(obj) {
        return Array.isArray(obj);
    }
    function isObjectAndNotArray(obj) {
        return isObject(obj) && !isArray(obj);
    }
    function isNode(obj) {
        return obj instanceof Node;
    }
    function isObjectAndNotArrayNotNode(obj) {
        return isObjectAndNotArray(obj) && !isNode(obj);
    }

    function deepMerge(target, source) {
        if (isObjectAndNotArrayNotNode(target) && isObjectAndNotArrayNotNode(source)) {
            return deepMergeRecursively(target, source);
        }
        else if (isNullOrUndefined(target) && isNullOrUndefined(source)) {
            return {};
        }
        else {
            return exists(source) ? source : target;
        }
    }
    function deepMergeRecursively(target, source) {
        var shouldNotRecurse = isNullOrUndefined(target) ||
            isNullOrUndefined(source) || // at least one not defined
            isArray(target) ||
            isArray(source) || // at least one array
            !isObject(target) ||
            !isObject(source) || // at least one not an object
            isNode(target) ||
            isNode(source); // at least one node
        /**
         * if we will not recurse any further,
         * we will prioritize source if it is a defined value.
         */
        if (shouldNotRecurse) {
            return exists(source) ? source : target;
        }
        var keysOfTarget = Object.keys(target);
        var keysOfSource = Object.keys(source);
        var uniqueKeys = new Set(keysOfTarget.concat(keysOfSource));
        return __spread(uniqueKeys).reduce(function (retVal, key) {
            retVal[key] = deepMergeRecursively(target[key], source[key]);
            return retVal;
        }, {});
    }

    var InternalStore = /** @class */ (function () {
        function InternalStore(initialState) {
            var _this = this;
            this.initialState = initialState;
            this.state$ = new rxjs.BehaviorSubject(this.initialState);
            this.update$ = new rxjs.Subject();
            this.sliceState = function (selector, compareFn) {
                if (compareFn === void 0) { compareFn = compare__default['default']; }
                return _this.state$.pipe(operators.map(selector), operators.distinctUntilChanged(compareFn));
            };
            this.sliceUpdate = function (selector, filterFn) {
                if (filterFn === void 0) { filterFn = function (x) { return x !== undefined; }; }
                return _this.update$.pipe(operators.map(selector), operators.filter(filterFn));
            };
        }
        Object.defineProperty(InternalStore.prototype, "state", {
            get: function () {
                return this.state$.value;
            },
            enumerable: false,
            configurable: true
        });
        InternalStore.prototype.patch = function (state) {
            var patchedState = state;
            if (typeof state === 'object' && !Array.isArray(state)) {
                patchedState = Object.assign(Object.assign({}, this.state), state);
            }
            this.state$.next(patchedState);
            this.update$.next(patchedState);
        };
        InternalStore.prototype.deepPatch = function (state) {
            this.state$.next(deepMerge(this.state, state));
            this.update$.next(state);
        };
        InternalStore.prototype.set = function (state) {
            this.state$.next(state);
            this.update$.next(state);
        };
        InternalStore.prototype.reset = function () {
            this.set(this.initialState);
        };
        return InternalStore;
    }());

    var mapToApiUrl = function (key) { return function (apis) { return (apis[key] || apis.default).url || apis.default.url; }; };
    var ɵ0$1 = mapToApiUrl;
    var EnvironmentService = /** @class */ (function () {
        function EnvironmentService() {
            this.store = new InternalStore({});
        }
        Object.defineProperty(EnvironmentService.prototype, "createOnUpdateStream", {
            get: function () {
                return this.store.sliceUpdate;
            },
            enumerable: false,
            configurable: true
        });
        EnvironmentService.prototype.getEnvironment$ = function () {
            return this.store.sliceState(function (state) { return state; });
        };
        EnvironmentService.prototype.getEnvironment = function () {
            return this.store.state;
        };
        EnvironmentService.prototype.getApiUrl = function (key) {
            return mapToApiUrl(key)(this.store.state.apis);
        };
        EnvironmentService.prototype.getApiUrl$ = function (key) {
            return this.store.sliceState(function (state) { return state.apis; }).pipe(operators.map(mapToApiUrl(key)));
        };
        EnvironmentService.prototype.setState = function (environment) {
            this.store.set(environment);
        };
        return EnvironmentService;
    }());
    EnvironmentService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function EnvironmentService_Factory() { return new EnvironmentService(); }, token: EnvironmentService, providedIn: "root" });
    EnvironmentService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    var RestService = /** @class */ (function () {
        function RestService(options, http, environment, store) {
            this.options = options;
            this.http = http;
            this.environment = environment;
            this.store = store;
        }
        RestService.prototype.getApiFromStore = function (apiName) {
            return this.environment.getApiUrl(apiName);
        };
        RestService.prototype.handleError = function (err) {
            this.store.dispatch(new RestOccurError(err));
            return rxjs.throwError(err);
        };
        // TODO: Deprecate service or improve interface in v5.0
        RestService.prototype.request = function (request, config, api) {
            var _this = this;
            config = config || {};
            api = api || this.getApiFromStore(config.apiName);
            var method = request.method, params = request.params, options = __rest(request, ["method", "params"]);
            var _a = config.observe /* Body */, observe = _a === void 0 ? "body" : _a /* Body */, skipHandleError = config.skipHandleError;
            return this.http
                .request(method, api + request.url, Object.assign(Object.assign({ observe: observe }, (params && {
                params: Object.keys(params).reduce(function (acc, key) {
                    var value = params[key];
                    if (isUndefinedOrEmptyString(value))
                        return acc;
                    if (value === null && !_this.options.sendNullsAsQueryParam)
                        return acc;
                    acc[key] = value;
                    return acc;
                }, {}),
            })), options))
                .pipe(operators.catchError(function (err) { return (skipHandleError ? rxjs.throwError(err) : _this.handleError(err)); }));
        };
        return RestService;
    }());
    RestService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function RestService_Factory() { return new RestService(i0__namespace.ɵɵinject(CORE_OPTIONS), i0__namespace.ɵɵinject(i2__namespace.HttpClient), i0__namespace.ɵɵinject(EnvironmentService), i0__namespace.ɵɵinject(i4__namespace.Store)); }, token: RestService, providedIn: "root" });
    RestService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    RestService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [CORE_OPTIONS,] }] },
        { type: i2.HttpClient },
        { type: EnvironmentService },
        { type: i4.Store }
    ]; };

    var AbpApplicationConfigurationService = /** @class */ (function () {
        function AbpApplicationConfigurationService(restService) {
            this.restService = restService;
            this.apiName = 'abp';
        }
        AbpApplicationConfigurationService.prototype.get = function () {
            return this.restService.request({
                method: 'GET',
                url: '/api/abp/application-configuration',
            }, { apiName: this.apiName });
        };
        return AbpApplicationConfigurationService;
    }());
    AbpApplicationConfigurationService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function AbpApplicationConfigurationService_Factory() { return new AbpApplicationConfigurationService(i0__namespace.ɵɵinject(RestService)); }, token: AbpApplicationConfigurationService, providedIn: "root" });
    AbpApplicationConfigurationService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AbpApplicationConfigurationService.ctorParameters = function () { return [
        { type: RestService }
    ]; };

    // This will not be necessary when only Angukar 9.1+ is supported
    function getLocaleDirection(locale) {
        return /^(ar(-[A-Z]{2})?|ckb(-IR)?|fa(-AF)?|he|ks|lrc(-IQ)?|mzn|pa-Arab|ps(-PK)?|sd|ug|ur(-IN)?|uz-Arab|yi)$/.test(locale)
            ? 'rtl'
            : 'ltr';
    }
    function createLocalizer(localization) {
        return function (resourceName, key, defaultValue) {
            if (resourceName === '_')
                return key;
            var resource = snq__default['default'](function () { return localization.values[resourceName]; });
            if (!resource)
                return defaultValue;
            return resource[key] || defaultValue;
        };
    }
    function createLocalizerWithFallback(localization) {
        var findLocalization = createLocalizationFinder(localization);
        return function (resourceNames, keys, defaultValue) {
            var localized = findLocalization(resourceNames, keys).localized;
            return localized || defaultValue;
        };
    }
    function createLocalizationPipeKeyGenerator(localization) {
        var findLocalization = createLocalizationFinder(localization);
        return function (resourceNames, keys, defaultKey) {
            var _a = findLocalization(resourceNames, keys), resourceName = _a.resourceName, key = _a.key;
            return !resourceName ? defaultKey : resourceName === '_' ? key : resourceName + "::" + key;
        };
    }
    function createLocalizationFinder(localization) {
        var localize = createLocalizer(localization);
        return function (resourceNames, keys) {
            resourceNames = resourceNames.concat(localization.defaultResourceName).filter(Boolean);
            var resourceCount = resourceNames.length;
            var keyCount = keys.length;
            for (var i = 0; i < resourceCount; i++) {
                var resourceName = resourceNames[i];
                for (var j = 0; j < keyCount; j++) {
                    var key = keys[j];
                    var localized = localize(resourceName, key, null);
                    if (localized)
                        return { resourceName: resourceName, key: key, localized: localized };
                }
            }
            return { resourceName: undefined, key: undefined, localized: undefined };
        };
    }

    function createTokenParser(format) {
        return function (str) {
            var tokens = [];
            var regex = format.replace(/\./g, '\\.').replace(/\{\s?([0-9a-zA-Z]+)\s?\}/g, function (_, token) {
                tokens.push(token);
                return '(.+)';
            });
            var matches = (str.match(regex) || []).slice(1);
            return matches.reduce(function (acc, v, i) {
                var key = tokens[i];
                acc[key] = __spread((acc[key] || []), [v]).filter(Boolean);
                return acc;
            }, {});
        };
    }
    function interpolate(text, params) {
        return text
            .replace(/(['"]?\{\s*(\d+)\s*\}['"]?)/g, function (_, match, digit) { var _a; return (_a = params[digit]) !== null && _a !== void 0 ? _a : match; })
            .replace(/\s+/g, ' ');
    }

    var ConfigStateService = /** @class */ (function () {
        function ConfigStateService(abpConfigService) {
            this.abpConfigService = abpConfigService;
            this.store = new InternalStore({});
        }
        Object.defineProperty(ConfigStateService.prototype, "createOnUpdateStream", {
            get: function () {
                return this.store.sliceUpdate;
            },
            enumerable: false,
            configurable: true
        });
        ConfigStateService.prototype.setState = function (state) {
            this.store.set(state);
        };
        ConfigStateService.prototype.refreshAppState = function () {
            var _this = this;
            return this.abpConfigService.get().pipe(operators.tap(function (res) { return _this.setState(res); }));
        };
        ConfigStateService.prototype.getOne$ = function (key) {
            return this.store.sliceState(function (state) { return state[key]; });
        };
        ConfigStateService.prototype.getOne = function (key) {
            return this.store.state[key];
        };
        ConfigStateService.prototype.getAll$ = function () {
            return this.store.sliceState(function (state) { return state; });
        };
        ConfigStateService.prototype.getAll = function () {
            return this.store.state;
        };
        ConfigStateService.prototype.getDeep$ = function (keys) {
            keys = splitKeys(keys);
            return this.store
                .sliceState(function (state) { return state; })
                .pipe(operators.map(function (state) {
                return keys.reduce(function (acc, val) {
                    if (acc) {
                        return acc[val];
                    }
                    return undefined;
                }, state);
            }));
        };
        ConfigStateService.prototype.getDeep = function (keys) {
            keys = splitKeys(keys);
            return keys.reduce(function (acc, val) {
                if (acc) {
                    return acc[val];
                }
                return undefined;
            }, this.store.state);
        };
        ConfigStateService.prototype.getFeature = function (key) {
            var _a, _b;
            return (_b = (_a = this.store.state.features) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b[key];
        };
        ConfigStateService.prototype.getFeature$ = function (key) {
            return this.store.sliceState(function (state) { var _a, _b; return (_b = (_a = state.features) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b[key]; });
        };
        ConfigStateService.prototype.getFeatures = function (keys) {
            var features = this.store.state.features;
            if (!features)
                return;
            return keys.reduce(function (acc, key) {
                var _c;
                return (Object.assign(Object.assign({}, acc), (_c = {}, _c[key] = features.values[key], _c)));
            }, {});
        };
        ConfigStateService.prototype.getFeatures$ = function (keys) {
            return this.store.sliceState(function (_c) {
                var features = _c.features;
                if (!(features === null || features === void 0 ? void 0 : features.values))
                    return;
                return keys.reduce(function (acc, key) {
                    var _c;
                    return (Object.assign(Object.assign({}, acc), (_c = {}, _c[key] = features.values[key], _c)));
                }, {});
            });
        };
        ConfigStateService.prototype.getSetting = function (key) {
            var _a, _b;
            return (_b = (_a = this.store.state.setting) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b[key];
        };
        ConfigStateService.prototype.getSetting$ = function (key) {
            return this.store.sliceState(function (state) { var _a, _b; return (_b = (_a = state.setting) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b[key]; });
        };
        ConfigStateService.prototype.getSettings = function (keyword) {
            var _a;
            var settings = ((_a = this.store.state.setting) === null || _a === void 0 ? void 0 : _a.values) || {};
            if (!keyword)
                return settings;
            var keysFound = Object.keys(settings).filter(function (key) { return key.indexOf(keyword) > -1; });
            return keysFound.reduce(function (acc, key) {
                acc[key] = settings[key];
                return acc;
            }, {});
        };
        ConfigStateService.prototype.getSettings$ = function (keyword) {
            return this.store
                .sliceState(function (state) { var _a; return (_a = state.setting) === null || _a === void 0 ? void 0 : _a.values; })
                .pipe(operators.map(function (settings) {
                if (settings === void 0) { settings = {}; }
                if (!keyword)
                    return settings;
                var keysFound = Object.keys(settings).filter(function (key) { return key.indexOf(keyword) > -1; });
                return keysFound.reduce(function (acc, key) {
                    acc[key] = settings[key];
                    return acc;
                }, {});
            }));
        };
        return ConfigStateService;
    }());
    ConfigStateService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ConfigStateService_Factory() { return new ConfigStateService(i0__namespace.ɵɵinject(AbpApplicationConfigurationService)); }, token: ConfigStateService, providedIn: "root" });
    ConfigStateService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ConfigStateService.ctorParameters = function () { return [
        { type: AbpApplicationConfigurationService }
    ]; };
    function splitKeys(keys) {
        if (typeof keys === 'string') {
            keys = keys.split('.');
        }
        if (!Array.isArray(keys)) {
            throw new Error('The argument must be a dot string or an string array.');
        }
        return keys;
    }

    var SessionStateService = /** @class */ (function () {
        function SessionStateService(configState) {
            var _this = this;
            this.configState = configState;
            this.store = new InternalStore({});
            this.updateLocalStorage = function () {
                localStorage.setItem('abpSession', JSON.stringify(_this.store.state));
            };
            this.init();
            this.setInitialLanguage();
        }
        SessionStateService.prototype.init = function () {
            var session = localStorage.getItem('abpSession');
            if (session) {
                this.store.set(JSON.parse(session));
            }
            this.store.sliceUpdate(function (state) { return state; }).subscribe(this.updateLocalStorage);
        };
        SessionStateService.prototype.setInitialLanguage = function () {
            var _this = this;
            if (this.getLanguage())
                return;
            this.configState
                .getDeep$('localization.currentCulture.cultureName')
                .pipe(operators.filter(function (cultureName) { return !!cultureName; }), operators.take(1))
                .subscribe(function (lang) {
                if (lang.includes(';')) {
                    lang = lang.split(';')[0];
                }
                _this.setLanguage(lang);
            });
        };
        SessionStateService.prototype.onLanguageChange$ = function () {
            return this.store.sliceUpdate(function (state) { return state.language; });
        };
        SessionStateService.prototype.onTenantChange$ = function () {
            return this.store.sliceUpdate(function (state) { return state.tenant; });
        };
        SessionStateService.prototype.getLanguage = function () {
            return this.store.state.language;
        };
        SessionStateService.prototype.getLanguage$ = function () {
            return this.store.sliceState(function (state) { return state.language; });
        };
        SessionStateService.prototype.getTenant = function () {
            return this.store.state.tenant;
        };
        SessionStateService.prototype.getTenant$ = function () {
            return this.store.sliceState(function (state) { return state.tenant; });
        };
        SessionStateService.prototype.setTenant = function (tenant) {
            if (compare__default['default'](tenant, this.store.state.tenant))
                return;
            this.store.set(Object.assign(Object.assign({}, this.store.state), { tenant: tenant }));
        };
        SessionStateService.prototype.setLanguage = function (language) {
            if (language === this.store.state.language)
                return;
            this.store.patch({ language: language });
            document.documentElement.setAttribute('lang', language);
        };
        return SessionStateService;
    }());
    SessionStateService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function SessionStateService_Factory() { return new SessionStateService(i0__namespace.ɵɵinject(ConfigStateService)); }, token: SessionStateService, providedIn: "root" });
    SessionStateService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    SessionStateService.ctorParameters = function () { return [
        { type: ConfigStateService }
    ]; };

    var LocalizationService = /** @class */ (function () {
        function LocalizationService(sessionState, injector, otherInstance, configState, appConfigService) {
            this.sessionState = sessionState;
            this.injector = injector;
            this.configState = configState;
            this.appConfigService = appConfigService;
            this.latestLang = this.sessionState.getLanguage();
            this._languageChange$ = new rxjs.Subject();
            if (otherInstance)
                throw new Error('LocalizationService should have only one instance.');
            this.listenToSetLanguage();
        }
        Object.defineProperty(LocalizationService.prototype, "currentLang", {
            /**
             * Returns currently selected language
             */
            get: function () {
                return this.latestLang || this.sessionState.getLanguage();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LocalizationService.prototype, "languageChange$", {
            get: function () {
                return this._languageChange$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        LocalizationService.prototype.listenToSetLanguage = function () {
            var _this = this;
            this.sessionState
                .onLanguageChange$()
                .pipe(operators.filter(function (lang) { return _this.configState.getDeep('localization.currentCulture.cultureName') !== lang; }), operators.switchMap(function (lang) { return _this.appConfigService
                .get()
                .pipe(operators.tap(function (res) { return _this.configState.setState(res); }))
                .pipe(operators.mapTo(lang)); }), operators.switchMap(function (lang) { return rxjs.from(_this.registerLocale(lang).then(function () { return lang; })); }))
                .subscribe(function (lang) { return _this._languageChange$.next(lang); });
        };
        LocalizationService.prototype.registerLocale = function (locale) {
            var _this = this;
            var registerLocaleFn = this.injector.get(CORE_OPTIONS).registerLocaleFn;
            return registerLocaleFn(locale).then(function (module) {
                if (module === null || module === void 0 ? void 0 : module.default)
                    common.registerLocaleData(module.default);
                _this.latestLang = locale;
            });
        };
        /**
         * Returns an observable localized text with the given interpolation parameters in current language.
         * @param key Localizaton key to replace with localized text
         * @param interpolateParams Values to interpolate
         */
        LocalizationService.prototype.get = function (key) {
            var interpolateParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                interpolateParams[_i - 1] = arguments[_i];
            }
            return this.configState
                .getAll$()
                .pipe(operators.map(function (state) { return getLocalization.apply(void 0, __spread([state, key], interpolateParams)); }));
        };
        LocalizationService.prototype.getResource = function (resourceName) {
            return this.configState.getDeep("localization.values." + resourceName);
        };
        LocalizationService.prototype.getResource$ = function (resourceName) {
            return this.configState.getDeep$("localization.values." + resourceName);
        };
        /**
         * Returns localized text with the given interpolation parameters in current language.
         * @param key Localization key to replace with localized text
         * @param interpolateParams Values to intepolate.
         */
        LocalizationService.prototype.instant = function (key) {
            var interpolateParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                interpolateParams[_i - 1] = arguments[_i];
            }
            return getLocalization.apply(void 0, __spread([this.configState.getAll(), key], interpolateParams));
        };
        LocalizationService.prototype.localize = function (resourceName, key, defaultValue) {
            return this.configState.getOne$('localization').pipe(operators.map(createLocalizer), operators.map(function (localize) { return localize(resourceName, key, defaultValue); }));
        };
        LocalizationService.prototype.localizeSync = function (resourceName, key, defaultValue) {
            var localization = this.configState.getOne('localization');
            return createLocalizer(localization)(resourceName, key, defaultValue);
        };
        LocalizationService.prototype.localizeWithFallback = function (resourceNames, keys, defaultValue) {
            return this.configState.getOne$('localization').pipe(operators.map(createLocalizerWithFallback), operators.map(function (localizeWithFallback) { return localizeWithFallback(resourceNames, keys, defaultValue); }));
        };
        LocalizationService.prototype.localizeWithFallbackSync = function (resourceNames, keys, defaultValue) {
            var localization = this.configState.getOne('localization');
            return createLocalizerWithFallback(localization)(resourceNames, keys, defaultValue);
        };
        return LocalizationService;
    }());
    LocalizationService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function LocalizationService_Factory() { return new LocalizationService(i0__namespace.ɵɵinject(SessionStateService), i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(LocalizationService, 12), i0__namespace.ɵɵinject(ConfigStateService), i0__namespace.ɵɵinject(AbpApplicationConfigurationService)); }, token: LocalizationService, providedIn: "root" });
    LocalizationService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    LocalizationService.ctorParameters = function () { return [
        { type: SessionStateService },
        { type: i0.Injector },
        { type: LocalizationService, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] },
        { type: ConfigStateService },
        { type: AbpApplicationConfigurationService }
    ]; };
    function getLocalization(state, key) {
        var interpolateParams = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            interpolateParams[_i - 2] = arguments[_i];
        }
        if (!key)
            key = '';
        var defaultValue;
        if (typeof key !== 'string') {
            defaultValue = key.defaultValue;
            key = key.key;
        }
        var keys = key.split('::');
        var warn = function (message) {
            if (i0.isDevMode)
                console.warn(message);
        };
        if (keys.length < 2) {
            warn('The localization source separator (::) not found.');
            return defaultValue || key;
        }
        if (!state.localization)
            return defaultValue || keys[1];
        var sourceName = keys[0] || state.localization.defaultResourceName;
        var sourceKey = keys[1];
        if (sourceName === '_') {
            return defaultValue || sourceKey;
        }
        if (!sourceName) {
            warn('Localization source name is not specified and the defaultResourceName was not defined!');
            return defaultValue || sourceKey;
        }
        var source = state.localization.values[sourceName];
        if (!source) {
            warn('Could not find localization source: ' + sourceName);
            return defaultValue || sourceKey;
        }
        var localization = source[sourceKey];
        if (typeof localization === 'undefined') {
            return defaultValue || sourceKey;
        }
        interpolateParams = interpolateParams.filter(function (params) { return params != null; });
        if (localization)
            localization = interpolate(localization, interpolateParams);
        if (typeof localization !== 'string')
            localization = '';
        return localization || defaultValue || key;
    }

    function findRoute(routesService, path) {
        var node = routesService.find(function (route) { return route.path === path; });
        return node || path === '/'
            ? node
            : findRoute(routesService, path.split('/').slice(0, -1).join('/') || '/');
    }
    function getRoutePath(router, url) {
        if (url === void 0) { url = router.url; }
        var emptyGroup = { segments: [] };
        var primaryGroup = router.parseUrl(url).root.children[i1.PRIMARY_OUTLET];
        return '/' + (primaryGroup || emptyGroup).segments.map(function (_a) {
            var path = _a.path;
            return path;
        }).join('/');
    }
    function reloadRoute(router, ngZone) {
        var _this = this;
        var shouldReuseRoute = router.routeReuseStrategy.shouldReuseRoute;
        var setRouteReuse = function (reuse) {
            router.routeReuseStrategy.shouldReuseRoute = reuse;
        };
        setRouteReuse(function () { return false; });
        router.navigated = false;
        ngZone.run(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, router.navigateByUrl(router.url).catch(noop)];
                    case 1:
                        _a.sent();
                        setRouteReuse(shouldReuseRoute);
                        return [2 /*return*/];
                }
            });
        }); });
    }

    var ReplaceableComponentsService = /** @class */ (function () {
        function ReplaceableComponentsService(ngZone, router) {
            this.ngZone = ngZone;
            this.router = router;
            this.store = new InternalStore([]);
        }
        Object.defineProperty(ReplaceableComponentsService.prototype, "replaceableComponents$", {
            get: function () {
                return this.store.sliceState(function (state) { return state; });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReplaceableComponentsService.prototype, "replaceableComponents", {
            get: function () {
                return this.store.state;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReplaceableComponentsService.prototype, "onUpdate$", {
            get: function () {
                return this.store.sliceUpdate(function (state) { return state; });
            },
            enumerable: false,
            configurable: true
        });
        ReplaceableComponentsService.prototype.add = function (replaceableComponent, reload) {
            var replaceableComponents = __spread(this.store.state);
            var index = replaceableComponents.findIndex(function (component) { return component.key === replaceableComponent.key; });
            if (index > -1) {
                replaceableComponents[index] = replaceableComponent;
            }
            else {
                replaceableComponents.push(replaceableComponent);
            }
            this.store.set(replaceableComponents);
            if (reload)
                reloadRoute(this.router, this.ngZone);
        };
        ReplaceableComponentsService.prototype.get = function (replaceableComponentKey) {
            return this.replaceableComponents.find(function (component) { return component.key === replaceableComponentKey; });
        };
        ReplaceableComponentsService.prototype.get$ = function (replaceableComponentKey) {
            return this.replaceableComponents$.pipe(operators.map(function (components) { return components.find(function (component) { return component.key === replaceableComponentKey; }); }));
        };
        return ReplaceableComponentsService;
    }());
    ReplaceableComponentsService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ReplaceableComponentsService_Factory() { return new ReplaceableComponentsService(i0__namespace.ɵɵinject(i0__namespace.NgZone), i0__namespace.ɵɵinject(i1__namespace.Router)); }, token: ReplaceableComponentsService, providedIn: "root" });
    ReplaceableComponentsService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ReplaceableComponentsService.ctorParameters = function () { return [
        { type: i0.NgZone },
        { type: i1.Router }
    ]; };

    var NavigationEvent = {
        Cancel: i1.NavigationCancel,
        End: i1.NavigationEnd,
        Error: i1.NavigationError,
        Start: i1.NavigationStart,
    };
    var RouterEvents = /** @class */ (function () {
        function RouterEvents(router) {
            this.router = router;
        }
        RouterEvents.prototype.getEvents = function () {
            var eventTypes = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                eventTypes[_i] = arguments[_i];
            }
            var filterRouterEvents = function (event) { return eventTypes.some(function (type) { return event instanceof type; }); };
            return this.router.events.pipe(operators.filter(filterRouterEvents));
        };
        RouterEvents.prototype.getNavigationEvents = function () {
            var navigationEventKeys = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                navigationEventKeys[_i] = arguments[_i];
            }
            var filterNavigationEvents = function (event) { return navigationEventKeys.some(function (key) { return event instanceof NavigationEvent[key]; }); };
            return this.router.events.pipe(operators.filter(filterNavigationEvents));
        };
        RouterEvents.prototype.getAllEvents = function () {
            return this.router.events;
        };
        RouterEvents.prototype.getAllNavigationEvents = function () {
            var keys = Object.keys(NavigationEvent);
            return this.getNavigationEvents.apply(this, __spread(keys));
        };
        return RouterEvents;
    }());
    RouterEvents.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function RouterEvents_Factory() { return new RouterEvents(i0__namespace.ɵɵinject(i1__namespace.Router)); }, token: RouterEvents, providedIn: "root" });
    RouterEvents.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    RouterEvents.ctorParameters = function () { return [
        { type: i1.Router }
    ]; };

    function pushValueTo(array) {
        return function (element) {
            array.push(element);
            return array;
        };
    }

    var BaseTreeNode = /** @class */ (function () {
        function BaseTreeNode(props) {
            this.children = [];
            this.isLeaf = true;
            Object.assign(this, props);
        }
        BaseTreeNode.create = function (props) {
            return new BaseTreeNode(props);
        };
        return BaseTreeNode;
    }());
    function createTreeFromList(list, keySelector, parentKeySelector, valueMapper) {
        var map = createMapFromList(list, keySelector, valueMapper);
        var tree = [];
        list.forEach(function (row) {
            var id = keySelector(row);
            var parentId = parentKeySelector(row);
            var node = map.get(id);
            if (!node)
                return;
            if (parentId) {
                var parent = map.get(parentId);
                if (!parent)
                    return;
                parent.children.push(node);
                parent.isLeaf = false;
                node.parent = parent;
            }
            else {
                tree.push(node);
            }
        });
        return tree;
    }
    function createMapFromList(list, keySelector, valueMapper) {
        var map = new Map();
        list.forEach(function (row) { return map.set(keySelector(row), valueMapper(row)); });
        return map;
    }
    function createTreeNodeFilterCreator(key, mapperFn) {
        return function (search) {
            var regex = new RegExp('.*' + search + '.*', 'i');
            return function collectNodes(nodes, matches) {
                var e_1, _a;
                if (matches === void 0) { matches = []; }
                try {
                    for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
                        var node = nodes_1_1.value;
                        if (regex.test(mapperFn(node[key])))
                            matches.push(node);
                        if (node.children.length)
                            collectNodes(node.children, matches);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return matches;
            };
        };
    }

    var PermissionService = /** @class */ (function () {
        function PermissionService(configState) {
            this.configState = configState;
        }
        PermissionService.prototype.getGrantedPolicy$ = function (key) {
            var _this = this;
            return this.getStream().pipe(operators.map(function (grantedPolicies) { return _this.isPolicyGranted(key, grantedPolicies); }));
        };
        PermissionService.prototype.getGrantedPolicy = function (key) {
            var policies = this.getSnapshot();
            return this.isPolicyGranted(key, policies);
        };
        PermissionService.prototype.filterItemsByPolicy = function (items) {
            var _this = this;
            var policies = this.getSnapshot();
            return items.filter(function (item) { return !item.requiredPolicy || _this.isPolicyGranted(item.requiredPolicy, policies); });
        };
        PermissionService.prototype.filterItemsByPolicy$ = function (items) {
            var _this = this;
            return this.getStream().pipe(operators.map(function (policies) { return items.filter(function (item) { return !item.requiredPolicy || _this.isPolicyGranted(item.requiredPolicy, policies); }); }));
        };
        PermissionService.prototype.isPolicyGranted = function (key, grantedPolicies) {
            var _this = this;
            if (!key)
                return true;
            var orRegexp = /\|\|/g;
            var andRegexp = /&&/g;
            // TODO: Allow combination of ANDs & ORs
            if (orRegexp.test(key)) {
                var keys = key.split('||').filter(Boolean);
                if (keys.length < 2)
                    return false;
                return keys.some(function (k) { return _this.getPolicy(k.trim(), grantedPolicies); });
            }
            else if (andRegexp.test(key)) {
                var keys = key.split('&&').filter(Boolean);
                if (keys.length < 2)
                    return false;
                return keys.every(function (k) { return _this.getPolicy(k.trim(), grantedPolicies); });
            }
            return this.getPolicy(key, grantedPolicies);
        };
        PermissionService.prototype.getStream = function () {
            return this.configState.getAll$().pipe(operators.map(this.mapToPolicies));
        };
        PermissionService.prototype.getSnapshot = function () {
            return this.mapToPolicies(this.configState.getAll());
        };
        PermissionService.prototype.mapToPolicies = function (applicationConfiguration) {
            return snq__default['default'](function () { return applicationConfiguration.auth.grantedPolicies; }, {});
        };
        PermissionService.prototype.getPolicy = function (key, grantedPolicies) {
            return snq__default['default'](function () { return grantedPolicies[key]; }, false);
        };
        return PermissionService;
    }());
    PermissionService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PermissionService_Factory() { return new PermissionService(i0__namespace.ɵɵinject(ConfigStateService)); }, token: PermissionService, providedIn: "root" });
    PermissionService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    PermissionService.ctorParameters = function () { return [
        { type: ConfigStateService }
    ]; };

    var AbstractTreeService = /** @class */ (function () {
        function AbstractTreeService() {
            this._flat$ = new rxjs.BehaviorSubject([]);
            this._tree$ = new rxjs.BehaviorSubject([]);
            this._visible$ = new rxjs.BehaviorSubject([]);
        }
        Object.defineProperty(AbstractTreeService.prototype, "flat", {
            get: function () {
                return this._flat$.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTreeService.prototype, "flat$", {
            get: function () {
                return this._flat$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTreeService.prototype, "tree", {
            get: function () {
                return this._tree$.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTreeService.prototype, "tree$", {
            get: function () {
                return this._tree$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTreeService.prototype, "visible", {
            get: function () {
                return this._visible$.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTreeService.prototype, "visible$", {
            get: function () {
                return this._visible$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        AbstractTreeService.prototype.createTree = function (items) {
            var _this = this;
            return createTreeFromList(items, function (item) { return item[_this.id]; }, function (item) { return item[_this.parentId]; }, function (item) { return BaseTreeNode.create(item); });
        };
        AbstractTreeService.prototype.filterWith = function (setOrMap) {
            var _this = this;
            return this._flat$.value.filter(function (item) { return !setOrMap.has(item[_this.id]); });
        };
        AbstractTreeService.prototype.findItemsToRemove = function (set) {
            var _this = this;
            return this._flat$.value.reduce(function (acc, item) {
                if (!acc.has(item[_this.parentId]))
                    return acc;
                var childSet = new Set([item[_this.id]]);
                var children = _this.findItemsToRemove(childSet);
                return new Set(__spread(acc, children));
            }, set);
        };
        AbstractTreeService.prototype.publish = function (flatItems, visibleItems) {
            this._flat$.next(flatItems);
            this._tree$.next(this.createTree(flatItems));
            this._visible$.next(this.createTree(visibleItems));
            return flatItems;
        };
        AbstractTreeService.prototype.add = function (items) {
            var _this = this;
            var map = new Map();
            items.forEach(function (item) { return map.set(item[_this.id], item); });
            var flatItems = this.filterWith(map);
            map.forEach(pushValueTo(flatItems));
            flatItems.sort(this.sort);
            var visibleItems = flatItems.filter(function (item) { return !_this.hide(item); });
            return this.publish(flatItems, visibleItems);
        };
        AbstractTreeService.prototype.find = function (predicate, tree) {
            var _this = this;
            if (tree === void 0) { tree = this.tree; }
            return tree.reduce(function (acc, node) { return (acc ? acc : predicate(node) ? node : _this.find(predicate, node.children)); }, null);
        };
        AbstractTreeService.prototype.patch = function (identifier, props) {
            var _this = this;
            var flatItems = this._flat$.value;
            var index = flatItems.findIndex(function (item) { return item[_this.id] === identifier; });
            if (index < 0)
                return false;
            flatItems[index] = Object.assign(Object.assign({}, flatItems[index]), props);
            flatItems.sort(this.sort);
            var visibleItems = flatItems.filter(function (item) { return !_this.hide(item); });
            return this.publish(flatItems, visibleItems);
        };
        AbstractTreeService.prototype.refresh = function () {
            return this.add([]);
        };
        AbstractTreeService.prototype.remove = function (identifiers) {
            var _this = this;
            var set = new Set();
            identifiers.forEach(function (id) { return set.add(id); });
            var setToRemove = this.findItemsToRemove(set);
            var flatItems = this.filterWith(setToRemove);
            var visibleItems = flatItems.filter(function (item) { return !_this.hide(item); });
            return this.publish(flatItems, visibleItems);
        };
        AbstractTreeService.prototype.search = function (params, tree) {
            var _this = this;
            if (tree === void 0) { tree = this.tree; }
            var searchKeys = Object.keys(params);
            return tree.reduce(function (acc, node) { return acc
                ? acc
                : searchKeys.every(function (key) { return node[key] === params[key]; })
                    ? node
                    : _this.search(params, node.children); }, null);
        };
        return AbstractTreeService;
    }());
    var AbstractNavTreeService = /** @class */ (function (_super) {
        __extends(AbstractNavTreeService, _super);
        function AbstractNavTreeService(injector) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.id = 'name';
            _this.parentId = 'parentName';
            _this.hide = function (item) { return item.invisible || !_this.isGranted(item); };
            _this.sort = function (a, b) {
                if (!Number.isInteger(a.order))
                    return 1;
                if (!Number.isInteger(b.order))
                    return -1;
                return a.order - b.order;
            };
            var configState = _this.injector.get(ConfigStateService);
            _this.subscription = configState
                .createOnUpdateStream(function (state) { return state; })
                .subscribe(function () { return _this.refresh(); });
            _this.permissionService = injector.get(PermissionService);
            return _this;
        }
        AbstractNavTreeService.prototype.isGranted = function (_b) {
            var requiredPolicy = _b.requiredPolicy;
            return this.permissionService.getGrantedPolicy(requiredPolicy);
        };
        AbstractNavTreeService.prototype.hasChildren = function (identifier) {
            var _this = this;
            var _a;
            var node = this.find(function (item) { return item[_this.id] === identifier; });
            return Boolean((_a = node === null || node === void 0 ? void 0 : node.children) === null || _a === void 0 ? void 0 : _a.length);
        };
        AbstractNavTreeService.prototype.hasInvisibleChild = function (identifier) {
            var _this = this;
            var _a;
            var node = this.find(function (item) { return item[_this.id] === identifier; });
            return (_a = node === null || node === void 0 ? void 0 : node.children) === null || _a === void 0 ? void 0 : _a.some(function (child) { return child.invisible; });
        };
        /* istanbul ignore next */
        AbstractNavTreeService.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        return AbstractNavTreeService;
    }(AbstractTreeService));
    AbstractNavTreeService.decorators = [
        { type: i0.Injectable }
    ];
    AbstractNavTreeService.ctorParameters = function () { return [
        { type: i0.Injector }
    ]; };
    var RoutesService = /** @class */ (function (_super) {
        __extends(RoutesService, _super);
        function RoutesService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return RoutesService;
    }(AbstractNavTreeService));
    RoutesService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function RoutesService_Factory() { return new RoutesService(i0__namespace.ɵɵinject(i0__namespace.INJECTOR)); }, token: RoutesService, providedIn: "root" });
    RoutesService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    var SettingTabsService = /** @class */ (function (_super) {
        __extends(SettingTabsService, _super);
        function SettingTabsService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SettingTabsService;
    }(AbstractNavTreeService));
    SettingTabsService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function SettingTabsService_Factory() { return new SettingTabsService(i0__namespace.ɵɵinject(i0__namespace.INJECTOR)); }, token: SettingTabsService, providedIn: "root" });
    SettingTabsService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    var SubscriptionService = /** @class */ (function () {
        function SubscriptionService() {
            this.subscription = new rxjs.Subscription();
        }
        Object.defineProperty(SubscriptionService.prototype, "isClosed", {
            get: function () {
                return this.subscription.closed;
            },
            enumerable: false,
            configurable: true
        });
        SubscriptionService.prototype.addOne = function (source$, nextOrObserver, error) {
            var subscription = source$.subscribe(nextOrObserver, error);
            this.subscription.add(subscription);
            return subscription;
        };
        SubscriptionService.prototype.closeAll = function () {
            this.subscription.unsubscribe();
        };
        SubscriptionService.prototype.closeOne = function (subscription) {
            this.removeOne(subscription);
            subscription.unsubscribe();
        };
        SubscriptionService.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        SubscriptionService.prototype.removeOne = function (subscription) {
            if (!subscription)
                return;
            this.subscription.remove(subscription);
        };
        SubscriptionService.prototype.reset = function () {
            this.subscription.unsubscribe();
            this.subscription = new rxjs.Subscription();
        };
        return SubscriptionService;
    }());
    SubscriptionService.decorators = [
        { type: i0.Injectable }
    ];

    var DynamicLayoutComponent = /** @class */ (function () {
        function DynamicLayoutComponent(injector, localizationService, replaceableComponents, subscription, routerEvents, dynamicLayoutComponent) {
            this.localizationService = localizationService;
            this.replaceableComponents = replaceableComponents;
            this.subscription = subscription;
            this.routerEvents = routerEvents;
            // TODO: Consider a shared enum (eThemeSharedComponents) for known layouts
            this.layouts = new Map([
                ['application', 'Theme.ApplicationLayoutComponent'],
                ['account', 'Theme.AccountLayoutComponent'],
                ['empty', 'Theme.EmptyLayoutComponent'],
            ]);
            this.isLayoutVisible = true;
            if (dynamicLayoutComponent)
                return;
            this.route = injector.get(i1.ActivatedRoute);
            this.router = injector.get(i1.Router);
            this.routes = injector.get(RoutesService);
            this.getLayout();
            this.checkLayoutOnNavigationEnd();
            this.listenToLanguageChange();
        }
        DynamicLayoutComponent.prototype.checkLayoutOnNavigationEnd = function () {
            var _this = this;
            var navigationEnd$ = this.routerEvents.getNavigationEvents('End');
            this.subscription.addOne(navigationEnd$, function () { return _this.getLayout(); });
        };
        DynamicLayoutComponent.prototype.getLayout = function () {
            var _a;
            var expectedLayout = (this.route.snapshot.data || {}).layout;
            if (!expectedLayout) {
                var node = findRoute(this.routes, getRoutePath(this.router));
                node = { parent: node };
                while (node.parent) {
                    node = node.parent;
                    if (node.layout) {
                        expectedLayout = node.layout;
                        break;
                    }
                }
            }
            if (!expectedLayout)
                expectedLayout = "empty" /* empty */;
            if (this.layoutKey === expectedLayout)
                return;
            var key = this.layouts.get(expectedLayout);
            this.layout = (_a = this.getComponent(key)) === null || _a === void 0 ? void 0 : _a.component;
            this.layoutKey = expectedLayout;
        };
        DynamicLayoutComponent.prototype.listenToLanguageChange = function () {
            var _this = this;
            this.subscription.addOne(this.localizationService.languageChange$, function () {
                _this.isLayoutVisible = false;
                setTimeout(function () { return (_this.isLayoutVisible = true); }, 0);
            });
        };
        DynamicLayoutComponent.prototype.getComponent = function (key) {
            return this.replaceableComponents.get(key);
        };
        return DynamicLayoutComponent;
    }());
    DynamicLayoutComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'abp-dynamic-layout',
                    template: "\n    <ng-container *ngTemplateOutlet=\"layout ? componentOutlet : routerOutlet\"></ng-container>\n    <ng-template #routerOutlet><router-outlet></router-outlet></ng-template>\n    <ng-template #componentOutlet\n      ><ng-container *ngIf=\"isLayoutVisible\" [ngComponentOutlet]=\"layout\"></ng-container\n    ></ng-template>\n  ",
                    providers: [SubscriptionService]
                },] }
    ];
    DynamicLayoutComponent.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: LocalizationService },
        { type: ReplaceableComponentsService },
        { type: SubscriptionService },
        { type: RouterEvents },
        { type: DynamicLayoutComponent, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] }
    ]; };

    var ReplaceableRouteContainerComponent = /** @class */ (function () {
        function ReplaceableRouteContainerComponent(route, replaceableComponents, subscription) {
            this.route = route;
            this.replaceableComponents = replaceableComponents;
            this.subscription = subscription;
        }
        ReplaceableRouteContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.defaultComponent = this.route.snapshot.data.replaceableComponent.defaultComponent;
            this.componentKey = this.route.snapshot.data
                .replaceableComponent.key;
            var component$ = this.replaceableComponents
                .get$(this.componentKey)
                .pipe(operators.distinctUntilChanged());
            this.subscription.addOne(component$, function (res) {
                if (res === void 0) { res = {}; }
                _this.externalComponent = res.component;
            });
        };
        return ReplaceableRouteContainerComponent;
    }());
    ReplaceableRouteContainerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'abp-replaceable-route-container',
                    template: "\n    <ng-container *ngComponentOutlet=\"externalComponent || defaultComponent\"></ng-container>\n  ",
                    providers: [SubscriptionService]
                },] }
    ];
    ReplaceableRouteContainerComponent.ctorParameters = function () { return [
        { type: i1.ActivatedRoute },
        { type: ReplaceableComponentsService },
        { type: SubscriptionService }
    ]; };

    var RouterOutletComponent = /** @class */ (function () {
        function RouterOutletComponent() {
        }
        return RouterOutletComponent;
    }());
    RouterOutletComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'abp-router-outlet',
                    template: "\n    <router-outlet></router-outlet>\n  "
                },] }
    ];

    // Different locales from .NET
    // Key is .NET locale, value is Angular locale
    var differentLocales = {
        aa: 'en',
        'aa-DJ': 'en',
        'aa-ER': 'en',
        'aa-ET': 'en',
        'af-ZA': 'af',
        'agq-CM': 'agq',
        'ak-GH': 'ak',
        'am-ET': 'am',
        'ar-001': 'ar',
        arn: 'en',
        'arn-CL': 'en',
        'as-IN': 'as',
        'asa-TZ': 'asa',
        'ast-ES': 'ast',
        'az-Cyrl-AZ': 'az-Cyrl',
        'az-Latn-AZ': 'az-Latn',
        ba: 'ru',
        'ba-RU': 'ru',
        'bas-CM': 'bas',
        'be-BY': 'be',
        'bem-ZM': 'bem',
        'bez-TZ': 'bez',
        'bg-BG': 'bg',
        bin: 'en',
        'bin-NG': 'en',
        'bm-Latn': 'bm',
        'bm-Latn-ML': 'bm',
        'bn-BD': 'bn',
        'bo-CN': 'bo',
        'br-FR': 'br',
        'brx-IN': 'brx',
        'bs-Cyrl-BA': 'bs-Cyrl',
        'bs-Latn-BA': 'bs-Latn',
        byn: 'en',
        'byn-ER': 'en',
        'ca-ES': 'ca',
        'ca-ES-valencia': 'ca-ES-VALENCIA',
        'ce-RU': 'ce',
        'cgg-UG': 'cgg',
        'chr-Cher': 'chr',
        'chr-Cher-US': 'chr',
        co: 'en',
        'co-FR': 'fr',
        'cs-CZ': 'cs',
        'cu-RU': 'cu',
        'cy-GB': 'cy',
        'da-DK': 'da',
        'dav-KE': 'dav',
        'de-DE': 'de',
        'dje-NE': 'dje',
        'dsb-DE': 'dsb',
        'dua-CM': 'dua',
        dv: 'en',
        'dv-MV': 'en',
        'dyo-SN': 'dyo',
        'dz-BT': 'dz',
        'ebu-KE': 'ebu',
        'ee-GH': 'ee',
        'el-GR': 'el',
        'en-029': 'en',
        'en-ID': 'en',
        'en-US': 'en',
        'eo-001': 'en',
        'es-ES': 'es',
        'et-EE': 'et',
        'eu-ES': 'eu',
        'ewo-CM': 'ewo',
        'fa-IR': 'fa',
        'ff-Latn-SN': 'ff-Latn',
        'ff-NG': 'ff',
        'fi-FI': 'fi',
        'fil-PH': 'fil',
        'fo-FO': 'fo',
        'fr-029': 'fr',
        'fr-FR': 'fr',
        'fur-IT': 'fur',
        'fy-NL': 'fy',
        'ga-IE': 'ga',
        'gd-GB': 'gd',
        'gl-ES': 'gl',
        gn: 'en',
        'gn-PY': 'en',
        'gsw-CH': 'gsw',
        'gu-IN': 'gu',
        'guz-KE': 'guz',
        'gv-IM': 'gv',
        'ha-Latn': 'ha',
        'ha-Latn-GH': 'ha-GH',
        'ha-Latn-NE': 'ha-NE',
        'ha-Latn-NG': 'ha',
        'haw-US': 'haw',
        'he-IL': 'he',
        'hi-IN': 'hi',
        'hr-HR': 'hr',
        'hsb-DE': 'hsb',
        'hu-HU': 'hu',
        'hy-AM': 'hy',
        'ia-001': 'ia',
        'ia-FR': 'ia',
        ibb: 'en',
        'ibb-NG': 'en',
        'id-ID': 'id',
        'ig-NG': 'ig',
        'ii-CN': 'ii',
        'is-IS': 'is',
        'it-IT': 'it',
        iu: 'en',
        'iu-Cans': 'en',
        'iu-Cans-CA': 'en',
        'iu-Latn': 'en',
        'iu-Latn-CA': 'en',
        'ja-JP': 'ja',
        'jgo-CM': 'jgo',
        'jmc-TZ': 'jmc',
        'jv-Java': 'jv',
        'jv-Java-ID': 'jv',
        'jv-Latn': 'jv',
        'jv-Latn-ID': 'jv',
        'ka-GE': 'ka',
        'kab-DZ': 'kab',
        'kam-KE': 'kam',
        'kde-TZ': 'kde',
        'kea-CV': 'kea',
        'khq-ML': 'khq',
        'ki-KE': 'ki',
        'kk-KZ': 'kk',
        'kkj-CM': 'kkj',
        'kl-GL': 'kl',
        'kln-KE': 'kln',
        'km-KH': 'km',
        'kn-IN': 'kn',
        'ko-KR': 'ko',
        'kok-IN': 'kok',
        kr: 'en',
        'kr-NG': 'en',
        'ks-Arab': 'ks',
        'ks-Arab-IN': 'ks',
        'ks-Deva': 'ks',
        'ks-Deva-IN': 'ks',
        'ksb-TZ': 'ksb',
        'ksf-CM': 'ksf',
        'ksh-DE': 'ksh',
        'ku-Arab': 'ku',
        'ku-Arab-IQ': 'ku',
        'ku-Arab-IR': 'ku',
        'kw-GB': 'kw',
        'ky-KG': 'ky',
        la: 'en',
        'la-001': 'en',
        'lag-TZ': 'lag',
        'lb-LU': 'lb',
        'lg-UG': 'lg',
        'lkt-US': 'lkt',
        'ln-CD': 'ln',
        'lo-LA': 'lo',
        'lrc-IR': 'lrc',
        'lt-LT': 'lt',
        'lu-CD': 'lu',
        'luo-KE': 'luo',
        'luy-KE': 'luy',
        'lv-LV': 'lv',
        'mas-KE': 'mas',
        'mer-KE': 'mer',
        'mfe-MU': 'mfe',
        'mg-MG': 'mg',
        'mgh-MZ': 'mgh',
        'mgo-CM': 'mgo',
        'mi-NZ': 'mi',
        'mk-MK': 'mk',
        'ml-IN': 'ml',
        'mn-Cyrl': 'mn',
        'mn-MN': 'mn',
        'mn-Mong': 'mn',
        'mn-Mong-CN': 'mn',
        'mn-Mong-MN': 'mn',
        mni: 'en',
        'mni-IN': 'en',
        moh: 'en',
        'moh-CA': 'en',
        'mr-IN': 'mr',
        'ms-MY': 'ms',
        'mt-MT': 'mt',
        'mua-CM': 'mua',
        'my-MM': 'my',
        'mzn-IR': 'mzn',
        'naq-NA': 'naq',
        'nb-NO': 'nb',
        'nd-ZW': 'nd',
        'ne-NP': 'ne',
        'nl-NL': 'nl',
        'nmg-CM': 'ngm',
        'nn-NO': 'nn',
        'nnh-CM': 'nnh',
        no: 'en',
        nqo: 'en',
        'nqo-GN': 'en',
        nr: 'en',
        'nr-ZA': 'en',
        nso: 'en',
        'nso-ZA': 'en',
        'nus-SS': 'nus',
        'nyn-UG': 'nyn',
        oc: 'en',
        'oc-FR': 'fr',
        'om-ET': 'om',
        'or-IN': 'or',
        'os-GE': 'os',
        'pa-Arab-PK': 'pa-Arab',
        'pa-IN': 'pa',
        pap: 'en',
        'pap-029': 'en',
        'pl-PL': 'pl',
        'prg-001': 'prg',
        prs: 'en',
        'prs-AF': 'en',
        'ps-AF': 'ps',
        'pt-BR': 'pt',
        quc: 'en',
        'quc-Latn': 'en',
        'quc-Latn-GT': 'en',
        quz: 'en',
        'quz-BO': 'en',
        'quz-EC': 'en',
        'quz-PE': 'en',
        'rm-CH': 'rm',
        'rn-BI': 'rn',
        'ro-RO': 'ro',
        'rof-TZ': 'rof',
        'ru-RU': 'ru',
        'rw-RW': 'rw',
        'rwk-TZ': 'rwk',
        sa: 'en',
        'sa-IN': 'en',
        'sah-RU': 'sah',
        'saq-KE': 'saq',
        'sbp-TZ': 'en',
        'sd-Arab': 'sd',
        'sd-Arab-PK': 'sd',
        'sd-Deva': 'sd',
        'sd-Deva-IN': 'sd',
        'se-NO': 'se',
        'seh-MZ': 'seh',
        'ses-ML': 'ses',
        'sg-CF': 'sg',
        'shi-Latn-MA': 'shi-Latn',
        'shi-Tfng-MA': 'shi-Tfng',
        'si-LK': 'si',
        'sk-SK': 'sk',
        'sl-SI': 'sl',
        sma: 'en',
        'sma-NO': 'en',
        'sma-SE': 'en',
        smj: 'en',
        'smj-NO': 'en',
        'smj-SE': 'en',
        'smn-FI': 'en',
        sms: 'en',
        'sms-FI': 'en',
        'sn-Latn': 'sn',
        'sn-Latn-ZW': 'sn',
        'so-SO': 'so',
        'sq-AL': 'so',
        'sr-Cyrl-RS': 'sr-Cryl',
        'sr-Latn-RS': 'sr-Latn',
        ss: 'en',
        'ss-SZ': 'en',
        'ss-ZA': 'en',
        ssy: 'en',
        'ssy-ER': 'en',
        st: 'en',
        'st-LS': 'en',
        'st-ZA': 'en',
        'sv-SE': 'sv',
        'sw-TZ': 'sw',
        syr: 'en',
        'syr-SY': 'en',
        'ta-IN': 'ta',
        'te-IN': 'te',
        'teo-UG': 'teo',
        'tg-Cyrl': 'tg',
        'tg-Cyrl-TJ': 'tg',
        'th-TH': 'th',
        'ti-ET': 'ti',
        tig: 'en',
        'tig-ER': 'en',
        'tk-TM': 'tk',
        tn: 'en',
        'tn-BW': 'en',
        'tn-ZA': 'en',
        'to-TO': 'to',
        'tr-TR': 'tr',
        ts: 'en',
        'ts-ZA': 'en',
        'tt-RU': 'tt',
        'twq-NE': 'twq',
        'tzm-Arab': 'tzm',
        'tzm-Arab-MA': 'tzm',
        'tzm-Latn': 'tzm',
        'tzm-Latn-DZ': 'tzm',
        'tzm-Latn-MA': 'tzm',
        'tzm-Tfng': 'tzm',
        'tzm-Tfng-MA': 'tzm',
        'ug-CN': 'ug',
        'uk-UA': 'uk',
        'ur-PK': 'ur',
        'uz-Arab-AF': 'uz-Arab',
        'uz-Cyrl-UZ': 'uz-Cyrl',
        'uz-Latn-UZ': 'uz-Latn',
        'vai-Latn-LR': 'vai-Latn',
        'vai-Vaii-LR': 'vai-Vaii',
        ve: 'en',
        've-ZA': 'en',
        'vi-VN': 'vi',
        'vo-001': 'vo',
        'vun-TZ': 'vun',
        'wae-CH': 'wae',
        wal: 'en',
        'wal-ET': 'en',
        'wo-SN': 'wo',
        'xh-ZA': 'xh',
        'xog-UG': 'xog',
        'yav-CM': 'yav',
        'yi-001': 'yi',
        'yo-NG': 'yo',
        'zgh-Tfng': 'zgh',
        'zgh-Tfng-MA': 'zgh',
        'zh-CN': 'zh',
        'zh-HK': 'zh',
        'zh-MO': 'zh',
        'zh-SG': 'zh',
        'zh-TW': 'zh',
        'zu-ZA': 'zu',
    };

    var AutofocusDirective = /** @class */ (function () {
        function AutofocusDirective(elRef) {
            this.elRef = elRef;
            this.delay = 0;
        }
        AutofocusDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            setTimeout(function () { return _this.elRef.nativeElement.focus(); }, this.delay);
        };
        return AutofocusDirective;
    }());
    AutofocusDirective.decorators = [
        { type: i0.Directive, args: [{
                    // tslint:disable-next-line: directive-selector
                    selector: '[autofocus]'
                },] }
    ];
    AutofocusDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    AutofocusDirective.propDecorators = {
        delay: [{ type: i0.Input, args: ['autofocus',] }]
    };

    var InputEventDebounceDirective = /** @class */ (function () {
        function InputEventDebounceDirective(el, subscription) {
            this.el = el;
            this.subscription = subscription;
            this.debounce = 300;
            this.debounceEvent = new i0.EventEmitter();
        }
        InputEventDebounceDirective.prototype.ngOnInit = function () {
            var _this = this;
            var input$ = rxjs.fromEvent(this.el.nativeElement, 'input').pipe(operators.debounceTime(this.debounce));
            this.subscription.addOne(input$, function (event) {
                _this.debounceEvent.emit(event);
            });
        };
        return InputEventDebounceDirective;
    }());
    InputEventDebounceDirective.decorators = [
        { type: i0.Directive, args: [{
                    // tslint:disable-next-line: directive-selector
                    selector: '[input.debounce]',
                    providers: [SubscriptionService],
                },] }
    ];
    InputEventDebounceDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: SubscriptionService }
    ]; };
    InputEventDebounceDirective.propDecorators = {
        debounce: [{ type: i0.Input }],
        debounceEvent: [{ type: i0.Output, args: ['input.debounce',] }]
    };

    var AbpForContext = /** @class */ (function () {
        function AbpForContext($implicit, index, count, list) {
            this.$implicit = $implicit;
            this.index = index;
            this.count = count;
            this.list = list;
        }
        return AbpForContext;
    }());
    var RecordView = /** @class */ (function () {
        function RecordView(record, view) {
            this.record = record;
            this.view = view;
        }
        return RecordView;
    }());
    var ForDirective = /** @class */ (function () {
        function ForDirective(tempRef, vcRef, differs) {
            this.tempRef = tempRef;
            this.vcRef = vcRef;
            this.differs = differs;
        }
        Object.defineProperty(ForDirective.prototype, "compareFn", {
            get: function () {
                return this.compareBy || compare__default['default'];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ForDirective.prototype, "trackByFn", {
            get: function () {
                return this.trackBy || (function (index, item) { return item.id || index; });
            },
            enumerable: false,
            configurable: true
        });
        ForDirective.prototype.iterateOverAppliedOperations = function (changes) {
            var _this = this;
            var rw = [];
            changes.forEachOperation(function (record, previousIndex, currentIndex) {
                if (record.previousIndex == null) {
                    var view = _this.vcRef.createEmbeddedView(_this.tempRef, new AbpForContext(null, -1, -1, _this.items), currentIndex);
                    rw.push(new RecordView(record, view));
                }
                else if (currentIndex == null) {
                    _this.vcRef.remove(previousIndex);
                }
                else {
                    var view = _this.vcRef.get(previousIndex);
                    _this.vcRef.move(view, currentIndex);
                    rw.push(new RecordView(record, view));
                }
            });
            for (var i = 0, l = rw.length; i < l; i++) {
                rw[i].view.context.$implicit = rw[i].record.item;
            }
        };
        ForDirective.prototype.iterateOverAttachedViews = function (changes) {
            var _this = this;
            for (var i = 0, l = this.vcRef.length; i < l; i++) {
                var viewRef = this.vcRef.get(i);
                viewRef.context.index = i;
                viewRef.context.count = l;
                viewRef.context.list = this.items;
            }
            changes.forEachIdentityChange(function (record) {
                var viewRef = _this.vcRef.get(record.currentIndex);
                viewRef.context.$implicit = record.item;
            });
        };
        ForDirective.prototype.projectItems = function (items) {
            if (!items.length && this.emptyRef) {
                this.vcRef.clear();
                // tslint:disable-next-line: no-unused-expression
                this.vcRef.createEmbeddedView(this.emptyRef).rootNodes;
                this.isShowEmptyRef = true;
                this.differ = null;
                return;
            }
            if (this.emptyRef && this.isShowEmptyRef) {
                this.vcRef.clear();
                this.isShowEmptyRef = false;
            }
            if (!this.differ && items) {
                this.differ = this.differs.find(items).create(this.trackByFn);
            }
            if (this.differ) {
                var changes = this.differ.diff(items);
                if (changes) {
                    this.iterateOverAppliedOperations(changes);
                    this.iterateOverAttachedViews(changes);
                }
            }
        };
        ForDirective.prototype.sortItems = function (items) {
            var _this = this;
            if (this.orderBy) {
                items.sort(function (a, b) { return (a[_this.orderBy] > b[_this.orderBy] ? 1 : a[_this.orderBy] < b[_this.orderBy] ? -1 : 0); });
            }
            else {
                items.sort();
            }
        };
        ForDirective.prototype.ngOnChanges = function () {
            var _this = this;
            var items = clone__default['default'](this.items);
            if (!Array.isArray(items))
                return;
            var compareFn = this.compareFn;
            if (typeof this.filterBy !== 'undefined' && typeof this.filterVal !== 'undefined' && this.filterVal !== '') {
                items = items.filter(function (item) { return compareFn(item[_this.filterBy], _this.filterVal); });
            }
            switch (this.orderDir) {
                case 'ASC':
                    this.sortItems(items);
                    this.projectItems(items);
                    break;
                case 'DESC':
                    this.sortItems(items);
                    items.reverse();
                    this.projectItems(items);
                    break;
                default:
                    this.projectItems(items);
            }
        };
        return ForDirective;
    }());
    ForDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[abpFor]',
                },] }
    ];
    ForDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef },
        { type: i0.ViewContainerRef },
        { type: i0.IterableDiffers }
    ]; };
    ForDirective.propDecorators = {
        items: [{ type: i0.Input, args: ['abpForOf',] }],
        orderBy: [{ type: i0.Input, args: ['abpForOrderBy',] }],
        orderDir: [{ type: i0.Input, args: ['abpForOrderDir',] }],
        filterBy: [{ type: i0.Input, args: ['abpForFilterBy',] }],
        filterVal: [{ type: i0.Input, args: ['abpForFilterVal',] }],
        trackBy: [{ type: i0.Input, args: ['abpForTrackBy',] }],
        compareBy: [{ type: i0.Input, args: ['abpForCompareBy',] }],
        emptyRef: [{ type: i0.Input, args: ['abpForEmptyRef',] }]
    };

    var FormSubmitDirective = /** @class */ (function () {
        function FormSubmitDirective(formGroupDirective, host, cdRef, subscription) {
            this.formGroupDirective = formGroupDirective;
            this.host = host;
            this.cdRef = cdRef;
            this.subscription = subscription;
            this.debounce = 200;
            this.ngSubmit = new i0.EventEmitter();
            this.executedNgSubmit = false;
        }
        FormSubmitDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.subscription.addOne(this.formGroupDirective.ngSubmit, function () {
                _this.markAsDirty();
                _this.executedNgSubmit = true;
            });
            var keyup$ = rxjs.fromEvent(this.host.nativeElement, 'keyup').pipe(operators.debounceTime(this.debounce), operators.filter(function (event) { return !(event.target instanceof HTMLTextAreaElement); }), operators.filter(function (event) { return event && event.key === 'Enter'; }));
            this.subscription.addOne(keyup$, function () {
                if (!_this.executedNgSubmit) {
                    _this.host.nativeElement.dispatchEvent(new Event('submit', { bubbles: true, cancelable: true }));
                }
                _this.executedNgSubmit = false;
            });
        };
        FormSubmitDirective.prototype.markAsDirty = function () {
            var form = this.formGroupDirective.form;
            setDirty(form.controls);
            form.markAsDirty();
            this.cdRef.detectChanges();
        };
        return FormSubmitDirective;
    }());
    FormSubmitDirective.decorators = [
        { type: i0.Directive, args: [{
                    // tslint:disable-next-line: directive-selector
                    selector: 'form[ngSubmit][formGroup]',
                    providers: [SubscriptionService],
                },] }
    ];
    FormSubmitDirective.ctorParameters = function () { return [
        { type: forms.FormGroupDirective, decorators: [{ type: i0.Self }] },
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: SubscriptionService }
    ]; };
    FormSubmitDirective.propDecorators = {
        debounce: [{ type: i0.Input }],
        notValidateOnSubmit: [{ type: i0.Input }],
        ngSubmit: [{ type: i0.Output }]
    };
    function setDirty(controls) {
        if (Array.isArray(controls)) {
            controls.forEach(function (group) {
                setDirty(group.controls);
            });
            return;
        }
        Object.keys(controls).forEach(function (key) {
            controls[key].markAsDirty();
            controls[key].updateValueAndValidity();
        });
    }

    var InitDirective = /** @class */ (function () {
        function InitDirective(elRef) {
            this.elRef = elRef;
            this.init = new i0.EventEmitter();
        }
        InitDirective.prototype.ngAfterViewInit = function () {
            this.init.emit(this.elRef);
        };
        return InitDirective;
    }());
    InitDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[abpInit]' },] }
    ];
    InitDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    InitDirective.propDecorators = {
        init: [{ type: i0.Output, args: ['abpInit',] }]
    };

    var PermissionDirective = /** @class */ (function () {
        function PermissionDirective(elRef, renderer, templateRef, vcRef, permissionService, cdRef) {
            this.elRef = elRef;
            this.renderer = renderer;
            this.templateRef = templateRef;
            this.vcRef = vcRef;
            this.permissionService = permissionService;
            this.cdRef = cdRef;
        }
        PermissionDirective.prototype.check = function () {
            var _this = this;
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
            this.subscription = this.permissionService
                .getGrantedPolicy$(this.condition)
                .pipe(operators.distinctUntilChanged())
                .subscribe(function (isGranted) {
                if (_this.templateRef)
                    _this.initStructural(isGranted);
                else
                    _this.initAttribute(isGranted);
                _this.cdRef.detectChanges();
            });
        };
        PermissionDirective.prototype.initStructural = function (isGranted) {
            this.vcRef.clear();
            if (isGranted)
                this.vcRef.createEmbeddedView(this.templateRef);
        };
        /**
         * @deprecated Will be deleted in v5.0
         */
        PermissionDirective.prototype.initAttribute = function (isGranted) {
            if (!isGranted) {
                this.renderer.removeChild(this.elRef.nativeElement.parentElement, this.elRef.nativeElement);
            }
        };
        PermissionDirective.prototype.ngOnDestroy = function () {
            if (this.subscription)
                this.subscription.unsubscribe();
        };
        PermissionDirective.prototype.ngOnChanges = function () {
            this.check();
        };
        return PermissionDirective;
    }());
    PermissionDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[abpPermission]',
                },] }
    ];
    PermissionDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: i0.TemplateRef, decorators: [{ type: i0.Optional }] },
        { type: i0.ViewContainerRef },
        { type: PermissionService },
        { type: i0.ChangeDetectorRef }
    ]; };
    PermissionDirective.propDecorators = {
        condition: [{ type: i0.Input, args: ['abpPermission',] }]
    };

    var ReplaceableTemplateDirective = /** @class */ (function () {
        function ReplaceableTemplateDirective(injector, templateRef, cfRes, vcRef, replaceableComponents, subscription) {
            var _this = this;
            this.injector = injector;
            this.templateRef = templateRef;
            this.cfRes = cfRes;
            this.vcRef = vcRef;
            this.replaceableComponents = replaceableComponents;
            this.subscription = subscription;
            this.providedData = { inputs: {}, outputs: {} };
            this.context = {};
            this.defaultComponentSubscriptions = {};
            this.initialized = false;
            this.context = {
                initTemplate: function (ref) {
                    _this.resetDefaultComponent();
                    _this.defaultComponentRef = ref;
                    _this.setDefaultComponentInputs();
                },
            };
        }
        ReplaceableTemplateDirective.prototype.ngOnInit = function () {
            var _this = this;
            var component$ = this.replaceableComponents
                .get$(this.data.componentKey)
                .pipe(operators.filter(function (res) {
                if (res === void 0) { res = {}; }
                return !_this.initialized || !compare__default['default'](res.component, _this.externalComponent);
            }));
            this.subscription.addOne(component$, function (res) {
                if (res === void 0) { res = {}; }
                _this.vcRef.clear();
                _this.externalComponent = res.component;
                if (_this.defaultComponentRef) {
                    _this.resetDefaultComponent();
                }
                if (res.component) {
                    _this.setProvidedData();
                    var customInjector = i0.Injector.create({
                        providers: [{ provide: 'REPLACEABLE_DATA', useValue: _this.providedData }],
                        parent: _this.injector,
                    });
                    _this.vcRef.createComponent(_this.cfRes.resolveComponentFactory(res.component), 0, customInjector);
                }
                else {
                    _this.vcRef.createEmbeddedView(_this.templateRef, _this.context);
                }
                _this.initialized = true;
            });
        };
        ReplaceableTemplateDirective.prototype.ngOnChanges = function (changes) {
            if (snq__default['default'](function () { return changes.data.currentValue.inputs; }) && this.defaultComponentRef) {
                this.setDefaultComponentInputs();
            }
        };
        ReplaceableTemplateDirective.prototype.setDefaultComponentInputs = function () {
            var _this = this;
            if (!this.defaultComponentRef || (!this.data.inputs && !this.data.outputs))
                return;
            if (this.data.inputs) {
                for (var key in this.data.inputs) {
                    if (this.data.inputs.hasOwnProperty(key)) {
                        if (!compare__default['default'](this.defaultComponentRef[key], this.data.inputs[key].value)) {
                            this.defaultComponentRef[key] = this.data.inputs[key].value;
                        }
                    }
                }
            }
            if (this.data.outputs) {
                var _loop_1 = function (key) {
                    if (this_1.data.outputs.hasOwnProperty(key)) {
                        if (!this_1.defaultComponentSubscriptions[key]) {
                            this_1.defaultComponentSubscriptions[key] = this_1.defaultComponentRef[key].subscribe(function (value) {
                                _this.data.outputs[key](value);
                            });
                        }
                    }
                };
                var this_1 = this;
                for (var key in this.data.outputs) {
                    _loop_1(key);
                }
            }
        };
        ReplaceableTemplateDirective.prototype.setProvidedData = function () {
            var _this = this;
            this.providedData = Object.assign(Object.assign({}, this.data), { inputs: {} });
            if (!this.data.inputs)
                return;
            Object.defineProperties(this.providedData.inputs, Object.assign({}, Object.keys(this.data.inputs).reduce(function (acc, key) {
                var _a;
                return (Object.assign(Object.assign({}, acc), (_a = {}, _a[key] = Object.assign({ enumerable: true, configurable: true, get: function () { return _this.data.inputs[key].value; } }, (_this.data.inputs[key].twoWay && {
                    set: function (newValue) {
                        _this.data.inputs[key].value = newValue;
                        _this.data.outputs[key + "Change"](newValue);
                    },
                })), _a)));
            }, {})));
        };
        ReplaceableTemplateDirective.prototype.resetDefaultComponent = function () {
            var _this = this;
            Object.keys(this.defaultComponentSubscriptions).forEach(function (key) {
                _this.defaultComponentSubscriptions[key].unsubscribe();
            });
            this.defaultComponentSubscriptions = {};
            this.defaultComponentRef = null;
        };
        return ReplaceableTemplateDirective;
    }());
    ReplaceableTemplateDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[abpReplaceableTemplate]', providers: [SubscriptionService] },] }
    ];
    ReplaceableTemplateDirective.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i0.TemplateRef },
        { type: i0.ComponentFactoryResolver },
        { type: i0.ViewContainerRef },
        { type: ReplaceableComponentsService },
        { type: SubscriptionService }
    ]; };
    ReplaceableTemplateDirective.propDecorators = {
        data: [{ type: i0.Input, args: ['abpReplaceableTemplate',] }]
    };

    var StopPropagationDirective = /** @class */ (function () {
        function StopPropagationDirective(el, subscription) {
            this.el = el;
            this.subscription = subscription;
            this.stopPropEvent = new i0.EventEmitter();
        }
        StopPropagationDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.subscription.addOne(rxjs.fromEvent(this.el.nativeElement, 'click'), function (event) {
                event.stopPropagation();
                _this.stopPropEvent.emit(event);
            });
        };
        return StopPropagationDirective;
    }());
    StopPropagationDirective.decorators = [
        { type: i0.Directive, args: [{
                    // tslint:disable-next-line: directive-selector
                    selector: '[click.stop]',
                    providers: [SubscriptionService],
                },] }
    ];
    StopPropagationDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: SubscriptionService }
    ]; };
    StopPropagationDirective.propDecorators = {
        stopPropEvent: [{ type: i0.Output, args: ['click.stop',] }]
    };

    /**
     *
     * @deprecated To be deleted in v5.0
     */
    var VisibilityDirective = /** @class */ (function () {
        function VisibilityDirective(elRef, renderer) {
            this.elRef = elRef;
            this.renderer = renderer;
            this.completed$ = new rxjs.Subject();
        }
        VisibilityDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (!this.focusedElement && this.elRef) {
                this.focusedElement = this.elRef.nativeElement;
            }
            var observer;
            observer = new MutationObserver(function (mutations) {
                mutations.forEach(function (mutation) {
                    if (!mutation.target)
                        return;
                    var htmlNodes = snq__default['default'](function () { return Array.from(mutation.target.childNodes).filter(function (node) { return node instanceof HTMLElement; }); }, []);
                    if (!htmlNodes.length) {
                        _this.removeFromDOM();
                    }
                });
            });
            observer.observe(this.focusedElement, {
                childList: true,
            });
            setTimeout(function () {
                var htmlNodes = snq__default['default'](function () { return Array.from(_this.focusedElement.childNodes).filter(function (node) { return node instanceof HTMLElement; }); }, []);
                if (!htmlNodes.length)
                    _this.removeFromDOM();
            }, 0);
            this.completed$.subscribe(function () { return observer.disconnect(); });
        };
        VisibilityDirective.prototype.disconnect = function () {
            this.completed$.next();
            this.completed$.complete();
        };
        VisibilityDirective.prototype.removeFromDOM = function () {
            if (!this.elRef.nativeElement)
                return;
            this.renderer.removeChild(this.elRef.nativeElement.parentElement, this.elRef.nativeElement);
            this.disconnect();
        };
        return VisibilityDirective;
    }());
    VisibilityDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[abpVisibility]',
                },] }
    ];
    VisibilityDirective.ctorParameters = function () { return [
        { type: i0.ElementRef, decorators: [{ type: i0.Optional }] },
        { type: i0.Renderer2 }
    ]; };
    VisibilityDirective.propDecorators = {
        focusedElement: [{ type: i0.Input, args: ['abpVisibility',] }]
    };

    var OAuthConfigurationHandler = /** @class */ (function () {
        function OAuthConfigurationHandler(oAuthService, environmentService, options) {
            this.oAuthService = oAuthService;
            this.environmentService = environmentService;
            this.options = options;
            this.listenToSetEnvironment();
        }
        OAuthConfigurationHandler.prototype.listenToSetEnvironment = function () {
            var _this = this;
            this.environmentService
                .createOnUpdateStream(function (state) { return state; })
                .pipe(operators.map(function (environment) { return environment.oAuthConfig; }), operators.filter(function (config) { return !compare__default['default'](config, _this.options.environment.oAuthConfig); }))
                .subscribe(function (config) {
                _this.oAuthService.configure(config);
            });
        };
        return OAuthConfigurationHandler;
    }());
    OAuthConfigurationHandler.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function OAuthConfigurationHandler_Factory() { return new OAuthConfigurationHandler(i0__namespace.ɵɵinject(i1__namespace$1.OAuthService), i0__namespace.ɵɵinject(EnvironmentService), i0__namespace.ɵɵinject(CORE_OPTIONS)); }, token: OAuthConfigurationHandler, providedIn: "root" });
    OAuthConfigurationHandler.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    OAuthConfigurationHandler.ctorParameters = function () { return [
        { type: i1$1.OAuthService },
        { type: EnvironmentService },
        { type: undefined, decorators: [{ type: i0.Inject, args: [CORE_OPTIONS,] }] }
    ]; };

    var RoutesHandler = /** @class */ (function () {
        function RoutesHandler(routes, router) {
            this.routes = routes;
            this.router = router;
            this.addRoutes();
        }
        RoutesHandler.prototype.addRoutes = function () {
            var _this = this;
            var _a, _b;
            (_b = (_a = this.router) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.forEach(function (_c) {
                var _d = _c.path, path = _d === void 0 ? '' : _d, data = _c.data;
                if (!(data === null || data === void 0 ? void 0 : data.routes))
                    return;
                if (Array.isArray(data.routes)) {
                    _this.routes.add(data.routes);
                    return;
                }
                var routes = flatRoutes([Object.assign({ path: path }, data.routes)], { path: '' });
                _this.routes.add(routes);
            });
        };
        return RoutesHandler;
    }());
    RoutesHandler.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function RoutesHandler_Factory() { return new RoutesHandler(i0__namespace.ɵɵinject(RoutesService), i0__namespace.ɵɵinject(i1__namespace.Router, 8)); }, token: RoutesHandler, providedIn: "root" });
    RoutesHandler.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    RoutesHandler.ctorParameters = function () { return [
        { type: RoutesService },
        { type: i1.Router, decorators: [{ type: i0.Optional }] }
    ]; };
    function flatRoutes(routes, parent) {
        if (!routes)
            return [];
        return routes.reduce(function (acc, route) {
            var _a = Object.assign(Object.assign({}, route), { parentName: parent.name, path: (parent.path + '/' + route.path).replace(/\/\//g, '/') }), children = _a.children, current = __rest(_a, ["children"]);
            acc.push.apply(acc, __spread([current], flatRoutes(children, current)));
            return acc;
        }, []);
    }

    function getPathName(url) {
        var pathname = new URL(url, window.location.origin).pathname;
        return pathname;
    }
    var WebHttpUrlEncodingCodec = /** @class */ (function () {
        function WebHttpUrlEncodingCodec() {
        }
        WebHttpUrlEncodingCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        WebHttpUrlEncodingCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        WebHttpUrlEncodingCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        WebHttpUrlEncodingCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return WebHttpUrlEncodingCodec;
    }());

    var LOADER_DELAY = new i0.InjectionToken('LOADER_DELAY');

    var HttpWaitService = /** @class */ (function () {
        function HttpWaitService(injector) {
            this.store = new InternalStore({
                requests: [],
                filteredRequests: [],
            });
            this.destroy$ = new rxjs.Subject();
            this.delay = injector.get(LOADER_DELAY, 500);
        }
        HttpWaitService.prototype.getLoading = function () {
            return !!this.applyFilter(this.store.state.requests).length;
        };
        HttpWaitService.prototype.getLoading$ = function () {
            var _this = this;
            return this.store
                .sliceState(function (_a) {
                var requests = _a.requests;
                return requests;
            })
                .pipe(operators.map(function (requests) { return !!_this.applyFilter(requests).length; }), operators.switchMap(function (condition) { return condition
                ? _this.delay === 0
                    ? rxjs.of(true)
                    : rxjs.timer(_this.delay).pipe(operators.mapTo(true), operators.takeUntil(_this.destroy$))
                : rxjs.of(false); }), operators.tap(function () { return _this.destroy$.next(); }));
        };
        HttpWaitService.prototype.updateLoading$ = function () {
            var _this = this;
            return this.store.sliceUpdate(function (_a) {
                var requests = _a.requests;
                return !!_this.applyFilter(requests).length;
            });
        };
        HttpWaitService.prototype.clearLoading = function () {
            this.store.patch({ requests: [] });
        };
        HttpWaitService.prototype.addRequest = function (request) {
            this.store.patch({ requests: __spread(this.store.state.requests, [request]) });
        };
        HttpWaitService.prototype.deleteRequest = function (request) {
            var requests = this.store.state.requests.filter(function (r) { return r !== request; });
            this.store.patch({ requests: requests });
        };
        HttpWaitService.prototype.addFilter = function (request) {
            var _this = this;
            var requests = Array.isArray(request) ? request : [request];
            var filteredRequests = __spread(this.store.state.filteredRequests.filter(function (f) { return !requests.some(function (r) { return _this.isSameRequest(f, r); }); }), requests);
            this.store.patch({ filteredRequests: filteredRequests });
        };
        HttpWaitService.prototype.removeFilter = function (request) {
            var _this = this;
            var requests = Array.isArray(request) ? request : [request];
            var filteredRequests = this.store.state.filteredRequests.filter(function (f) { return !requests.some(function (r) { return _this.isSameRequest(f, r); }); });
            this.store.patch({ filteredRequests: filteredRequests });
        };
        HttpWaitService.prototype.applyFilter = function (requests) {
            var _this = this;
            var filteredRequests = this.store.state.filteredRequests;
            return requests.filter(function (_a) {
                var method = _a.method, url = _a.url;
                return !filteredRequests.find(function (filteredRequest) { return _this.isSameRequest(filteredRequest, { method: method, endpoint: getPathName(url) }); });
            });
        };
        HttpWaitService.prototype.isSameRequest = function (filteredRequest, request) {
            var method = filteredRequest.method, endpoint = filteredRequest.endpoint;
            return endpoint === request.endpoint && method === request.method;
        };
        return HttpWaitService;
    }());
    HttpWaitService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function HttpWaitService_Factory() { return new HttpWaitService(i0__namespace.ɵɵinject(i0__namespace.INJECTOR)); }, token: HttpWaitService, providedIn: "root" });
    HttpWaitService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    HttpWaitService.ctorParameters = function () { return [
        { type: i0.Injector }
    ]; };

    var TENANT_KEY = new i0.InjectionToken('TENANT_KEY');

    var ApiInterceptor = /** @class */ (function () {
        function ApiInterceptor(oAuthService, sessionState, httpWaitService, tenantKey) {
            this.oAuthService = oAuthService;
            this.sessionState = sessionState;
            this.httpWaitService = httpWaitService;
            this.tenantKey = tenantKey;
        }
        ApiInterceptor.prototype.intercept = function (request, next) {
            var _this = this;
            this.httpWaitService.addRequest(request);
            return next
                .handle(request.clone({
                setHeaders: this.getAdditionalHeaders(request.headers),
            }))
                .pipe(operators.finalize(function () { return _this.httpWaitService.deleteRequest(request); }));
        };
        ApiInterceptor.prototype.getAdditionalHeaders = function (existingHeaders) {
            var headers = {};
            var token = this.oAuthService.getAccessToken();
            if (!(existingHeaders === null || existingHeaders === void 0 ? void 0 : existingHeaders.has('Authorization')) && token) {
                headers['Authorization'] = "Bearer " + token;
            }
            var lang = this.sessionState.getLanguage();
            if (!(existingHeaders === null || existingHeaders === void 0 ? void 0 : existingHeaders.has('Accept-Language')) && lang) {
                headers['Accept-Language'] = lang;
            }
            var tenant = this.sessionState.getTenant();
            if (!(existingHeaders === null || existingHeaders === void 0 ? void 0 : existingHeaders.has(this.tenantKey)) && (tenant === null || tenant === void 0 ? void 0 : tenant.id)) {
                headers[this.tenantKey] = tenant.id;
            }
            return headers;
        };
        return ApiInterceptor;
    }());
    ApiInterceptor.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ApiInterceptor_Factory() { return new ApiInterceptor(i0__namespace.ɵɵinject(i1__namespace$1.OAuthService), i0__namespace.ɵɵinject(SessionStateService), i0__namespace.ɵɵinject(HttpWaitService), i0__namespace.ɵɵinject(TENANT_KEY)); }, token: ApiInterceptor, providedIn: "root" });
    ApiInterceptor.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ApiInterceptor.ctorParameters = function () { return [
        { type: i1$1.OAuthService },
        { type: SessionStateService },
        { type: HttpWaitService },
        { type: String, decorators: [{ type: i0.Inject, args: [TENANT_KEY,] }] }
    ]; };

    var LocalizationPipe = /** @class */ (function () {
        function LocalizationPipe(localization) {
            this.localization = localization;
        }
        LocalizationPipe.prototype.transform = function (value) {
            var _a;
            if (value === void 0) { value = ''; }
            var interpolateParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                interpolateParams[_i - 1] = arguments[_i];
            }
            return (_a = this.localization).instant.apply(_a, __spread([value], interpolateParams.reduce(function (acc, val) { return (Array.isArray(val) ? __spread(acc, val) : __spread(acc, [val])); }, [])));
        };
        return LocalizationPipe;
    }());
    LocalizationPipe.decorators = [
        { type: i0.Injectable },
        { type: i0.Pipe, args: [{
                    name: 'abpLocalization',
                },] }
    ];
    LocalizationPipe.ctorParameters = function () { return [
        { type: LocalizationService }
    ]; };

    var LocalizationModule = /** @class */ (function () {
        function LocalizationModule() {
        }
        return LocalizationModule;
    }());
    LocalizationModule.decorators = [
        { type: i0.NgModule, args: [{
                    exports: [LocalizationPipe],
                    declarations: [LocalizationPipe],
                },] }
    ];

    var SortPipe = /** @class */ (function () {
        function SortPipe() {
        }
        SortPipe.prototype.transform = function (value, sortOrder, sortKey) {
            if (sortOrder === void 0) { sortOrder = 'asc'; }
            sortOrder = sortOrder && sortOrder.toLowerCase();
            if (!value || (sortOrder !== 'asc' && sortOrder !== 'desc'))
                return value;
            var numberArray = [];
            var stringArray = [];
            if (!sortKey) {
                numberArray = value.filter(function (item) { return typeof item === 'number'; }).sort();
                stringArray = value.filter(function (item) { return typeof item === 'string'; }).sort();
            }
            else {
                numberArray = value
                    .filter(function (item) { return typeof item[sortKey] === 'number'; })
                    .sort(function (a, b) { return a[sortKey] - b[sortKey]; });
                stringArray = value
                    .filter(function (item) { return typeof item[sortKey] === 'string'; })
                    .sort(function (a, b) {
                    if (a[sortKey] < b[sortKey])
                        return -1;
                    else if (a[sortKey] > b[sortKey])
                        return 1;
                    else
                        return 0;
                });
            }
            var sorted = __spread(numberArray, stringArray, value.filter(function (item) { return typeof (sortKey ? item[sortKey] : item) !== 'number' &&
                typeof (sortKey ? item[sortKey] : item) !== 'string'; }));
            return sortOrder === 'asc' ? sorted : sorted.reverse();
        };
        return SortPipe;
    }());
    SortPipe.decorators = [
        { type: i0.Injectable },
        { type: i0.Pipe, args: [{
                    name: 'abpSort',
                },] }
    ];

    var LocaleId = /** @class */ (function (_super) {
        __extends(LocaleId, _super);
        function LocaleId(localizationService) {
            var _this = _super.call(this) || this;
            _this.localizationService = localizationService;
            return _this;
        }
        LocaleId.prototype.toString = function () {
            var currentLang = this.localizationService.currentLang;
            return differentLocales[currentLang] || currentLang;
        };
        LocaleId.prototype.valueOf = function () {
            return this.toString();
        };
        return LocaleId;
    }(String));
    var LocaleProvider = {
        provide: i0.LOCALE_ID,
        useClass: LocaleId,
        deps: [LocalizationService],
    };

    var ProfileService = /** @class */ (function () {
        function ProfileService(rest) {
            this.rest = rest;
            this.apiName = 'AbpIdentity';
        }
        ProfileService.prototype.get = function () {
            var request = {
                method: 'GET',
                url: '/api/identity/my-profile',
            };
            return this.rest.request(request, { apiName: this.apiName });
        };
        ProfileService.prototype.update = function (body) {
            var request = {
                method: 'PUT',
                url: '/api/identity/my-profile',
                body: body,
            };
            return this.rest.request(request, {
                apiName: this.apiName,
            });
        };
        ProfileService.prototype.changePassword = function (body, skipHandleError) {
            if (skipHandleError === void 0) { skipHandleError = false; }
            var request = {
                method: 'POST',
                url: '/api/identity/my-profile/change-password',
                body: body,
            };
            return this.rest.request(request, {
                skipHandleError: skipHandleError,
                apiName: this.apiName,
            });
        };
        return ProfileService;
    }());
    ProfileService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ProfileService_Factory() { return new ProfileService(i0__namespace.ɵɵinject(RestService)); }, token: ProfileService, providedIn: "root" });
    ProfileService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ProfileService.ctorParameters = function () { return [
        { type: RestService }
    ]; };

    exports.ɵbd = /** @class */ (function () {
        function ProfileState(profileService) {
            this.profileService = profileService;
        }
        ProfileState.getProfile = function (_a) {
            var profile = _a.profile;
            return profile;
        };
        ProfileState.prototype.getProfile = function (_a) {
            var patchState = _a.patchState;
            return this.profileService.get().pipe(operators.tap(function (profile) { return patchState({
                profile: profile,
            }); }));
        };
        ProfileState.prototype.updateProfile = function (_a, _b) {
            var patchState = _a.patchState;
            var payload = _b.payload;
            return this.profileService.update(payload).pipe(operators.tap(function (profile) { return patchState({
                profile: profile,
            }); }));
        };
        ProfileState.prototype.changePassword = function (_, _a) {
            var payload = _a.payload;
            return this.profileService.changePassword(payload, true);
        };
        return ProfileState;
    }());
    exports.ɵbd.decorators = [
        { type: i0.Injectable }
    ];
    exports.ɵbd.ctorParameters = function () { return [
        { type: ProfileService }
    ]; };
    __decorate([
        i4.Action(GetProfile)
    ], exports.ɵbd.prototype, "getProfile", null);
    __decorate([
        i4.Action(UpdateProfile)
    ], exports.ɵbd.prototype, "updateProfile", null);
    __decorate([
        i4.Action(ChangePassword)
    ], exports.ɵbd.prototype, "changePassword", null);
    __decorate([
        i4.Selector()
    ], exports.ɵbd, "getProfile", null);
    exports.ɵbd = __decorate([
        i4.State({
            name: 'ProfileState',
            defaults: {},
        })
    ], exports.ɵbd);

    var cookieKey = 'rememberMe';
    var storageKey = 'passwordFlow';
    function pipeToLogin(params, injector) {
        var configState = injector.get(ConfigStateService);
        var appConfigService = injector.get(AbpApplicationConfigurationService);
        var router = injector.get(i1.Router);
        return rxjs.pipe(operators.switchMap(function () { return appConfigService.get(); }), operators.tap(function (res) {
            configState.setState(res);
            setRememberMe(params.rememberMe);
            if (params.redirectUrl)
                router.navigate([params.redirectUrl]);
        }));
    }
    function setTokenResponseToStorage(injector, tokenRes) {
        var access_token = tokenRes.access_token, refresh_token = tokenRes.refresh_token, grantedScopes = tokenRes.scope, expires_in = tokenRes.expires_in;
        var storage = injector.get(i1$1.OAuthStorage);
        storage.setItem('access_token', access_token);
        storage.setItem('refresh_token', refresh_token);
        storage.setItem('access_token_stored_at', '' + Date.now());
        if (grantedScopes) {
            storage.setItem('granted_scopes', JSON.stringify(grantedScopes.split(' ')));
        }
        if (expires_in) {
            var expiresInMilliSeconds = expires_in * 1000;
            var now = new Date();
            var expiresAt = now.getTime() + expiresInMilliSeconds;
            storage.setItem('expires_at', '' + expiresAt);
        }
    }
    function setRememberMe(remember) {
        removeRememberMe();
        localStorage.setItem(storageKey, 'true');
        document.cookie = cookieKey + "=true; path=/" + (remember ? ' ;expires=Fri, 31 Dec 9999 23:59:59 GMT' : '');
    }
    function removeRememberMe() {
        localStorage.removeItem(storageKey);
        document.cookie = cookieKey + '= ; path=/; expires = Thu, 01 Jan 1970 00:00:00 GMT';
    }

    var oAuthStorage = localStorage;
    var AuthFlowStrategy = /** @class */ (function () {
        function AuthFlowStrategy(injector) {
            var _this = this;
            this.injector = injector;
            this.catchError = function (err) { return _this.store.dispatch(new RestOccurError(err)); };
            this.store = injector.get(i4.Store);
            this.environment = injector.get(EnvironmentService);
            this.configState = injector.get(ConfigStateService);
            this.oAuthService = injector.get(i1$1.OAuthService);
            this.appConfigService = injector.get(AbpApplicationConfigurationService);
            this.sessionState = injector.get(SessionStateService);
            this.oAuthConfig = this.environment.getEnvironment().oAuthConfig;
            this.tenantKey = injector.get(TENANT_KEY);
            this.listenToOauthErrors();
        }
        AuthFlowStrategy.prototype.init = function () {
            return __awaiter(this, void 0, void 0, function () {
                var shouldClear;
                var _this = this;
                return __generator(this, function (_a) {
                    shouldClear = shouldStorageClear(this.environment.getEnvironment().oAuthConfig.clientId, oAuthStorage);
                    if (shouldClear)
                        clearOAuthStorage(oAuthStorage);
                    this.oAuthService.configure(this.oAuthConfig);
                    return [2 /*return*/, this.oAuthService
                            .loadDiscoveryDocument()
                            .then(function () {
                            if (_this.oAuthService.hasValidAccessToken() || !_this.oAuthService.getRefreshToken()) {
                                return Promise.resolve();
                            }
                            return _this.refreshToken();
                        })
                            .catch(this.catchError)];
                });
            });
        };
        AuthFlowStrategy.prototype.refreshToken = function () {
            return this.oAuthService.refreshToken().catch(function () { return clearOAuthStorage(); });
        };
        AuthFlowStrategy.prototype.listenToOauthErrors = function () {
            var _this = this;
            this.oAuthService.events
                .pipe(operators.filter(function (event) { return event instanceof i1$1.OAuthErrorEvent; }), operators.tap(function () { return clearOAuthStorage(); }), operators.switchMap(function () { return _this.appConfigService.get(); }))
                .subscribe(function (res) {
                _this.configState.setState(res);
            });
        };
        return AuthFlowStrategy;
    }());
    var AuthCodeFlowStrategy = /** @class */ (function (_super_1) {
        __extends(AuthCodeFlowStrategy, _super_1);
        function AuthCodeFlowStrategy() {
            var _this = _super_1.apply(this, __spread(arguments)) || this;
            _this.isInternalAuth = false;
            return _this;
        }
        AuthCodeFlowStrategy.prototype.init = function () {
            var _super = Object.create(null, {
                init: { get: function () { return _super_1.prototype.init; } }
            });
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, _super.init.call(this)
                            .then(function () { return _this.oAuthService.tryLogin().catch(noop); })
                            .then(function () { return _this.oAuthService.setupAutomaticSilentRefresh({}, 'access_token'); })];
                });
            });
        };
        AuthCodeFlowStrategy.prototype.navigateToLogin = function (queryParams) {
            this.oAuthService.initCodeFlow('', this.getCultureParams(queryParams));
        };
        AuthCodeFlowStrategy.prototype.checkIfInternalAuth = function (queryParams) {
            this.oAuthService.initCodeFlow('', this.getCultureParams(queryParams));
            return false;
        };
        AuthCodeFlowStrategy.prototype.logout = function (queryParams) {
            return rxjs.from(this.oAuthService.revokeTokenAndLogout(this.getCultureParams(queryParams)));
        };
        AuthCodeFlowStrategy.prototype.login = function (queryParams) {
            this.oAuthService.initCodeFlow('', this.getCultureParams(queryParams));
            return rxjs.of(null);
        };
        AuthCodeFlowStrategy.prototype.getCultureParams = function (queryParams) {
            var lang = this.sessionState.getLanguage();
            var culture = { culture: lang, 'ui-culture': lang };
            return Object.assign(Object.assign({}, (lang && culture)), queryParams);
        };
        return AuthCodeFlowStrategy;
    }(AuthFlowStrategy));
    var AuthPasswordFlowStrategy = /** @class */ (function (_super_1) {
        __extends(AuthPasswordFlowStrategy, _super_1);
        function AuthPasswordFlowStrategy() {
            var _this = _super_1.apply(this, __spread(arguments)) || this;
            _this.isInternalAuth = true;
            _this.cookieKey = 'rememberMe';
            _this.storageKey = 'passwordFlow';
            return _this;
        }
        AuthPasswordFlowStrategy.prototype.listenToTokenExpiration = function () {
            var _this = this;
            this.oAuthService.events
                .pipe(operators.filter(function (event) { return event instanceof i1$1.OAuthInfoEvent &&
                event.type === 'token_expires' &&
                event.info === 'access_token'; }))
                .subscribe(function () {
                if (_this.oAuthService.getRefreshToken()) {
                    _this.refreshToken();
                }
                else {
                    _this.oAuthService.logOut();
                    removeRememberMe();
                    _this.appConfigService.get().subscribe(function (res) {
                        _this.configState.setState(res);
                    });
                }
            });
        };
        AuthPasswordFlowStrategy.prototype.init = function () {
            var _super = Object.create(null, {
                init: { get: function () { return _super_1.prototype.init; } }
            });
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (!getCookieValueByName(this.cookieKey) && localStorage.getItem(this.storageKey)) {
                        this.oAuthService.logOut();
                    }
                    return [2 /*return*/, _super.init.call(this).then(function () { return _this.listenToTokenExpiration(); })];
                });
            });
        };
        AuthPasswordFlowStrategy.prototype.navigateToLogin = function (queryParams) {
            var router = this.injector.get(i1.Router);
            router.navigate(['/account/login'], { queryParams: queryParams });
        };
        AuthPasswordFlowStrategy.prototype.checkIfInternalAuth = function () {
            return true;
        };
        AuthPasswordFlowStrategy.prototype.login = function (params) {
            var _a;
            var tenant = this.sessionState.getTenant();
            return rxjs.from(this.oAuthService.fetchTokenUsingPasswordFlow(params.username, params.password, new i2.HttpHeaders(Object.assign({}, (tenant && tenant.id && (_a = {}, _a[this.tenantKey] = tenant.id, _a)))))).pipe(this.pipeToLogin(params));
        };
        AuthPasswordFlowStrategy.prototype.pipeToLogin = function (params) {
            var _this = this;
            var router = this.injector.get(i1.Router);
            return rxjs.pipe(operators.switchMap(function () { return _this.appConfigService.get(); }), operators.tap(function (res) {
                _this.configState.setState(res);
                setRememberMe(params.rememberMe);
                if (params.redirectUrl)
                    router.navigate([params.redirectUrl]);
            }));
        };
        AuthPasswordFlowStrategy.prototype.logout = function (queryParams) {
            var _this = this;
            var router = this.injector.get(i1.Router);
            return rxjs.from(this.oAuthService.revokeTokenAndLogout(queryParams)).pipe(operators.switchMap(function () { return _this.appConfigService.get(); }), operators.tap(function (res) {
                _this.configState.setState(res);
                router.navigateByUrl('/');
                removeRememberMe();
            }));
        };
        AuthPasswordFlowStrategy.prototype.refreshToken = function () {
            return this.oAuthService.refreshToken().catch(function () {
                clearOAuthStorage();
                removeRememberMe();
            });
        };
        return AuthPasswordFlowStrategy;
    }(AuthFlowStrategy));
    var AUTH_FLOW_STRATEGY = {
        Code: function (injector) {
            return new AuthCodeFlowStrategy(injector);
        },
        Password: function (injector) {
            return new AuthPasswordFlowStrategy(injector);
        },
    };
    function clearOAuthStorage(storage) {
        if (storage === void 0) { storage = oAuthStorage; }
        var keys = [
            'access_token',
            'id_token',
            'refresh_token',
            'nonce',
            'PKCE_verifier',
            'expires_at',
            'id_token_claims_obj',
            'id_token_expires_at',
            'id_token_stored_at',
            'access_token_stored_at',
            'granted_scopes',
            'session_state',
        ];
        keys.forEach(function (key) { return storage.removeItem(key); });
    }
    function shouldStorageClear(clientId, storage) {
        var key = 'abpOAuthClientId';
        if (!storage.getItem(key)) {
            storage.setItem(key, clientId);
            return false;
        }
        var shouldClear = storage.getItem(key) !== clientId;
        if (shouldClear)
            storage.setItem(key, clientId);
        return shouldClear;
    }
    function getCookieValueByName(name) {
        var match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
        return match ? match[2] : '';
    }

    Date.prototype.toLocalISOString = function () {
        var timezoneOffset = this.getTimezoneOffset();
        return new Date(this.getTime() - timezoneOffset * 60000).toISOString();
    };

    var AuthService = /** @class */ (function () {
        function AuthService(injector) {
            this.injector = injector;
        }
        Object.defineProperty(AuthService.prototype, "isInternalAuth", {
            get: function () {
                return this.strategy.isInternalAuth;
            },
            enumerable: false,
            configurable: true
        });
        AuthService.prototype.init = function () {
            return __awaiter(this, void 0, void 0, function () {
                var environmentService;
                var _this = this;
                return __generator(this, function (_a) {
                    environmentService = this.injector.get(EnvironmentService);
                    return [2 /*return*/, environmentService
                            .getEnvironment$()
                            .pipe(operators.map(function (env) { return env === null || env === void 0 ? void 0 : env.oAuthConfig; }), operators.filter(function (oAuthConfig) { return !!oAuthConfig; }), operators.tap(function (oAuthConfig) {
                            _this.strategy =
                                oAuthConfig.responseType === 'code'
                                    ? AUTH_FLOW_STRATEGY.Code(_this.injector)
                                    : AUTH_FLOW_STRATEGY.Password(_this.injector);
                        }), operators.switchMap(function () { return rxjs.from(_this.strategy.init()); }), operators.take(1))
                            .toPromise()];
                });
            });
        };
        AuthService.prototype.logout = function (queryParams) {
            return this.strategy.logout(queryParams);
        };
        /**
         * @deprecated Use navigateToLogin method instead. To be deleted in v5.0
         */
        AuthService.prototype.initLogin = function () {
            this.strategy.navigateToLogin();
        };
        AuthService.prototype.navigateToLogin = function (queryParams) {
            this.strategy.navigateToLogin(queryParams);
        };
        AuthService.prototype.login = function (params) {
            return this.strategy.login(params);
        };
        return AuthService;
    }());
    AuthService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function AuthService_Factory() { return new AuthService(i0__namespace.ɵɵinject(i0__namespace.INJECTOR)); }, token: AuthService, providedIn: "root" });
    AuthService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AuthService.ctorParameters = function () { return [
        { type: i0.Injector }
    ]; };

    var APP_INIT_ERROR_HANDLERS = new i0.InjectionToken('APP_INIT_ERROR_HANDLERS');

    function getRemoteEnv(injector, environment) {
        var environmentService = injector.get(EnvironmentService);
        var remoteEnv = environment.remoteEnv;
        var _a = remoteEnv || {}, _b = _a.headers, headers = _b === void 0 ? {} : _b, _c = _a.method, method = _c === void 0 ? 'GET' : _c, url = _a.url;
        if (!url)
            return Promise.resolve();
        var http = injector.get(i2.HttpClient);
        var store = injector.get(i4.Store);
        return http
            .request(method, url, { headers: headers })
            .pipe(operators.catchError(function (err) { return store.dispatch(new RestOccurError(err)); }), // TODO: Condiser get handle function from a provider
        operators.tap(function (env) { return environmentService.setState(mergeEnvironments(environment, env, remoteEnv)); }))
            .toPromise();
    }
    function mergeEnvironments(local, remote, config) {
        switch (config.mergeStrategy) {
            case 'deepmerge':
                return deepMerge(local, remote);
            case 'overwrite':
            case null:
            case undefined:
                return remote;
            default:
                return config.mergeStrategy(local, remote);
        }
    }

    var AbpTenantService = /** @class */ (function () {
        function AbpTenantService(restService) {
            var _this = this;
            this.restService = restService;
            this.apiName = 'abp';
            this.findTenantById = function (id, headers) { return _this.restService.request({
                method: 'GET',
                url: "/api/abp/multi-tenancy/tenants/by-id/" + id,
                headers: headers,
            }, { apiName: _this.apiName }); };
            this.findTenantByName = function (name, headers) { return _this.restService.request({
                method: 'GET',
                url: "/api/abp/multi-tenancy/tenants/by-name/" + name,
                headers: headers,
            }, { apiName: _this.apiName }); };
        }
        return AbpTenantService;
    }());
    AbpTenantService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function AbpTenantService_Factory() { return new AbpTenantService(i0__namespace.ɵɵinject(RestService)); }, token: AbpTenantService, providedIn: "root" });
    AbpTenantService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AbpTenantService.ctorParameters = function () { return [
        { type: RestService }
    ]; };

    var MultiTenancyService = /** @class */ (function () {
        function MultiTenancyService(restService, sessionState, tenantService, configStateService, tenantKey) {
            var _this = this;
            this.restService = restService;
            this.sessionState = sessionState;
            this.tenantService = tenantService;
            this.configStateService = configStateService;
            this.tenantKey = tenantKey;
            this.domainTenant = null;
            this.isTenantBoxVisible = true;
            this.apiName = 'abp';
            this.setTenantToState = function (tenant) {
                _this.sessionState.setTenant({ id: tenant.tenantId, name: tenant.name, isAvailable: true });
                return _this.configStateService.refreshAppState().pipe(operators.map(function (_) { return tenant; }));
            };
        }
        /**
         * @deprecated Use AbpTenantService.findTenantByName method instead. To be deleted in v5.0.
         */
        MultiTenancyService.prototype.findTenantByName = function (name, headers) {
            return this.restService.request({
                url: "/api/abp/multi-tenancy/tenants/by-name/" + name,
                method: 'GET',
                headers: headers,
            }, { apiName: this.apiName });
        };
        /**
         * @deprecated Use AbpTenantService.findTenantById method instead. To be deleted in v5.0.
         */
        MultiTenancyService.prototype.findTenantById = function (id, headers) {
            return this.restService.request({ url: "/api/abp/multi-tenancy/tenants/by-id/" + id, method: 'GET', headers: headers }, { apiName: this.apiName });
        };
        MultiTenancyService.prototype.setTenantByName = function (tenantName) {
            var _a;
            return this.tenantService
                .findTenantByName(tenantName, (_a = {}, _a[this.tenantKey] = '', _a))
                .pipe(operators.switchMap(this.setTenantToState));
        };
        MultiTenancyService.prototype.setTenantById = function (tenantId) {
            var _a;
            return this.tenantService
                .findTenantById(tenantId, (_a = {}, _a[this.tenantKey] = '', _a))
                .pipe(operators.switchMap(this.setTenantToState));
        };
        return MultiTenancyService;
    }());
    MultiTenancyService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function MultiTenancyService_Factory() { return new MultiTenancyService(i0__namespace.ɵɵinject(RestService), i0__namespace.ɵɵinject(SessionStateService), i0__namespace.ɵɵinject(AbpTenantService), i0__namespace.ɵɵinject(ConfigStateService), i0__namespace.ɵɵinject(TENANT_KEY)); }, token: MultiTenancyService, providedIn: "root" });
    MultiTenancyService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    MultiTenancyService.ctorParameters = function () { return [
        { type: RestService },
        { type: SessionStateService },
        { type: AbpTenantService },
        { type: ConfigStateService },
        { type: String, decorators: [{ type: i0.Inject, args: [TENANT_KEY,] }] }
    ]; };

    var tenancyPlaceholder = '{0}';
    function getCurrentTenancyName(appBaseUrl) {
        var _a;
        if (appBaseUrl.charAt(appBaseUrl.length - 1) !== '/')
            appBaseUrl += '/';
        var parseTokens = createTokenParser(appBaseUrl);
        var token = tenancyPlaceholder.replace(/[}{]/g, '');
        return (_a = parseTokens(window.location.href)[token]) === null || _a === void 0 ? void 0 : _a[0];
    }
    function getCurrentTenancyNameFromUrl(tenantKey) {
        var urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(tenantKey);
    }
    function parseTenantFromUrl(injector) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var environmentService, multiTenancyService, baseUrl, tenancyName, hideTenantBox, setDomainTenant, setEnvironmentWithDomainTenant, tenantIdFromQueryParams;
            return __generator(this, function (_c) {
                environmentService = injector.get(EnvironmentService);
                multiTenancyService = injector.get(MultiTenancyService);
                baseUrl = ((_b = (_a = environmentService.getEnvironment()) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.baseUrl) || '';
                tenancyName = getCurrentTenancyName(baseUrl);
                hideTenantBox = function () {
                    multiTenancyService.isTenantBoxVisible = false;
                };
                setDomainTenant = function (tenant) {
                    multiTenancyService.domainTenant = {
                        id: tenant.tenantId,
                        name: tenant.name,
                        isAvailable: true,
                    };
                };
                setEnvironmentWithDomainTenant = function (tenant) {
                    hideTenantBox();
                    setDomainTenant(tenant);
                    replaceTenantNameWithinEnvironment(injector, tenant.name);
                };
                if (tenancyName) {
                    return [2 /*return*/, multiTenancyService
                            .setTenantByName(tenancyName)
                            .pipe(operators.tap(setEnvironmentWithDomainTenant))
                            .toPromise()];
                }
                else {
                    /**
                     * If there is no tenant, we still have to clean up {0}. from baseUrl to avoid incorrect http requests.
                     */
                    replaceTenantNameWithinEnvironment(injector, '', tenancyPlaceholder + '.');
                    tenantIdFromQueryParams = getCurrentTenancyNameFromUrl(multiTenancyService.tenantKey);
                    if (tenantIdFromQueryParams) {
                        return [2 /*return*/, multiTenancyService.setTenantById(tenantIdFromQueryParams).toPromise()];
                    }
                }
                return [2 /*return*/, Promise.resolve()];
            });
        });
    }
    function replaceTenantNameWithinEnvironment(injector, tenancyName, placeholder) {
        if (placeholder === void 0) { placeholder = tenancyPlaceholder; }
        var environmentService = injector.get(EnvironmentService);
        var environment = clone__default['default'](environmentService.getEnvironment());
        if (environment.application.baseUrl) {
            environment.application.baseUrl = environment.application.baseUrl.replace(placeholder, tenancyName);
        }
        if (environment.oAuthConfig.redirectUri) {
            environment.oAuthConfig.redirectUri = environment.oAuthConfig.redirectUri.replace(placeholder, tenancyName);
        }
        environment.oAuthConfig.issuer = environment.oAuthConfig.issuer.replace(placeholder, tenancyName);
        Object.keys(environment.apis).forEach(function (api) {
            Object.keys(environment.apis[api]).forEach(function (key) {
                environment.apis[api][key] = environment.apis[api][key].replace(placeholder, tenancyName);
            });
        });
        return environmentService.setState(environment);
    }

    function getInitialData(injector) {
        var _this = this;
        var fn = function () { return __awaiter(_this, void 0, void 0, function () {
            var environmentService, configState, appConfigService, options;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        environmentService = injector.get(EnvironmentService);
                        configState = injector.get(ConfigStateService);
                        appConfigService = injector.get(AbpApplicationConfigurationService);
                        options = injector.get(CORE_OPTIONS);
                        environmentService.setState(options.environment);
                        return [4 /*yield*/, getRemoteEnv(injector, options.environment)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, parseTenantFromUrl(injector)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, injector.get(AuthService).init()];
                    case 3:
                        _a.sent();
                        if (options.skipGetAppConfiguration)
                            return [2 /*return*/];
                        return [2 /*return*/, appConfigService
                                .get()
                                .pipe(operators.tap(function (res) { return configState.setState(res); }), operators.tap(function () { return checkAccessToken(injector); }), operators.tap(function () {
                                var currentTenant = configState.getOne('currentTenant');
                                injector.get(SessionStateService).setTenant(currentTenant);
                            }), operators.catchError(function (error) {
                                var appInitErrorHandlers = injector.get(APP_INIT_ERROR_HANDLERS, null);
                                if (appInitErrorHandlers && appInitErrorHandlers.length) {
                                    appInitErrorHandlers.forEach(function (func) { return func(error); });
                                }
                                return rxjs.throwError(error);
                            }))
                                .toPromise()];
                }
            });
        }); };
        return fn;
    }
    function checkAccessToken(injector) {
        var configState = injector.get(ConfigStateService);
        var oAuth = injector.get(i1$1.OAuthService);
        if (oAuth.hasValidAccessToken() && !configState.getDeep('currentUser.id')) {
            clearOAuthStorage();
        }
    }
    function localeInitializer(injector) {
        var fn = function () {
            var sessionState = injector.get(SessionStateService);
            var registerLocaleFn = injector.get(CORE_OPTIONS).registerLocaleFn;
            var lang = sessionState.getLanguage() || 'en';
            return new Promise(function (resolve, reject) {
                registerLocaleFn(lang).then(function (module) {
                    if (module === null || module === void 0 ? void 0 : module.default)
                        common.registerLocaleData(module.default);
                    return resolve('resolved');
                }, reject);
            });
        };
        return fn;
    }

    function storageFactory() {
        return oAuthStorage;
    }
    /**
     * BaseCoreModule is the module that holds
     * all imports, declarations, exports, and entryComponents
     * but not the providers.
     * This module will be imported and exported by all others.
     */
    var BaseCoreModule = /** @class */ (function () {
        function BaseCoreModule() {
        }
        return BaseCoreModule;
    }());
    BaseCoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    exports: [
                        common.CommonModule,
                        i2.HttpClientModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        i1.RouterModule,
                        LocalizationModule,
                        AbstractNgModelComponent,
                        AutofocusDirective,
                        DynamicLayoutComponent,
                        ForDirective,
                        FormSubmitDirective,
                        InitDirective,
                        InputEventDebounceDirective,
                        PermissionDirective,
                        ReplaceableRouteContainerComponent,
                        ReplaceableTemplateDirective,
                        RouterOutletComponent,
                        SortPipe,
                        StopPropagationDirective,
                        VisibilityDirective,
                    ],
                    imports: [
                        i1$1.OAuthModule,
                        common.CommonModule,
                        i2.HttpClientModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        i1.RouterModule,
                        LocalizationModule,
                    ],
                    declarations: [
                        AbstractNgModelComponent,
                        AutofocusDirective,
                        DynamicLayoutComponent,
                        ForDirective,
                        FormSubmitDirective,
                        InitDirective,
                        InputEventDebounceDirective,
                        PermissionDirective,
                        ReplaceableRouteContainerComponent,
                        ReplaceableTemplateDirective,
                        RouterOutletComponent,
                        SortPipe,
                        StopPropagationDirective,
                        VisibilityDirective,
                    ],
                    providers: [LocalizationPipe],
                    entryComponents: [
                        RouterOutletComponent,
                        DynamicLayoutComponent,
                        ReplaceableRouteContainerComponent,
                    ],
                },] }
    ];
    /**
     * RootCoreModule is the module that will be used at root level
     * and it introduces imports useful at root level (e.g. NGXS)
     */
    var RootCoreModule = /** @class */ (function () {
        function RootCoreModule() {
        }
        return RootCoreModule;
    }());
    RootCoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    exports: [BaseCoreModule, LocalizationModule],
                    imports: [
                        BaseCoreModule,
                        LocalizationModule,
                        i4.NgxsModule.forFeature([exports.ɵbd]),
                        i1$1.OAuthModule.forRoot(),
                        i2.HttpClientXsrfModule.withOptions({
                            cookieName: 'XSRF-TOKEN',
                            headerName: 'RequestVerificationToken',
                        }),
                    ],
                },] }
    ];
    /**
     * CoreModule is the module that is publicly available
     */
    var CoreModule = /** @class */ (function () {
        function CoreModule() {
        }
        CoreModule.forRoot = function (options) {
            if (options === void 0) { options = {}; }
            return {
                ngModule: RootCoreModule,
                providers: [
                    LocaleProvider,
                    {
                        provide: 'CORE_OPTIONS',
                        useValue: options,
                    },
                    {
                        provide: CORE_OPTIONS,
                        useFactory: coreOptionsFactory,
                        deps: ['CORE_OPTIONS'],
                    },
                    {
                        provide: i2.HTTP_INTERCEPTORS,
                        useExisting: ApiInterceptor,
                        multi: true,
                    },
                    {
                        provide: i0.APP_INITIALIZER,
                        multi: true,
                        deps: [OAuthConfigurationHandler],
                        useFactory: noop,
                    },
                    {
                        provide: i0.APP_INITIALIZER,
                        multi: true,
                        deps: [i0.Injector],
                        useFactory: getInitialData,
                    },
                    {
                        provide: i0.APP_INITIALIZER,
                        multi: true,
                        deps: [i0.Injector],
                        useFactory: localeInitializer,
                    },
                    {
                        provide: i0.APP_INITIALIZER,
                        multi: true,
                        deps: [LocalizationService],
                        useFactory: noop,
                    },
                    {
                        provide: i0.APP_INITIALIZER,
                        multi: true,
                        deps: [RoutesHandler],
                        useFactory: noop,
                    },
                    { provide: i1$1.OAuthStorage, useFactory: storageFactory },
                    { provide: TENANT_KEY, useValue: options.tenantKey || '__tenant' },
                ],
            };
        };
        return CoreModule;
    }());
    CoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    exports: [BaseCoreModule],
                    imports: [BaseCoreModule],
                },] }
    ];
    function ngxsStoragePluginSerialize(data) {
        return data;
    }

    var AuthGuard = /** @class */ (function () {
        function AuthGuard(oauthService, authService) {
            this.oauthService = oauthService;
            this.authService = authService;
        }
        AuthGuard.prototype.canActivate = function () {
            var hasValidAccessToken = this.oauthService.hasValidAccessToken();
            if (hasValidAccessToken) {
                return true;
            }
            this.authService.navigateToLogin();
            return false;
        };
        return AuthGuard;
    }());
    AuthGuard.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function AuthGuard_Factory() { return new AuthGuard(i0__namespace.ɵɵinject(i1__namespace$1.OAuthService), i0__namespace.ɵɵinject(AuthService)); }, token: AuthGuard, providedIn: "root" });
    AuthGuard.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AuthGuard.ctorParameters = function () { return [
        { type: i1$1.OAuthService },
        { type: AuthService }
    ]; };

    var PermissionGuard = /** @class */ (function () {
        function PermissionGuard(router, routesService, store, permissionService) {
            this.router = router;
            this.routesService = routesService;
            this.store = store;
            this.permissionService = permissionService;
        }
        PermissionGuard.prototype.canActivate = function (route, state) {
            var _this = this;
            var requiredPolicy = (route.data || {}).requiredPolicy;
            if (!requiredPolicy) {
                var routeFound = findRoute(this.routesService, getRoutePath(this.router, state.url));
                requiredPolicy = routeFound === null || routeFound === void 0 ? void 0 : routeFound.requiredPolicy;
            }
            if (!requiredPolicy)
                return rxjs.of(true);
            return this.permissionService.getGrantedPolicy$(requiredPolicy).pipe(operators.tap(function (access) {
                if (!access) {
                    _this.store.dispatch(new RestOccurError({ status: 403 }));
                }
            }));
        };
        return PermissionGuard;
    }());
    PermissionGuard.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PermissionGuard_Factory() { return new PermissionGuard(i0__namespace.ɵɵinject(i1__namespace.Router), i0__namespace.ɵɵinject(RoutesService), i0__namespace.ɵɵinject(i4__namespace.Store), i0__namespace.ɵɵinject(PermissionService)); }, token: PermissionGuard, providedIn: "root" });
    PermissionGuard.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PermissionGuard.ctorParameters = function () { return [
        { type: i1.Router },
        { type: RoutesService },
        { type: i4.Store },
        { type: PermissionService }
    ]; };

    var ListResultDto = /** @class */ (function () {
        function ListResultDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            for (var key in initialValues) {
                if (initialValues.hasOwnProperty(key)) {
                    this[key] = initialValues[key];
                }
            }
        }
        return ListResultDto;
    }());
    var PagedResultDto = /** @class */ (function (_super) {
        __extends(PagedResultDto, _super);
        function PagedResultDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return PagedResultDto;
    }(ListResultDto));
    var LimitedResultRequestDto = /** @class */ (function () {
        function LimitedResultRequestDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            this.maxResultCount = 10;
            for (var key in initialValues) {
                if (initialValues.hasOwnProperty(key) && initialValues[key] !== undefined) {
                    this[key] = initialValues[key];
                }
            }
        }
        return LimitedResultRequestDto;
    }());
    var PagedResultRequestDto = /** @class */ (function (_super) {
        __extends(PagedResultRequestDto, _super);
        function PagedResultRequestDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return PagedResultRequestDto;
    }(LimitedResultRequestDto));
    var PagedAndSortedResultRequestDto = /** @class */ (function (_super) {
        __extends(PagedAndSortedResultRequestDto, _super);
        function PagedAndSortedResultRequestDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return PagedAndSortedResultRequestDto;
    }(PagedResultRequestDto));
    var EntityDto = /** @class */ (function () {
        function EntityDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            for (var key in initialValues) {
                if (initialValues.hasOwnProperty(key)) {
                    this[key] = initialValues[key];
                }
            }
        }
        return EntityDto;
    }());
    var CreationAuditedEntityDto = /** @class */ (function (_super) {
        __extends(CreationAuditedEntityDto, _super);
        function CreationAuditedEntityDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return CreationAuditedEntityDto;
    }(EntityDto));
    var CreationAuditedEntityWithUserDto = /** @class */ (function (_super) {
        __extends(CreationAuditedEntityWithUserDto, _super);
        function CreationAuditedEntityWithUserDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return CreationAuditedEntityWithUserDto;
    }(CreationAuditedEntityDto));
    var AuditedEntityDto = /** @class */ (function (_super) {
        __extends(AuditedEntityDto, _super);
        function AuditedEntityDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return AuditedEntityDto;
    }(CreationAuditedEntityDto));
    var AuditedEntityWithUserDto = /** @class */ (function (_super) {
        __extends(AuditedEntityWithUserDto, _super);
        function AuditedEntityWithUserDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return AuditedEntityWithUserDto;
    }(AuditedEntityDto));
    var FullAuditedEntityDto = /** @class */ (function (_super) {
        __extends(FullAuditedEntityDto, _super);
        function FullAuditedEntityDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return FullAuditedEntityDto;
    }(AuditedEntityDto));
    var FullAuditedEntityWithUserDto = /** @class */ (function (_super) {
        __extends(FullAuditedEntityWithUserDto, _super);
        function FullAuditedEntityWithUserDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return FullAuditedEntityWithUserDto;
    }(FullAuditedEntityDto));
    var ExtensibleObject = /** @class */ (function () {
        function ExtensibleObject(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            for (var key in initialValues) {
                if (initialValues.hasOwnProperty(key)) {
                    this[key] = initialValues[key];
                }
            }
        }
        return ExtensibleObject;
    }());
    var ExtensibleEntityDto = /** @class */ (function (_super) {
        __extends(ExtensibleEntityDto, _super);
        function ExtensibleEntityDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return ExtensibleEntityDto;
    }(ExtensibleObject));
    var ExtensibleCreationAuditedEntityDto = /** @class */ (function (_super) {
        __extends(ExtensibleCreationAuditedEntityDto, _super);
        function ExtensibleCreationAuditedEntityDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return ExtensibleCreationAuditedEntityDto;
    }(ExtensibleEntityDto));
    var ExtensibleAuditedEntityDto = /** @class */ (function (_super) {
        __extends(ExtensibleAuditedEntityDto, _super);
        function ExtensibleAuditedEntityDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return ExtensibleAuditedEntityDto;
    }(ExtensibleCreationAuditedEntityDto));
    var ExtensibleAuditedEntityWithUserDto = /** @class */ (function (_super) {
        __extends(ExtensibleAuditedEntityWithUserDto, _super);
        function ExtensibleAuditedEntityWithUserDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return ExtensibleAuditedEntityWithUserDto;
    }(ExtensibleAuditedEntityDto));
    var ExtensibleCreationAuditedEntityWithUserDto = /** @class */ (function (_super) {
        __extends(ExtensibleCreationAuditedEntityWithUserDto, _super);
        function ExtensibleCreationAuditedEntityWithUserDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return ExtensibleCreationAuditedEntityWithUserDto;
    }(ExtensibleCreationAuditedEntityDto));
    var ExtensibleFullAuditedEntityDto = /** @class */ (function (_super) {
        __extends(ExtensibleFullAuditedEntityDto, _super);
        function ExtensibleFullAuditedEntityDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return ExtensibleFullAuditedEntityDto;
    }(ExtensibleAuditedEntityDto));
    var ExtensibleFullAuditedEntityWithUserDto = /** @class */ (function (_super) {
        __extends(ExtensibleFullAuditedEntityWithUserDto, _super);
        function ExtensibleFullAuditedEntityWithUserDto(initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return _super.call(this, initialValues) || this;
        }
        return ExtensibleFullAuditedEntityWithUserDto;
    }(ExtensibleFullAuditedEntityDto));

    /**
     * @deprecated Use AbpApplicationConfigurationService instead. To be deleted in v5.0.
     */
    var ApplicationConfigurationService = /** @class */ (function () {
        function ApplicationConfigurationService(rest) {
            this.rest = rest;
        }
        ApplicationConfigurationService.prototype.getConfiguration = function () {
            var request = {
                method: 'GET',
                url: '/api/abp/application-configuration',
            };
            return this.rest.request(request, {});
        };
        return ApplicationConfigurationService;
    }());
    ApplicationConfigurationService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ApplicationConfigurationService_Factory() { return new ApplicationConfigurationService(i0__namespace.ɵɵinject(RestService)); }, token: ApplicationConfigurationService, providedIn: "root" });
    ApplicationConfigurationService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ApplicationConfigurationService.ctorParameters = function () { return [
        { type: RestService }
    ]; };

    var ContentProjectionService = /** @class */ (function () {
        function ContentProjectionService(injector) {
            this.injector = injector;
        }
        ContentProjectionService.prototype.projectContent = function (projectionStrategy, injector) {
            if (injector === void 0) { injector = this.injector; }
            return projectionStrategy.injectContent(injector);
        };
        return ContentProjectionService;
    }());
    ContentProjectionService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ContentProjectionService_Factory() { return new ContentProjectionService(i0__namespace.ɵɵinject(i0__namespace.INJECTOR)); }, token: ContentProjectionService, providedIn: "root" });
    ContentProjectionService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ContentProjectionService.ctorParameters = function () { return [
        { type: i0.Injector }
    ]; };

    function getShortDateFormat(configStateService) {
        var dateTimeFormat = configStateService.getDeep('localization.currentCulture.dateTimeFormat');
        return dateTimeFormat.shortDatePattern;
    }
    function getShortTimeFormat(configStateService) {
        var dateTimeFormat = configStateService.getDeep('localization.currentCulture.dateTimeFormat');
        return dateTimeFormat.shortTimePattern.replace('tt', 'a');
    }
    function getShortDateShortTimeFormat(configStateService) {
        var dateTimeFormat = configStateService.getDeep('localization.currentCulture.dateTimeFormat');
        return dateTimeFormat.shortDatePattern + " " + dateTimeFormat.shortTimePattern.replace('tt', 'a');
    }

    var LazyModuleFactory = /** @class */ (function (_super) {
        __extends(LazyModuleFactory, _super);
        function LazyModuleFactory(moduleWithProviders) {
            var _this = _super.call(this) || this;
            _this.moduleWithProviders = moduleWithProviders;
            return _this;
        }
        Object.defineProperty(LazyModuleFactory.prototype, "moduleType", {
            get: function () {
                return this.moduleWithProviders.ngModule;
            },
            enumerable: false,
            configurable: true
        });
        LazyModuleFactory.prototype.create = function (parentInjector) {
            var injector = i0.Injector.create({
                parent: parentInjector,
                providers: this.moduleWithProviders.providers,
            });
            var compiler = injector.get(i0.Compiler);
            var factory = compiler.compileModuleSync(this.moduleType);
            return factory.create(injector);
        };
        return LazyModuleFactory;
    }(i0.NgModuleFactory));
    function featuresFactory(configState, featureKeys, mapFn) {
        if (mapFn === void 0) { mapFn = function (features) { return features; }; }
        return configState.getFeatures$(featureKeys).pipe(operators.filter(Boolean), operators.map(mapFn));
    }

    function downloadBlob(blob, filename) {
        var blobUrl = URL.createObjectURL(blob);
        var link = document.createElement('a');
        link.href = blobUrl;
        link.download = filename;
        document.body.appendChild(link);
        link.dispatchEvent(new MouseEvent('click', {
            bubbles: true,
            cancelable: true,
            view: window,
        }));
        document.body.removeChild(link);
    }

    function isNumber(value) {
        /* tslint:disable-next-line:triple-equals */
        return value == Number(value);
    }

    function mapEnumToOptions(_enum) {
        var options = [];
        for (var member in _enum)
            if (!isNumber(member))
                options.push({
                    key: member,
                    value: _enum[member],
                });
        return options;
    }

    // tslint:disable: no-bitwise
    function uuid(a) {
        return a
            ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)
            : ('' + 1e7 + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid);
    }
    function generateHash(value) {
        var hashed = 0;
        var charCode;
        for (var i = 0; i < value.length; i++) {
            charCode = value.charCodeAt(i);
            hashed = (hashed << 5) - hashed + charCode;
            hashed |= 0;
        }
        return hashed;
    }
    function generatePassword(length) {
        if (length === void 0) { length = 8; }
        length = Math.min(Math.max(4, length), 128);
        var lowers = 'abcdefghijklmnopqrstuvwxyz';
        var uppers = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        var numbers = '0123456789';
        var specials = '!@#$%&*()_+{}<>?[]./';
        var all = lowers + uppers + numbers + specials;
        var getRandom = function (chrSet) { return chrSet[Math.floor(Math.random() * chrSet.length)]; };
        var password = Array({ length: length });
        password[0] = getRandom(lowers);
        password[1] = getRandom(uppers);
        password[2] = getRandom(numbers);
        password[3] = getRandom(specials);
        for (var i = 4; i < length; i++) {
            password[i] = getRandom(all);
        }
        return password.sort(function () { return 0.5 - Math.random(); }).join('');
    }

    var CrossOriginStrategy = /** @class */ (function () {
        function CrossOriginStrategy(crossorigin, integrity) {
            this.crossorigin = crossorigin;
            this.integrity = integrity;
        }
        CrossOriginStrategy.prototype.setCrossOrigin = function (element) {
            if (this.integrity)
                element.setAttribute('integrity', this.integrity);
            element.setAttribute('crossorigin', this.crossorigin);
        };
        return CrossOriginStrategy;
    }());
    var NoCrossOriginStrategy = /** @class */ (function (_super) {
        __extends(NoCrossOriginStrategy, _super);
        function NoCrossOriginStrategy() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NoCrossOriginStrategy.prototype.setCrossOrigin = function () { };
        return NoCrossOriginStrategy;
    }(CrossOriginStrategy));
    var CROSS_ORIGIN_STRATEGY = {
        Anonymous: function (integrity) {
            return new CrossOriginStrategy('anonymous', integrity);
        },
        UseCredentials: function (integrity) {
            return new CrossOriginStrategy('use-credentials', integrity);
        },
        None: function () {
            return new NoCrossOriginStrategy(null);
        },
    };

    var DomStrategy = /** @class */ (function () {
        function DomStrategy(target, position) {
            if (target === void 0) { target = document.head; }
            if (position === void 0) { position = 'beforeend'; }
            this.target = target;
            this.position = position;
        }
        DomStrategy.prototype.insertElement = function (element) {
            this.target.insertAdjacentElement(this.position, element);
        };
        return DomStrategy;
    }());
    var DOM_STRATEGY = {
        AfterElement: function (element) {
            return new DomStrategy(element, 'afterend');
        },
        AppendToBody: function () {
            return new DomStrategy(document.body, 'beforeend');
        },
        AppendToHead: function () {
            return new DomStrategy(document.head, 'beforeend');
        },
        BeforeElement: function (element) {
            return new DomStrategy(element, 'beforebegin');
        },
        PrependToHead: function () {
            return new DomStrategy(document.head, 'afterbegin');
        },
    };

    function fromLazyLoad(element, domStrategy, crossOriginStrategy) {
        if (domStrategy === void 0) { domStrategy = DOM_STRATEGY.AppendToHead(); }
        if (crossOriginStrategy === void 0) { crossOriginStrategy = CROSS_ORIGIN_STRATEGY.Anonymous(); }
        crossOriginStrategy.setCrossOrigin(element);
        domStrategy.insertElement(element);
        return new rxjs.Observable(function (observer) {
            element.onload = function (event) {
                clearCallbacks(element);
                observer.next(event);
                observer.complete();
            };
            var handleError = createErrorHandler(observer, element);
            element.onerror = handleError;
            element.onabort = handleError;
            element.onemptied = handleError;
            element.onstalled = handleError;
            element.onsuspend = handleError;
            return function () {
                clearCallbacks(element);
                observer.complete();
            };
        });
    }
    function createErrorHandler(observer, element) {
        /* tslint:disable-next-line:only-arrow-functions */
        return function (event) {
            clearCallbacks(element);
            element.parentNode.removeChild(element);
            observer.error(event);
        };
    }
    function clearCallbacks(element) {
        element.onload = null;
        element.onerror = null;
        element.onabort = null;
        element.onemptied = null;
        element.onstalled = null;
        element.onsuspend = null;
    }

    // tslint:disable: max-line-length
    function isFunction(value) {
        return typeof value === 'function';
    }
    /**
     * @deprecated no longer working, please use SubscriptionService (https://docs.abp.io/en/abp/latest/UI/Angular/Subscription-Service) instead.
     */
    var takeUntilDestroy = function (componentInstance, destroyMethodName) {
        if (destroyMethodName === void 0) { destroyMethodName = 'ngOnDestroy'; }
        return function (source) {
            var originalDestroy = componentInstance[destroyMethodName];
            if (isFunction(originalDestroy) === false) {
                throw new Error(componentInstance.constructor.name + " is using untilDestroyed but doesn't implement " + destroyMethodName);
            }
            if (!componentInstance['__takeUntilDestroy']) {
                componentInstance['__takeUntilDestroy'] = new rxjs.Subject();
                componentInstance[destroyMethodName] = function () {
                    // tslint:disable-next-line: no-unused-expression
                    isFunction(originalDestroy) && originalDestroy.apply(this, arguments);
                    componentInstance['__takeUntilDestroy'].next(true);
                    componentInstance['__takeUntilDestroy'].complete();
                };
            }
            return source.pipe(operators.takeUntil(componentInstance['__takeUntilDestroy']));
        };
    };

    var DomInsertionService = /** @class */ (function () {
        function DomInsertionService() {
            this.inserted = new Set();
        }
        DomInsertionService.prototype.insertContent = function (contentStrategy) {
            var hash = generateHash(contentStrategy.content);
            if (this.inserted.has(hash))
                return;
            var element = contentStrategy.insertElement();
            this.inserted.add(hash);
            return element;
        };
        DomInsertionService.prototype.removeContent = function (element) {
            var hash = generateHash(element.textContent);
            this.inserted.delete(hash);
            element.parentNode.removeChild(element);
        };
        DomInsertionService.prototype.has = function (content) {
            var hash = generateHash(content);
            return this.inserted.has(hash);
        };
        return DomInsertionService;
    }());
    DomInsertionService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function DomInsertionService_Factory() { return new DomInsertionService(); }, token: DomInsertionService, providedIn: "root" });
    DomInsertionService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    var ResourceWaitService = /** @class */ (function () {
        function ResourceWaitService() {
            this.store = new InternalStore({ resources: new Set() });
        }
        ResourceWaitService.prototype.getLoading = function () {
            return !!this.store.state.resources.size;
        };
        ResourceWaitService.prototype.getLoading$ = function () {
            return this.store.sliceState(function (_a) {
                var resources = _a.resources;
                return !!resources.size;
            });
        };
        ResourceWaitService.prototype.updateLoading$ = function () {
            return this.store.sliceUpdate(function (_a) {
                var resources = _a.resources;
                return !!resources.size;
            });
        };
        ResourceWaitService.prototype.clearLoading = function () {
            this.store.patch({ resources: new Set() });
        };
        ResourceWaitService.prototype.addResource = function (resource) {
            var resources = this.store.state.resources;
            resources.add(resource);
            this.store.patch({ resources: resources });
        };
        ResourceWaitService.prototype.deleteResource = function (resource) {
            var resources = this.store.state.resources;
            resources.delete(resource);
            this.store.patch({ resources: resources });
        };
        return ResourceWaitService;
    }());
    ResourceWaitService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ResourceWaitService_Factory() { return new ResourceWaitService(); }, token: ResourceWaitService, providedIn: "root" });
    ResourceWaitService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var LazyLoadService = /** @class */ (function () {
        function LazyLoadService(resourceWaitService) {
            this.resourceWaitService = resourceWaitService;
            this.loaded = new Map();
        }
        LazyLoadService.prototype.load = function (strategy, retryTimes, retryDelay) {
            var _this = this;
            if (this.loaded.has(strategy.path))
                return rxjs.of(new CustomEvent('load'));
            this.resourceWaitService.addResource(strategy.path);
            return strategy.createStream().pipe(operators.retryWhen(function (error$) { return rxjs.concat(error$.pipe(operators.delay(retryDelay), operators.take(retryTimes)), rxjs.throwError(new CustomEvent('error'))); }), operators.tap(function () {
                _this.loaded.set(strategy.path, strategy.element);
                _this.resourceWaitService.deleteResource(strategy.path);
            }), operators.delay(100), operators.shareReplay({ bufferSize: 1, refCount: true }));
        };
        LazyLoadService.prototype.remove = function (path) {
            var element = this.loaded.get(path);
            if (!element)
                return false;
            element.parentNode.removeChild(element);
            this.loaded.delete(path);
            return true;
        };
        return LazyLoadService;
    }());
    LazyLoadService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function LazyLoadService_Factory() { return new LazyLoadService(i0__namespace.ɵɵinject(ResourceWaitService)); }, token: LazyLoadService, providedIn: "root" });
    LazyLoadService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    LazyLoadService.ctorParameters = function () { return [
        { type: ResourceWaitService }
    ]; };

    var LIST_QUERY_DEBOUNCE_TIME = new i0.InjectionToken('LIST_QUERY_DEBOUNCE_TIME');

    var ListService = /** @class */ (function () {
        function ListService(injector) {
            var _this = this;
            this._filter = '';
            this._maxResultCount = 10;
            this._skipCount = 0;
            this._page = 0;
            this._sortKey = '';
            this._sortOrder = '';
            this._query$ = new rxjs.ReplaySubject(1);
            this._isLoading$ = new rxjs.BehaviorSubject(false);
            this.destroy$ = new rxjs.Subject();
            this.get = function () {
                _this.resetPageWhenUnchanged();
                _this.next();
            };
            this.getWithoutPageReset = function () {
                _this.next();
            };
            var delay = injector.get(LIST_QUERY_DEBOUNCE_TIME, 300);
            this.delay = delay ? operators.debounceTime(delay) : operators.tap();
            this.get();
        }
        Object.defineProperty(ListService.prototype, "filter", {
            get: function () {
                return this._filter;
            },
            set: function (value) {
                this._filter = value;
                this.get();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListService.prototype, "maxResultCount", {
            get: function () {
                return this._maxResultCount;
            },
            set: function (value) {
                this._maxResultCount = value;
                this.get();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListService.prototype, "page", {
            get: function () {
                return this._page;
            },
            set: function (value) {
                if (value === this._page)
                    return;
                this._page = value;
                this.get();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListService.prototype, "sortKey", {
            get: function () {
                return this._sortKey;
            },
            set: function (value) {
                this._sortKey = value;
                this.get();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListService.prototype, "sortOrder", {
            get: function () {
                return this._sortOrder;
            },
            set: function (value) {
                this._sortOrder = value;
                this.get();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListService.prototype, "query$", {
            get: function () {
                return this._query$
                    .asObservable()
                    .pipe(this.delay, operators.shareReplay({ bufferSize: 1, refCount: true }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListService.prototype, "isLoading$", {
            get: function () {
                return this._isLoading$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        ListService.prototype.hookToQuery = function (streamCreatorCallback) {
            var _this = this;
            this._isLoading$.next(true);
            return this.query$.pipe(operators.switchMap(function (query) { return streamCreatorCallback(query).pipe(operators.catchError(function () { return rxjs.of(null); })); }), operators.filter(Boolean), operators.tap(function () { return _this._isLoading$.next(false); }), operators.shareReplay({ bufferSize: 1, refCount: true }), operators.takeUntil(this.destroy$));
        };
        ListService.prototype.ngOnDestroy = function () {
            this.destroy$.next();
        };
        ListService.prototype.resetPageWhenUnchanged = function () {
            var skipCount = this._page * this._maxResultCount;
            if (skipCount === this._skipCount) {
                this._page = 0;
                this._skipCount = 0;
            }
            else
                this._skipCount = skipCount;
        };
        ListService.prototype.next = function () {
            this._query$.next({
                filter: this._filter || undefined,
                maxResultCount: this._maxResultCount,
                skipCount: this._page * this._maxResultCount,
                sorting: this._sortOrder ? this._sortKey + " " + this._sortOrder : undefined,
            });
        };
        return ListService;
    }());
    ListService.decorators = [
        { type: i0.Injectable }
    ];
    ListService.ctorParameters = function () { return [
        { type: i0.Injector }
    ]; };

    var ConfigState_1;
    /**
     * @deprecated Use ConfigStateService instead. To be deleted in v5.0.
     */
    exports.ConfigState = ConfigState_1 = /** @class */ (function () {
        function ConfigState(http, store, sessionState, environmentService, configState) {
            this.http = http;
            this.store = store;
            this.sessionState = sessionState;
            this.environmentService = environmentService;
            this.configState = configState;
            this.syncConfigState();
            this.syncEnvironment();
        }
        ConfigState.getAll = function (state) {
            return state;
        };
        ConfigState.getApplicationInfo = function (state) {
            return state.environment.application || {};
        };
        ConfigState.getEnvironment = function (state) {
            return state.environment;
        };
        ConfigState.getOne = function (key) {
            var selector = i4.createSelector([ConfigState_1], function (state) {
                return state[key];
            });
            return selector;
        };
        ConfigState.getDeep = function (keys) {
            if (typeof keys === 'string') {
                keys = keys.split('.');
            }
            if (!Array.isArray(keys)) {
                throw new Error('The argument must be a dot string or an string array.');
            }
            var selector = i4.createSelector([ConfigState_1], function (state) {
                return keys.reduce(function (acc, val) {
                    if (acc) {
                        return acc[val];
                    }
                    return undefined;
                }, state);
            });
            return selector;
        };
        ConfigState.getApiUrl = function (key) {
            var selector = i4.createSelector([ConfigState_1], function (state) {
                return (state.environment.apis[key || 'default'] || state.environment.apis.default).url;
            });
            return selector;
        };
        ConfigState.getFeature = function (key) {
            var selector = i4.createSelector([ConfigState_1], function (state) {
                return snq__default['default'](function () { return state.features.values[key]; });
            });
            return selector;
        };
        ConfigState.getSetting = function (key) {
            var selector = i4.createSelector([ConfigState_1], function (state) {
                return snq__default['default'](function () { return state.setting.values[key]; });
            });
            return selector;
        };
        ConfigState.getSettings = function (keyword) {
            var selector = i4.createSelector([ConfigState_1], function (state) {
                var settings = snq__default['default'](function () { return state.setting.values; }, {});
                if (!keyword)
                    return settings;
                var keysFound = Object.keys(settings).filter(function (key) { return key.indexOf(keyword) > -1; });
                return keysFound.reduce(function (acc, key) {
                    acc[key] = settings[key];
                    return acc;
                }, {});
            });
            return selector;
        };
        /**
         * @deprecated use PermissionService's getGrantedPolicyStream or getGrantedPolicy methods.
         */
        ConfigState.getGrantedPolicy = function (key) {
            var selector = i4.createSelector([ConfigState_1], function (state) {
                if (!key)
                    return true;
                var getPolicy = function (k) { return snq__default['default'](function () { return state.auth.grantedPolicies[k]; }, false); };
                var orRegexp = /\|\|/g;
                var andRegexp = /&&/g;
                // TODO: Allow combination of ANDs & ORs
                if (orRegexp.test(key)) {
                    var keys = key.split('||').filter(Boolean);
                    if (keys.length < 2)
                        return false;
                    return keys.some(function (k) { return getPolicy(k.trim()); });
                }
                else if (andRegexp.test(key)) {
                    var keys = key.split('&&').filter(Boolean);
                    if (keys.length < 2)
                        return false;
                    return keys.every(function (k) { return getPolicy(k.trim()); });
                }
                return getPolicy(key);
            });
            return selector;
        };
        ConfigState.getLocalizationResource = function (resourceName) {
            var selector = i4.createSelector([ConfigState_1], function (state) {
                return state.localization.values[resourceName];
            });
            return selector;
        };
        ConfigState.getLocalization = function (key) {
            var interpolateParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                interpolateParams[_i - 1] = arguments[_i];
            }
            if (!key)
                key = '';
            var defaultValue;
            if (typeof key !== 'string') {
                defaultValue = key.defaultValue;
                key = key.key;
            }
            var keys = key.split('::');
            var selector = i4.createSelector([ConfigState_1], function (state) {
                var warn = function (message) {
                    if (!state.environment.production)
                        console.warn(message);
                };
                if (keys.length < 2) {
                    warn('The localization source separator (::) not found.');
                    return defaultValue || key;
                }
                if (!state.localization)
                    return defaultValue || keys[1];
                var sourceName = keys[0] ||
                    snq__default['default'](function () { return state.environment.localization.defaultResourceName; }) ||
                    state.localization.defaultResourceName;
                var sourceKey = keys[1];
                if (sourceName === '_') {
                    return defaultValue || sourceKey;
                }
                if (!sourceName) {
                    warn('Localization source name is not specified and the defaultResourceName was not defined!');
                    return defaultValue || sourceKey;
                }
                var source = state.localization.values[sourceName];
                if (!source) {
                    warn('Could not find localization source: ' + sourceName);
                    return defaultValue || sourceKey;
                }
                var localization = source[sourceKey];
                if (typeof localization === 'undefined') {
                    return defaultValue || sourceKey;
                }
                interpolateParams = interpolateParams.filter(function (params) { return params != null; });
                if (localization)
                    localization = interpolate(localization, interpolateParams);
                if (typeof localization !== 'string')
                    localization = '';
                return localization || defaultValue || key;
            });
            return selector;
        };
        ConfigState.prototype.syncConfigState = function () {
            var _this = this;
            this.configState
                .createOnUpdateStream(function (state) { return state; })
                .pipe(operators.distinctUntilChanged(compare__default['default']))
                .subscribe(function (config) { return _this.store.dispatch(new PatchConfigState(config)); });
        };
        ConfigState.prototype.syncEnvironment = function () {
            var _this = this;
            this.environmentService
                .createOnUpdateStream(function (state) { return state; })
                .pipe(operators.distinctUntilChanged(compare__default['default']))
                .subscribe(function (env) { return _this.store.dispatch(new PatchConfigState({ environment: env })); });
        };
        ConfigState.prototype.addData = function (_a) {
            var _this = this;
            var patchState = _a.patchState, dispatch = _a.dispatch;
            var apiName = 'default';
            var api = this.store.selectSnapshot(ConfigState_1.getApiUrl(apiName));
            return this.http
                .get(api + "/api/abp/application-configuration")
                .pipe(operators.tap(function (configuration) { return _this.configState.setState(configuration); }), operators.catchError(function (err) {
                dispatch(new RestOccurError(err));
                return rxjs.throwError(err);
            }));
        };
        ConfigState.prototype.setEnvironment = function (_, _a) {
            var environment = _a.environment;
            return this.environmentService.setState(environment);
        };
        ConfigState.prototype.setConfig = function (_a, _b) {
            var patchState = _a.patchState, getState = _a.getState;
            var state = _b.state;
            patchState(Object.assign(Object.assign({}, getState()), state));
        };
        return ConfigState;
    }());
    exports.ConfigState.decorators = [
        { type: i0.Injectable }
    ];
    exports.ConfigState.ctorParameters = function () { return [
        { type: i2.HttpClient },
        { type: i4.Store },
        { type: SessionStateService },
        { type: EnvironmentService },
        { type: ConfigStateService }
    ]; };
    __decorate([
        i4.Action(GetAppConfiguration)
    ], exports.ConfigState.prototype, "addData", null);
    __decorate([
        i4.Action(SetEnvironment)
    ], exports.ConfigState.prototype, "setEnvironment", null);
    __decorate([
        i4.Action(PatchConfigState)
    ], exports.ConfigState.prototype, "setConfig", null);
    __decorate([
        i4.Selector()
    ], exports.ConfigState, "getAll", null);
    __decorate([
        i4.Selector()
    ], exports.ConfigState, "getApplicationInfo", null);
    __decorate([
        i4.Selector()
    ], exports.ConfigState, "getEnvironment", null);
    exports.ConfigState = ConfigState_1 = __decorate([
        i4.State({
            name: 'ConfigState',
            defaults: {},
        })
    ], exports.ConfigState);

    var ProfileStateService = /** @class */ (function () {
        function ProfileStateService(store) {
            this.store = store;
        }
        ProfileStateService.prototype.getProfile = function () {
            return this.store.selectSnapshot(exports.ɵbd.getProfile);
        };
        ProfileStateService.prototype.dispatchGetProfile = function () {
            return this.store.dispatch(new GetProfile());
        };
        ProfileStateService.prototype.dispatchUpdateProfile = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (UpdateProfile.bind.apply(UpdateProfile, __spread([void 0], args)))());
        };
        ProfileStateService.prototype.dispatchChangePassword = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (ChangePassword.bind.apply(ChangePassword, __spread([void 0], args)))());
        };
        return ProfileStateService;
    }());
    ProfileStateService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ProfileStateService_Factory() { return new ProfileStateService(i0__namespace.ɵɵinject(i4__namespace.Store)); }, token: ProfileStateService, providedIn: "root" });
    ProfileStateService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ProfileStateService.ctorParameters = function () { return [
        { type: i4.Store }
    ]; };

    var RouterWaitService = /** @class */ (function () {
        function RouterWaitService(routerEvents, injector) {
            this.routerEvents = routerEvents;
            this.store = new InternalStore({ loading: false });
            this.destroy$ = new rxjs.Subject();
            this.delay = injector.get(LOADER_DELAY, 500);
            this.updateLoadingStatusOnNavigationEvents();
        }
        RouterWaitService.prototype.updateLoadingStatusOnNavigationEvents = function () {
            var _this = this;
            this.routerEvents
                .getAllNavigationEvents()
                .pipe(operators.map(function (event) { return event instanceof i1.NavigationStart; }), operators.switchMap(function (condition) { return condition
                ? _this.delay === 0
                    ? rxjs.of(true)
                    : rxjs.timer(_this.delay || 0).pipe(operators.mapTo(true), operators.takeUntil(_this.destroy$))
                : rxjs.of(false); }), operators.tap(function () { return _this.destroy$.next(); }))
                .subscribe(function (status) {
                _this.setLoading(status);
            });
        };
        RouterWaitService.prototype.getLoading = function () {
            return this.store.state.loading;
        };
        RouterWaitService.prototype.getLoading$ = function () {
            return this.store.sliceState(function (_a) {
                var loading = _a.loading;
                return loading;
            });
        };
        RouterWaitService.prototype.updateLoading$ = function () {
            return this.store.sliceUpdate(function (_a) {
                var loading = _a.loading;
                return loading;
            });
        };
        RouterWaitService.prototype.setLoading = function (loading) {
            this.store.patch({ loading: loading });
        };
        return RouterWaitService;
    }());
    RouterWaitService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function RouterWaitService_Factory() { return new RouterWaitService(i0__namespace.ɵɵinject(RouterEvents), i0__namespace.ɵɵinject(i0__namespace.INJECTOR)); }, token: RouterWaitService, providedIn: "root" });
    RouterWaitService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    RouterWaitService.ctorParameters = function () { return [
        { type: RouterEvents },
        { type: i0.Injector }
    ]; };

    var trackBy = function (key) { return function (_, item) { return item[key]; }; };
    var trackByDeep = function () {
        var keys = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            keys[_i] = arguments[_i];
        }
        return function (_, item) { return keys.reduce(function (acc, key) { return acc[key]; }, item); };
    };
    var TrackByService = /** @class */ (function () {
        function TrackByService() {
            this.by = trackBy;
            this.byDeep = trackByDeep;
        }
        return TrackByService;
    }());
    TrackByService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function TrackByService_Factory() { return new TrackByService(); }, token: TrackByService, providedIn: "root" });
    TrackByService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var ContainerStrategy = /** @class */ (function () {
        function ContainerStrategy(containerRef) {
            this.containerRef = containerRef;
        }
        ContainerStrategy.prototype.prepare = function () { };
        return ContainerStrategy;
    }());
    var ClearContainerStrategy = /** @class */ (function (_super) {
        __extends(ClearContainerStrategy, _super);
        function ClearContainerStrategy() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ClearContainerStrategy.prototype.getIndex = function () {
            return 0;
        };
        ClearContainerStrategy.prototype.prepare = function () {
            this.containerRef.clear();
        };
        return ClearContainerStrategy;
    }(ContainerStrategy));
    var InsertIntoContainerStrategy = /** @class */ (function (_super) {
        __extends(InsertIntoContainerStrategy, _super);
        function InsertIntoContainerStrategy(containerRef, index) {
            var _this = _super.call(this, containerRef) || this;
            _this.index = index;
            return _this;
        }
        InsertIntoContainerStrategy.prototype.getIndex = function () {
            return Math.min(Math.max(0, this.index), this.containerRef.length);
        };
        return InsertIntoContainerStrategy;
    }(ContainerStrategy));
    var CONTAINER_STRATEGY = {
        Clear: function (containerRef) {
            return new ClearContainerStrategy(containerRef);
        },
        Append: function (containerRef) {
            return new InsertIntoContainerStrategy(containerRef, containerRef.length);
        },
        Prepend: function (containerRef) {
            return new InsertIntoContainerStrategy(containerRef, 0);
        },
        Insert: function (containerRef, index) {
            return new InsertIntoContainerStrategy(containerRef, index);
        },
    };

    var ContentSecurityStrategy = /** @class */ (function () {
        function ContentSecurityStrategy(nonce) {
            this.nonce = nonce;
        }
        return ContentSecurityStrategy;
    }());
    var LooseContentSecurityStrategy = /** @class */ (function (_super) {
        __extends(LooseContentSecurityStrategy, _super);
        function LooseContentSecurityStrategy(nonce) {
            return _super.call(this, nonce) || this;
        }
        LooseContentSecurityStrategy.prototype.applyCSP = function (element) {
            element.setAttribute('nonce', this.nonce);
        };
        return LooseContentSecurityStrategy;
    }(ContentSecurityStrategy));
    var NoContentSecurityStrategy = /** @class */ (function (_super) {
        __extends(NoContentSecurityStrategy, _super);
        function NoContentSecurityStrategy() {
            return _super.call(this) || this;
        }
        NoContentSecurityStrategy.prototype.applyCSP = function (_) { };
        return NoContentSecurityStrategy;
    }(ContentSecurityStrategy));
    var CONTENT_SECURITY_STRATEGY = {
        Loose: function (nonce) {
            return new LooseContentSecurityStrategy(nonce);
        },
        None: function () {
            return new NoContentSecurityStrategy();
        },
    };

    var ContentStrategy = /** @class */ (function () {
        function ContentStrategy(content, domStrategy, contentSecurityStrategy) {
            if (domStrategy === void 0) { domStrategy = DOM_STRATEGY.AppendToHead(); }
            if (contentSecurityStrategy === void 0) { contentSecurityStrategy = CONTENT_SECURITY_STRATEGY.None(); }
            this.content = content;
            this.domStrategy = domStrategy;
            this.contentSecurityStrategy = contentSecurityStrategy;
        }
        ContentStrategy.prototype.insertElement = function () {
            var element = this.createElement();
            this.contentSecurityStrategy.applyCSP(element);
            this.domStrategy.insertElement(element);
            return element;
        };
        return ContentStrategy;
    }());
    var StyleContentStrategy = /** @class */ (function (_super) {
        __extends(StyleContentStrategy, _super);
        function StyleContentStrategy() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        StyleContentStrategy.prototype.createElement = function () {
            var element = document.createElement('style');
            element.textContent = this.content;
            return element;
        };
        return StyleContentStrategy;
    }(ContentStrategy));
    var ScriptContentStrategy = /** @class */ (function (_super) {
        __extends(ScriptContentStrategy, _super);
        function ScriptContentStrategy() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ScriptContentStrategy.prototype.createElement = function () {
            var element = document.createElement('script');
            element.textContent = this.content;
            return element;
        };
        return ScriptContentStrategy;
    }(ContentStrategy));
    var CONTENT_STRATEGY = {
        AppendScriptToBody: function (content) {
            return new ScriptContentStrategy(content, DOM_STRATEGY.AppendToBody());
        },
        AppendScriptToHead: function (content) {
            return new ScriptContentStrategy(content, DOM_STRATEGY.AppendToHead());
        },
        AppendStyleToHead: function (content) {
            return new StyleContentStrategy(content, DOM_STRATEGY.AppendToHead());
        },
        PrependStyleToHead: function (content) {
            return new StyleContentStrategy(content, DOM_STRATEGY.PrependToHead());
        },
    };

    var ContextStrategy = /** @class */ (function () {
        function ContextStrategy(context) {
            this.context = context;
        }
        /* tslint:disable-next-line:no-unused-variable */
        ContextStrategy.prototype.setContext = function (componentRef) {
            return this.context;
        };
        return ContextStrategy;
    }());
    var NoContextStrategy = /** @class */ (function (_super) {
        __extends(NoContextStrategy, _super);
        function NoContextStrategy() {
            return _super.call(this, undefined) || this;
        }
        return NoContextStrategy;
    }(ContextStrategy));
    var ComponentContextStrategy = /** @class */ (function (_super) {
        __extends(ComponentContextStrategy, _super);
        function ComponentContextStrategy() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ComponentContextStrategy.prototype.setContext = function (componentRef) {
            var _this = this;
            Object.keys(this.context).forEach(function (key) { return (componentRef.instance[key] = _this.context[key]); });
            componentRef.changeDetectorRef.detectChanges();
            return this.context;
        };
        return ComponentContextStrategy;
    }(ContextStrategy));
    var TemplateContextStrategy = /** @class */ (function (_super) {
        __extends(TemplateContextStrategy, _super);
        function TemplateContextStrategy() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TemplateContextStrategy.prototype.setContext = function () {
            return this.context;
        };
        return TemplateContextStrategy;
    }(ContextStrategy));
    var CONTEXT_STRATEGY = {
        None: function () {
            return new NoContextStrategy();
        },
        Component: function (context) {
            return new ComponentContextStrategy(context);
        },
        Template: function (context) {
            return new TemplateContextStrategy(context);
        },
    };

    var LoadingStrategy = /** @class */ (function () {
        function LoadingStrategy(path, domStrategy, crossOriginStrategy) {
            if (domStrategy === void 0) { domStrategy = DOM_STRATEGY.AppendToHead(); }
            if (crossOriginStrategy === void 0) { crossOriginStrategy = CROSS_ORIGIN_STRATEGY.Anonymous(); }
            this.path = path;
            this.domStrategy = domStrategy;
            this.crossOriginStrategy = crossOriginStrategy;
        }
        LoadingStrategy.prototype.createStream = function () {
            var _this = this;
            this.element = this.createElement();
            return rxjs.of(null).pipe(operators.switchMap(function () { return fromLazyLoad(_this.element, _this.domStrategy, _this.crossOriginStrategy); }));
        };
        return LoadingStrategy;
    }());
    var ScriptLoadingStrategy = /** @class */ (function (_super) {
        __extends(ScriptLoadingStrategy, _super);
        function ScriptLoadingStrategy(src, domStrategy, crossOriginStrategy) {
            return _super.call(this, src, domStrategy, crossOriginStrategy) || this;
        }
        ScriptLoadingStrategy.prototype.createElement = function () {
            var element = document.createElement('script');
            element.src = this.path;
            return element;
        };
        return ScriptLoadingStrategy;
    }(LoadingStrategy));
    var StyleLoadingStrategy = /** @class */ (function (_super) {
        __extends(StyleLoadingStrategy, _super);
        function StyleLoadingStrategy(href, domStrategy, crossOriginStrategy) {
            return _super.call(this, href, domStrategy, crossOriginStrategy) || this;
        }
        StyleLoadingStrategy.prototype.createElement = function () {
            var element = document.createElement('link');
            element.rel = 'stylesheet';
            element.href = this.path;
            return element;
        };
        return StyleLoadingStrategy;
    }(LoadingStrategy));
    var LOADING_STRATEGY = {
        AppendScriptToBody: function (src) {
            return new ScriptLoadingStrategy(src, DOM_STRATEGY.AppendToBody(), CROSS_ORIGIN_STRATEGY.None());
        },
        AppendAnonymousScriptToBody: function (src, integrity) {
            return new ScriptLoadingStrategy(src, DOM_STRATEGY.AppendToBody(), CROSS_ORIGIN_STRATEGY.Anonymous(integrity));
        },
        AppendAnonymousScriptToHead: function (src, integrity) {
            return new ScriptLoadingStrategy(src, DOM_STRATEGY.AppendToHead(), CROSS_ORIGIN_STRATEGY.Anonymous(integrity));
        },
        AppendAnonymousStyleToHead: function (src, integrity) {
            return new StyleLoadingStrategy(src, DOM_STRATEGY.AppendToHead(), CROSS_ORIGIN_STRATEGY.Anonymous(integrity));
        },
        PrependAnonymousScriptToHead: function (src, integrity) {
            return new ScriptLoadingStrategy(src, DOM_STRATEGY.PrependToHead(), CROSS_ORIGIN_STRATEGY.Anonymous(integrity));
        },
        PrependAnonymousStyleToHead: function (src, integrity) {
            return new StyleLoadingStrategy(src, DOM_STRATEGY.PrependToHead(), CROSS_ORIGIN_STRATEGY.Anonymous(integrity));
        },
    };

    var ProjectionStrategy = /** @class */ (function () {
        function ProjectionStrategy(content) {
            this.content = content;
        }
        return ProjectionStrategy;
    }());
    var ComponentProjectionStrategy = /** @class */ (function (_super) {
        __extends(ComponentProjectionStrategy, _super);
        function ComponentProjectionStrategy(component, containerStrategy, contextStrategy) {
            if (contextStrategy === void 0) { contextStrategy = CONTEXT_STRATEGY.None(); }
            var _this = _super.call(this, component) || this;
            _this.containerStrategy = containerStrategy;
            _this.contextStrategy = contextStrategy;
            return _this;
        }
        ComponentProjectionStrategy.prototype.injectContent = function (injector) {
            this.containerStrategy.prepare();
            var resolver = injector.get(i0.ComponentFactoryResolver);
            var factory = resolver.resolveComponentFactory(this.content);
            var componentRef = this.containerStrategy.containerRef.createComponent(factory, this.containerStrategy.getIndex(), injector);
            this.contextStrategy.setContext(componentRef);
            return componentRef;
        };
        return ComponentProjectionStrategy;
    }(ProjectionStrategy));
    var RootComponentProjectionStrategy = /** @class */ (function (_super) {
        __extends(RootComponentProjectionStrategy, _super);
        function RootComponentProjectionStrategy(component, contextStrategy, domStrategy) {
            if (contextStrategy === void 0) { contextStrategy = CONTEXT_STRATEGY.None(); }
            if (domStrategy === void 0) { domStrategy = DOM_STRATEGY.AppendToBody(); }
            var _this = _super.call(this, component) || this;
            _this.contextStrategy = contextStrategy;
            _this.domStrategy = domStrategy;
            return _this;
        }
        RootComponentProjectionStrategy.prototype.injectContent = function (injector) {
            var appRef = injector.get(i0.ApplicationRef);
            var resolver = injector.get(i0.ComponentFactoryResolver);
            var componentRef = resolver
                .resolveComponentFactory(this.content)
                .create(injector);
            this.contextStrategy.setContext(componentRef);
            appRef.attachView(componentRef.hostView);
            var element = componentRef.hostView.rootNodes[0];
            this.domStrategy.insertElement(element);
            return componentRef;
        };
        return RootComponentProjectionStrategy;
    }(ProjectionStrategy));
    var TemplateProjectionStrategy = /** @class */ (function (_super) {
        __extends(TemplateProjectionStrategy, _super);
        function TemplateProjectionStrategy(templateRef, containerStrategy, contextStrategy) {
            if (contextStrategy === void 0) { contextStrategy = CONTEXT_STRATEGY.None(); }
            var _this = _super.call(this, templateRef) || this;
            _this.containerStrategy = containerStrategy;
            _this.contextStrategy = contextStrategy;
            return _this;
        }
        TemplateProjectionStrategy.prototype.injectContent = function () {
            this.containerStrategy.prepare();
            var embeddedViewRef = this.containerStrategy.containerRef.createEmbeddedView(this.content, this.contextStrategy.context, this.containerStrategy.getIndex());
            embeddedViewRef.detectChanges();
            return embeddedViewRef;
        };
        return TemplateProjectionStrategy;
    }(ProjectionStrategy));
    var PROJECTION_STRATEGY = {
        AppendComponentToBody: function (component, context) {
            return new RootComponentProjectionStrategy(component, context && CONTEXT_STRATEGY.Component(context));
        },
        AppendComponentToContainer: function (component, containerRef, context) {
            return new ComponentProjectionStrategy(component, CONTAINER_STRATEGY.Append(containerRef), context && CONTEXT_STRATEGY.Component(context));
        },
        AppendTemplateToContainer: function (templateRef, containerRef, context) {
            return new TemplateProjectionStrategy(templateRef, CONTAINER_STRATEGY.Append(containerRef), context && CONTEXT_STRATEGY.Template(context));
        },
        PrependComponentToContainer: function (component, containerRef, context) {
            return new ComponentProjectionStrategy(component, CONTAINER_STRATEGY.Prepend(containerRef), context && CONTEXT_STRATEGY.Component(context));
        },
        PrependTemplateToContainer: function (templateRef, containerRef, context) {
            return new TemplateProjectionStrategy(templateRef, CONTAINER_STRATEGY.Prepend(containerRef), context && CONTEXT_STRATEGY.Template(context));
        },
        ProjectComponentToContainer: function (component, containerRef, context) {
            return new ComponentProjectionStrategy(component, CONTAINER_STRATEGY.Clear(containerRef), context && CONTEXT_STRATEGY.Component(context));
        },
        ProjectTemplateToContainer: function (templateRef, containerRef, context) {
            return new TemplateProjectionStrategy(templateRef, CONTAINER_STRATEGY.Clear(containerRef), context && CONTEXT_STRATEGY.Template(context));
        },
    };

    var NAVIGATE_TO_MANAGE_PROFILE = new i0.InjectionToken('NAVIGATE_TO_MANAGE_PROFILE', {
        providedIn: 'root',
        factory: function () {
            var environment = i0.inject(EnvironmentService);
            return function () {
                window.open(environment.getEnvironment().oAuthConfig.issuer + "/Account/Manage?returnUrl=" + window.location.href, '_self');
            };
        },
    });

    function validateMinAge(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.age, age = _c === void 0 ? 18 : _c;
        return function (control) {
            if (['', null, undefined].indexOf(control.value) > -1)
                return null;
            return isValidMinAge(control.value, age) ? null : { minAge: { age: age } };
        };
    }
    function isValidMinAge(value, minAge) {
        var date = new Date();
        date.setFullYear(date.getFullYear() - minAge);
        date.setHours(23, 59, 59, 999);
        return Number(new Date(value)) <= date.valueOf();
    }

    function validateCreditCard() {
        return function (control) {
            if (['', null, undefined].indexOf(control.value) > -1)
                return null;
            return isValidCreditCard(String(control.value)) ? null : { creditCard: true };
        };
    }
    function isValidCreditCard(value) {
        value = value.replace(/[ -]/g, '');
        if (!/^[0-9]{13,19}$/.test(value))
            return false;
        var checksum = 0;
        var multiplier = 1;
        for (var i = value.length; i > 0; i--) {
            var digit = Number(value[i - 1]) * multiplier;
            /* tslint:disable-next-line:no-bitwise */
            checksum += (digit % 10) + ~~(digit / 10);
            multiplier = (multiplier * 2) % 3;
        }
        return checksum % 10 === 0;
    }

    function validateRange(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.maximum, maximum = _c === void 0 ? Infinity : _c, _d = _b.minimum, minimum = _d === void 0 ? 0 : _d;
        return function (control) {
            if (['', null, undefined].indexOf(control.value) > -1)
                return null;
            var value = Number(control.value);
            return getMinError(value, minimum, maximum) || getMaxError(value, maximum, minimum);
        };
    }
    function getMaxError(value, max, min) {
        return value > max ? { range: { max: max, min: min } } : null;
    }
    function getMinError(value, min, max) {
        return value < min ? { range: { min: min, max: max } } : null;
    }

    function validateRequired(_a) {
        var _b = _a === void 0 ? {} : _a, allowEmptyStrings = _b.allowEmptyStrings;
        return function (control) {
            return isValidRequired(control.value, allowEmptyStrings) ? null : { required: true };
        };
    }
    function isValidRequired(value, allowEmptyStrings) {
        if (value || value === 0 || value === false)
            return true;
        if (allowEmptyStrings && value === '')
            return true;
        return false;
    }

    function validateStringLength(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.maximumLength, maximumLength = _c === void 0 ? Infinity : _c, _d = _b.minimumLength, minimumLength = _d === void 0 ? 0 : _d;
        return function (control) {
            if (['', null, undefined].indexOf(control.value) > -1)
                return null;
            var value = String(control.value);
            return getMinLengthError(value, minimumLength) || getMaxLengthError(value, maximumLength);
        };
    }
    function getMaxLengthError(value, requiredLength) {
        return value.length > requiredLength ? { maxlength: { requiredLength: requiredLength } } : null;
    }
    function getMinLengthError(value, requiredLength) {
        return value.length < requiredLength ? { minlength: { requiredLength: requiredLength } } : null;
    }

    function validateUrl() {
        return function (control) {
            if (['', null, undefined].indexOf(control.value) > -1)
                return null;
            return isValidUrl(control.value) ? null : { url: true };
        };
    }
    function isValidUrl(value) {
        if (/^http(s)?:\/\/[^/]/.test(value) || /^ftp:\/\/[^/]/.test(value)) {
            var a = document.createElement('a');
            a.href = value;
            return !!a.host;
        }
        return false;
    }

    var ɵ0 = function () { return forms.Validators.email; };
    var AbpValidators = {
        creditCard: validateCreditCard,
        emailAddress: ɵ0,
        minAge: validateMinAge,
        range: validateRange,
        required: validateRequired,
        stringLength: validateStringLength,
        url: validateUrl,
    };

    var AbpApiDefinitionService = /** @class */ (function () {
        function AbpApiDefinitionService(restService) {
            var _this = this;
            this.restService = restService;
            this.apiName = 'abp';
            this.getByModel = function (model) { return _this.restService.request({
                method: 'GET',
                url: '/api/abp/api-definition',
                params: { includeTypes: model.includeTypes },
            }, { apiName: _this.apiName }); };
        }
        return AbpApiDefinitionService;
    }());
    AbpApiDefinitionService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function AbpApiDefinitionService_Factory() { return new AbpApiDefinitionService(i0__namespace.ɵɵinject(RestService)); }, token: AbpApiDefinitionService, providedIn: "root" });
    AbpApiDefinitionService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AbpApiDefinitionService.ctorParameters = function () { return [
        { type: RestService }
    ]; };

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Public API Surface of core
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.APP_INIT_ERROR_HANDLERS = APP_INIT_ERROR_HANDLERS;
    exports.AbpApiDefinitionService = AbpApiDefinitionService;
    exports.AbpApplicationConfigurationService = AbpApplicationConfigurationService;
    exports.AbpTenantService = AbpTenantService;
    exports.AbpValidators = AbpValidators;
    exports.AbstractNavTreeService = AbstractNavTreeService;
    exports.AbstractNgModelComponent = AbstractNgModelComponent;
    exports.AbstractTreeService = AbstractTreeService;
    exports.ApiInterceptor = ApiInterceptor;
    exports.ApplicationConfigurationService = ApplicationConfigurationService;
    exports.AuditedEntityDto = AuditedEntityDto;
    exports.AuditedEntityWithUserDto = AuditedEntityWithUserDto;
    exports.AuthGuard = AuthGuard;
    exports.AuthService = AuthService;
    exports.AutofocusDirective = AutofocusDirective;
    exports.BaseCoreModule = BaseCoreModule;
    exports.BaseTreeNode = BaseTreeNode;
    exports.CONTAINER_STRATEGY = CONTAINER_STRATEGY;
    exports.CONTENT_SECURITY_STRATEGY = CONTENT_SECURITY_STRATEGY;
    exports.CONTENT_STRATEGY = CONTENT_STRATEGY;
    exports.CONTEXT_STRATEGY = CONTEXT_STRATEGY;
    exports.CORE_OPTIONS = CORE_OPTIONS;
    exports.CROSS_ORIGIN_STRATEGY = CROSS_ORIGIN_STRATEGY;
    exports.ChangePassword = ChangePassword;
    exports.ClearContainerStrategy = ClearContainerStrategy;
    exports.ComponentContextStrategy = ComponentContextStrategy;
    exports.ComponentProjectionStrategy = ComponentProjectionStrategy;
    exports.ConfigStateService = ConfigStateService;
    exports.ContainerStrategy = ContainerStrategy;
    exports.ContentProjectionService = ContentProjectionService;
    exports.ContentSecurityStrategy = ContentSecurityStrategy;
    exports.ContentStrategy = ContentStrategy;
    exports.ContextStrategy = ContextStrategy;
    exports.CoreModule = CoreModule;
    exports.CreationAuditedEntityDto = CreationAuditedEntityDto;
    exports.CreationAuditedEntityWithUserDto = CreationAuditedEntityWithUserDto;
    exports.CrossOriginStrategy = CrossOriginStrategy;
    exports.DOM_STRATEGY = DOM_STRATEGY;
    exports.DomInsertionService = DomInsertionService;
    exports.DomStrategy = DomStrategy;
    exports.DynamicLayoutComponent = DynamicLayoutComponent;
    exports.EntityDto = EntityDto;
    exports.EnvironmentService = EnvironmentService;
    exports.ExtensibleAuditedEntityDto = ExtensibleAuditedEntityDto;
    exports.ExtensibleAuditedEntityWithUserDto = ExtensibleAuditedEntityWithUserDto;
    exports.ExtensibleCreationAuditedEntityDto = ExtensibleCreationAuditedEntityDto;
    exports.ExtensibleCreationAuditedEntityWithUserDto = ExtensibleCreationAuditedEntityWithUserDto;
    exports.ExtensibleEntityDto = ExtensibleEntityDto;
    exports.ExtensibleFullAuditedEntityDto = ExtensibleFullAuditedEntityDto;
    exports.ExtensibleFullAuditedEntityWithUserDto = ExtensibleFullAuditedEntityWithUserDto;
    exports.ExtensibleObject = ExtensibleObject;
    exports.ForDirective = ForDirective;
    exports.FormSubmitDirective = FormSubmitDirective;
    exports.FullAuditedEntityDto = FullAuditedEntityDto;
    exports.FullAuditedEntityWithUserDto = FullAuditedEntityWithUserDto;
    exports.GetAppConfiguration = GetAppConfiguration;
    exports.GetProfile = GetProfile;
    exports.HttpWaitService = HttpWaitService;
    exports.InitDirective = InitDirective;
    exports.InputEventDebounceDirective = InputEventDebounceDirective;
    exports.InsertIntoContainerStrategy = InsertIntoContainerStrategy;
    exports.InternalStore = InternalStore;
    exports.LIST_QUERY_DEBOUNCE_TIME = LIST_QUERY_DEBOUNCE_TIME;
    exports.LOADER_DELAY = LOADER_DELAY;
    exports.LOADING_STRATEGY = LOADING_STRATEGY;
    exports.LazyLoadService = LazyLoadService;
    exports.LazyModuleFactory = LazyModuleFactory;
    exports.LimitedResultRequestDto = LimitedResultRequestDto;
    exports.ListResultDto = ListResultDto;
    exports.ListService = ListService;
    exports.LoadingStrategy = LoadingStrategy;
    exports.LocalizationModule = LocalizationModule;
    exports.LocalizationPipe = LocalizationPipe;
    exports.LocalizationService = LocalizationService;
    exports.LooseContentSecurityStrategy = LooseContentSecurityStrategy;
    exports.MultiTenancyService = MultiTenancyService;
    exports.NAVIGATE_TO_MANAGE_PROFILE = NAVIGATE_TO_MANAGE_PROFILE;
    exports.NavigationEvent = NavigationEvent;
    exports.NoContentSecurityStrategy = NoContentSecurityStrategy;
    exports.NoContextStrategy = NoContextStrategy;
    exports.NoCrossOriginStrategy = NoCrossOriginStrategy;
    exports.ObjectExtending = index;
    exports.PROJECTION_STRATEGY = PROJECTION_STRATEGY;
    exports.PagedAndSortedResultRequestDto = PagedAndSortedResultRequestDto;
    exports.PagedResultDto = PagedResultDto;
    exports.PagedResultRequestDto = PagedResultRequestDto;
    exports.PermissionDirective = PermissionDirective;
    exports.PermissionGuard = PermissionGuard;
    exports.PermissionService = PermissionService;
    exports.ProfileService = ProfileService;
    exports.ProfileState = exports.ɵbd;
    exports.ProfileStateService = ProfileStateService;
    exports.ProjectionStrategy = ProjectionStrategy;
    exports.ReplaceableComponentsService = ReplaceableComponentsService;
    exports.ReplaceableRouteContainerComponent = ReplaceableRouteContainerComponent;
    exports.ReplaceableTemplateDirective = ReplaceableTemplateDirective;
    exports.ResourceWaitService = ResourceWaitService;
    exports.RestOccurError = RestOccurError;
    exports.RestService = RestService;
    exports.RootComponentProjectionStrategy = RootComponentProjectionStrategy;
    exports.RootCoreModule = RootCoreModule;
    exports.RouterEvents = RouterEvents;
    exports.RouterOutletComponent = RouterOutletComponent;
    exports.RouterWaitService = RouterWaitService;
    exports.RoutesService = RoutesService;
    exports.ScriptContentStrategy = ScriptContentStrategy;
    exports.ScriptLoadingStrategy = ScriptLoadingStrategy;
    exports.SessionStateService = SessionStateService;
    exports.SetEnvironment = SetEnvironment;
    exports.SettingTabsService = SettingTabsService;
    exports.SortPipe = SortPipe;
    exports.StartLoader = StartLoader;
    exports.StopLoader = StopLoader;
    exports.StopPropagationDirective = StopPropagationDirective;
    exports.StyleContentStrategy = StyleContentStrategy;
    exports.StyleLoadingStrategy = StyleLoadingStrategy;
    exports.SubscriptionService = SubscriptionService;
    exports.TENANT_KEY = TENANT_KEY;
    exports.TemplateContextStrategy = TemplateContextStrategy;
    exports.TemplateProjectionStrategy = TemplateProjectionStrategy;
    exports.TrackByService = TrackByService;
    exports.UpdateProfile = UpdateProfile;
    exports.VisibilityDirective = VisibilityDirective;
    exports.WebHttpUrlEncodingCodec = WebHttpUrlEncodingCodec;
    exports.checkAccessToken = checkAccessToken;
    exports.coreOptionsFactory = coreOptionsFactory;
    exports.createLocalizationPipeKeyGenerator = createLocalizationPipeKeyGenerator;
    exports.createLocalizer = createLocalizer;
    exports.createLocalizerWithFallback = createLocalizerWithFallback;
    exports.createMapFromList = createMapFromList;
    exports.createTokenParser = createTokenParser;
    exports.createTreeFromList = createTreeFromList;
    exports.createTreeNodeFilterCreator = createTreeNodeFilterCreator;
    exports.deepMerge = deepMerge;
    exports.differentLocales = differentLocales;
    exports.downloadBlob = downloadBlob;
    exports.exists = exists;
    exports.featuresFactory = featuresFactory;
    exports.findRoute = findRoute;
    exports.fromLazyLoad = fromLazyLoad;
    exports.generateHash = generateHash;
    exports.generatePassword = generatePassword;
    exports.getInitialData = getInitialData;
    exports.getLocaleDirection = getLocaleDirection;
    exports.getPathName = getPathName;
    exports.getRemoteEnv = getRemoteEnv;
    exports.getRoutePath = getRoutePath;
    exports.getShortDateFormat = getShortDateFormat;
    exports.getShortDateShortTimeFormat = getShortDateShortTimeFormat;
    exports.getShortTimeFormat = getShortTimeFormat;
    exports.interpolate = interpolate;
    exports.isArray = isArray;
    exports.isNode = isNode;
    exports.isNullOrUndefined = isNullOrUndefined;
    exports.isNumber = isNumber;
    exports.isObject = isObject;
    exports.isObjectAndNotArray = isObjectAndNotArray;
    exports.isObjectAndNotArrayNotNode = isObjectAndNotArrayNotNode;
    exports.isUndefinedOrEmptyString = isUndefinedOrEmptyString;
    exports.localeInitializer = localeInitializer;
    exports.mapEnumToOptions = mapEnumToOptions;
    exports.ngxsStoragePluginSerialize = ngxsStoragePluginSerialize;
    exports.noop = noop;
    exports.parseTenantFromUrl = parseTenantFromUrl;
    exports.pipeToLogin = pipeToLogin;
    exports.pushValueTo = pushValueTo;
    exports.reloadRoute = reloadRoute;
    exports.removeRememberMe = removeRememberMe;
    exports.setRememberMe = setRememberMe;
    exports.setTokenResponseToStorage = setTokenResponseToStorage;
    exports.storageFactory = storageFactory;
    exports.takeUntilDestroy = takeUntilDestroy;
    exports.trackBy = trackBy;
    exports.trackByDeep = trackByDeep;
    exports.uuid = uuid;
    exports.validateCreditCard = validateCreditCard;
    exports.validateMinAge = validateMinAge;
    exports.validateRange = validateRange;
    exports.validateRequired = validateRequired;
    exports.validateStringLength = validateStringLength;
    exports.validateUrl = validateUrl;
    exports.ɵa = oAuthStorage;
    exports.ɵb = LocalizationPipe;
    exports.ɵba = SortPipe;
    exports.ɵbb = StopPropagationDirective;
    exports.ɵbc = VisibilityDirective;
    exports.ɵbe = ProfileService;
    exports.ɵbf = GetProfile;
    exports.ɵbg = UpdateProfile;
    exports.ɵbh = ChangePassword;
    exports.ɵbj = LocaleId;
    exports.ɵbk = LocaleProvider;
    exports.ɵbl = ApiInterceptor;
    exports.ɵbm = TENANT_KEY;
    exports.ɵbn = HttpWaitService;
    exports.ɵbo = OAuthConfigurationHandler;
    exports.ɵbp = noop;
    exports.ɵbq = getInitialData;
    exports.ɵbr = localeInitializer;
    exports.ɵbs = RoutesHandler;
    exports.ɵbt = AbstractTreeService;
    exports.ɵbu = AbstractNavTreeService;
    exports.ɵbv = RoutesService;
    exports.ɵc = LocalizationService;
    exports.ɵd = SessionStateService;
    exports.ɵe = ConfigStateService;
    exports.ɵf = AbpApplicationConfigurationService;
    exports.ɵg = RestService;
    exports.ɵh = CORE_OPTIONS;
    exports.ɵi = coreOptionsFactory;
    exports.ɵk = EnvironmentService;
    exports.ɵl = AbstractNgModelComponent;
    exports.ɵm = AutofocusDirective;
    exports.ɵn = DynamicLayoutComponent;
    exports.ɵo = SubscriptionService;
    exports.ɵp = ReplaceableComponentsService;
    exports.ɵq = RouterEvents;
    exports.ɵr = ForDirective;
    exports.ɵs = FormSubmitDirective;
    exports.ɵt = InitDirective;
    exports.ɵu = InputEventDebounceDirective;
    exports.ɵv = PermissionDirective;
    exports.ɵw = PermissionService;
    exports.ɵx = ReplaceableRouteContainerComponent;
    exports.ɵy = ReplaceableTemplateDirective;
    exports.ɵz = RouterOutletComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=abp-ng.core.umd.js.map
