import { Injector } from '@angular/core';
import { Params } from '@angular/router';
import { Store } from '@ngxs/store';
import { AuthConfig, OAuthService, OAuthStorage } from 'angular-oauth2-oidc';
import { Observable } from 'rxjs';
import { LoginParams } from '../models/auth';
import { AbpApplicationConfigurationService } from '../proxy/volo/abp/asp-net-core/mvc/application-configurations/abp-application-configuration.service';
import { ConfigStateService } from '../services/config-state.service';
import { EnvironmentService } from '../services/environment.service';
import { SessionStateService } from '../services/session-state.service';
export declare const oAuthStorage: Storage;
export declare abstract class AuthFlowStrategy {
    protected injector: Injector;
    abstract readonly isInternalAuth: boolean;
    protected store: Store;
    protected environment: EnvironmentService;
    protected configState: ConfigStateService;
    protected oAuthService: OAuthService;
    protected oAuthConfig: AuthConfig;
    protected sessionState: SessionStateService;
    protected appConfigService: AbpApplicationConfigurationService;
    protected tenantKey: string;
    abstract checkIfInternalAuth(queryParams?: Params): boolean;
    abstract navigateToLogin(queryParams?: Params): void;
    abstract logout(queryParams?: Params): Observable<any>;
    abstract login(params?: LoginParams | Params): Observable<any>;
    private catchError;
    constructor(injector: Injector);
    init(): Promise<any>;
    protected refreshToken(): Promise<void | import("angular-oauth2-oidc").TokenResponse>;
    protected listenToOauthErrors(): void;
}
export declare class AuthCodeFlowStrategy extends AuthFlowStrategy {
    readonly isInternalAuth = false;
    init(): Promise<void>;
    navigateToLogin(queryParams?: Params): void;
    checkIfInternalAuth(queryParams?: Params): boolean;
    logout(queryParams?: Params): Observable<any>;
    login(queryParams?: Params): Observable<any>;
    private getCultureParams;
}
export declare class AuthPasswordFlowStrategy extends AuthFlowStrategy {
    readonly isInternalAuth = true;
    private cookieKey;
    private storageKey;
    private listenToTokenExpiration;
    init(): Promise<void>;
    navigateToLogin(queryParams?: Params): void;
    checkIfInternalAuth(): boolean;
    login(params: LoginParams): Observable<any>;
    pipeToLogin(params: Pick<LoginParams, 'redirectUrl' | 'rememberMe'>): import("rxjs").UnaryFunction<Observable<unknown>, Observable<import("../../public-api").ApplicationConfigurationDto>>;
    logout(queryParams?: Params): Observable<import("../../public-api").ApplicationConfigurationDto>;
    protected refreshToken(): Promise<void | import("angular-oauth2-oidc").TokenResponse>;
}
export declare const AUTH_FLOW_STRATEGY: {
    Code(injector: Injector): AuthCodeFlowStrategy;
    Password(injector: Injector): AuthPasswordFlowStrategy;
};
export declare function clearOAuthStorage(storage?: OAuthStorage): void;
