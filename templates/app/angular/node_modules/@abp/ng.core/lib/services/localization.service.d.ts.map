{"version":3,"file":"localization.service.d.ts","sources":["localization.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Config } from '../models/config';\r\nimport { AbpApplicationConfigurationService } from '../proxy/volo/abp/asp-net-core/mvc/application-configurations/abp-application-configuration.service';\r\nimport { ConfigStateService } from './config-state.service';\r\nimport { SessionStateService } from './session-state.service';\r\nexport declare class LocalizationService {\r\n    private sessionState;\r\n    private injector;\r\n    private configState;\r\n    private appConfigService;\r\n    private latestLang;\r\n    private _languageChange$;\r\n    /**\r\n     * Returns currently selected language\r\n     */\r\n    get currentLang(): string;\r\n    get languageChange$(): Observable<string>;\r\n    constructor(sessionState: SessionStateService, injector: Injector, otherInstance: LocalizationService, configState: ConfigStateService, appConfigService: AbpApplicationConfigurationService);\r\n    private listenToSetLanguage;\r\n    registerLocale(locale: string): Promise<void>;\r\n    /**\r\n     * Returns an observable localized text with the given interpolation parameters in current language.\r\n     * @param key Localizaton key to replace with localized text\r\n     * @param interpolateParams Values to interpolate\r\n     */\r\n    get(key: string | Config.LocalizationWithDefault, ...interpolateParams: string[]): Observable<string>;\r\n    getResource(resourceName: string): any;\r\n    getResource$(resourceName: string): Observable<any>;\r\n    /**\r\n     * Returns localized text with the given interpolation parameters in current language.\r\n     * @param key Localization key to replace with localized text\r\n     * @param interpolateParams Values to intepolate.\r\n     */\r\n    instant(key: string | Config.LocalizationWithDefault, ...interpolateParams: string[]): string;\r\n    localize(resourceName: string, key: string, defaultValue: string): Observable<string>;\r\n    localizeSync(resourceName: string, key: string, defaultValue: string): string;\r\n    localizeWithFallback(resourceNames: string[], keys: string[], defaultValue: string): Observable<string>;\r\n    localizeWithFallbackSync(resourceNames: string[], keys: string[], defaultValue: string): string;\r\n}\r\n"]}