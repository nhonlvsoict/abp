import { Type } from '@angular/core';
import { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, Router, RouterEvent } from '@angular/router';
import * as ɵngcc0 from '@angular/core';
export declare const NavigationEvent: {
    Cancel: typeof NavigationCancel;
    End: typeof NavigationEnd;
    Error: typeof NavigationError;
    Start: typeof NavigationStart;
};
export declare class RouterEvents {
    private router;
    constructor(router: Router);
    getEvents<T extends RouterEventConstructors>(...eventTypes: T): import("rxjs").Observable<T extends Type<infer Ctor>[] ? Ctor : never>;
    getNavigationEvents<T extends NavigationEventKeys>(...navigationEventKeys: T): import("rxjs").Observable<T extends (infer Key)[] ? Key extends "Cancel" | "End" | "Error" | "Start" ? InstanceType<{
        Cancel: typeof NavigationCancel;
        End: typeof NavigationEnd;
        Error: typeof NavigationError;
        Start: typeof NavigationStart;
    }[Key]> : never : never>;
    getAllEvents(): import("rxjs").Observable<import("@angular/router").Event>;
    getAllNavigationEvents(): import("rxjs").Observable<NavigationCancel | NavigationEnd | NavigationError | NavigationStart>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<RouterEvents, never>;
}
declare type RouterEventConstructors = [Type<RouterEvent>, ...Type<RouterEvent>[]];
declare type NavigationEventKeys = [NavigationEventKey, ...NavigationEventKey[]];
declare type NavigationEventType = typeof NavigationEvent;
export declare type NavigationEventKey = keyof NavigationEventType;
export {};

//# sourceMappingURL=router-events.service.d.ts.map