import { Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { Config } from '../models/config';
import { AbpApplicationConfigurationService } from '../proxy/volo/abp/asp-net-core/mvc/application-configurations/abp-application-configuration.service';
import { ConfigStateService } from './config-state.service';
import { SessionStateService } from './session-state.service';
export declare class LocalizationService {
    private sessionState;
    private injector;
    private configState;
    private appConfigService;
    private latestLang;
    private _languageChange$;
    /**
     * Returns currently selected language
     */
    get currentLang(): string;
    get languageChange$(): Observable<string>;
    constructor(sessionState: SessionStateService, injector: Injector, otherInstance: LocalizationService, configState: ConfigStateService, appConfigService: AbpApplicationConfigurationService);
    private listenToSetLanguage;
    registerLocale(locale: string): Promise<void>;
    /**
     * Returns an observable localized text with the given interpolation parameters in current language.
     * @param key Localizaton key to replace with localized text
     * @param interpolateParams Values to interpolate
     */
    get(key: string | Config.LocalizationWithDefault, ...interpolateParams: string[]): Observable<string>;
    getResource(resourceName: string): any;
    getResource$(resourceName: string): Observable<any>;
    /**
     * Returns localized text with the given interpolation parameters in current language.
     * @param key Localization key to replace with localized text
     * @param interpolateParams Values to intepolate.
     */
    instant(key: string | Config.LocalizationWithDefault, ...interpolateParams: string[]): string;
    localize(resourceName: string, key: string, defaultValue: string): Observable<string>;
    localizeSync(resourceName: string, key: string, defaultValue: string): string;
    localizeWithFallback(resourceNames: string[], keys: string[], defaultValue: string): Observable<string>;
    localizeWithFallbackSync(resourceNames: string[], keys: string[], defaultValue: string): string;
}
