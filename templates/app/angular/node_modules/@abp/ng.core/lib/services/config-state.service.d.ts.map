{"version":3,"file":"config-state.service.d.ts","sources":["config-state.service.d.ts"],"names":[],"mappingssourcesContent":["import { Observable } from 'rxjs';\r\nimport { ApplicationConfigurationDto } from '../proxy/volo/abp/asp-net-core/mvc/application-configurations/models';\r\nimport { AbpApplicationConfigurationService } from '../proxy/volo/abp/asp-net-core/mvc/application-configurations/abp-application-configuration.service';\r\nexport declare class ConfigStateService {\r\n    private abpConfigService;\r\n    private readonly store;\r\n    get createOnUpdateStream(): <Slice>(selector: (state: {\r\n        localization?: {\r\n            values?: {\r\n                [x: string]: {\r\n                    [x: string]: string;\r\n                };\r\n            };\r\n            languages?: import(\"../../public-api\").LanguageInfo[];\r\n            currentCulture?: {\r\n                displayName?: string;\r\n                englishName?: string;\r\n                threeLetterIsoLanguageName?: string;\r\n                twoLetterIsoLanguageName?: string;\r\n                isRightToLeft?: boolean;\r\n                cultureName?: string;\r\n                name?: string;\r\n                nativeName?: string;\r\n                dateTimeFormat?: {\r\n                    calendarAlgorithmType?: string;\r\n                    dateTimeFormatLong?: string;\r\n                    shortDatePattern?: string;\r\n                    fullDateTimePattern?: string;\r\n                    dateSeparator?: string;\r\n                    shortTimePattern?: string;\r\n                    longTimePattern?: string;\r\n                };\r\n            };\r\n            defaultResourceName?: string;\r\n            languagesMap?: {\r\n                [x: string]: import(\"../../public-api\").NameValue<string>[];\r\n            };\r\n            languageFilesMap?: {\r\n                [x: string]: import(\"../../public-api\").NameValue<string>[];\r\n            };\r\n        };\r\n        auth?: {\r\n            policies?: {\r\n                [x: string]: boolean;\r\n            };\r\n            grantedPolicies?: {\r\n                [x: string]: boolean;\r\n            };\r\n        };\r\n        setting?: {\r\n            values?: {\r\n                [x: string]: string;\r\n            };\r\n        };\r\n        currentUser?: {\r\n            isAuthenticated?: boolean;\r\n            id?: string;\r\n            tenantId?: string;\r\n            userName?: string;\r\n            name?: string;\r\n            surName?: string;\r\n            email?: string;\r\n            emailVerified?: boolean;\r\n            phoneNumber?: string;\r\n            phoneNumberVerified?: boolean;\r\n            roles?: string[];\r\n            impersonatorUserId?: string;\r\n            impersonatorTenantId?: string;\r\n        };\r\n        features?: {\r\n            values?: {\r\n                [x: string]: string;\r\n            };\r\n        };\r\n        multiTenancy?: {\r\n            isEnabled?: boolean;\r\n        };\r\n        currentTenant?: {\r\n            id?: string;\r\n            name?: string;\r\n            isAvailable?: boolean;\r\n        };\r\n        timing?: {\r\n            timeZone?: {\r\n                iana?: {\r\n                    timeZoneName?: string;\r\n                };\r\n                windows?: {\r\n                    timeZoneId?: string;\r\n                };\r\n            };\r\n        };\r\n        clock?: {\r\n            kind?: string;\r\n        };\r\n        objectExtensions?: {\r\n            modules?: {\r\n                [x: string]: {\r\n                    entities?: {\r\n                        [x: string]: {\r\n                            properties?: {\r\n                                [x: string]: {\r\n                                    type?: string;\r\n                                    typeSimple?: string;\r\n                                    displayName?: {\r\n                                        name?: string;\r\n                                        resource?: string;\r\n                                    };\r\n                                    api?: {\r\n                                        onGet?: {\r\n                                            isAvailable?: boolean;\r\n                                        };\r\n                                        onCreate?: {\r\n                                            isAvailable?: boolean;\r\n                                        };\r\n                                        onUpdate?: {\r\n                                            isAvailable?: boolean;\r\n                                        };\r\n                                    };\r\n                                    ui?: {\r\n                                        onTable?: {\r\n                                            isVisible?: boolean;\r\n                                        };\r\n                                        onCreateForm?: {\r\n                                            isVisible?: boolean;\r\n                                        };\r\n                                        onEditForm?: {\r\n                                            isVisible?: boolean;\r\n                                        };\r\n                                        lookup?: {\r\n                                            url?: string;\r\n                                            resultListPropertyName?: string;\r\n                                            displayPropertyName?: string;\r\n                                            valuePropertyName?: string;\r\n                                            filterParamName?: string;\r\n                                        };\r\n                                    };\r\n                                    attributes?: import(\"../../public-api\").ExtensionPropertyAttributeDto[];\r\n                                    configuration?: {\r\n                                        [x: string]: object;\r\n                                    };\r\n                                    defaultValue?: object;\r\n                                };\r\n                            };\r\n                            configuration?: {\r\n                                [x: string]: object;\r\n                            };\r\n                        };\r\n                    };\r\n                    configuration?: {\r\n                        [x: string]: object;\r\n                    };\r\n                };\r\n            };\r\n            enums?: {\r\n                [x: string]: {\r\n                    fields?: import(\"../../public-api\").ExtensionEnumFieldDto[];\r\n                    localizationResource?: string;\r\n                };\r\n            };\r\n        };\r\n    }) => Slice, filterFn?: (x: Slice) => boolean) => Observable<Slice>;\r\n    constructor(abpConfigService: AbpApplicationConfigurationService);\r\n    setState(state: ApplicationConfigurationDto): void;\r\n    refreshAppState(): Observable<ApplicationConfigurationDto>;\r\n    getOne$(key: string): Observable<any>;\r\n    getOne(key: string): any;\r\n    getAll$(): Observable<ApplicationConfigurationDto>;\r\n    getAll(): ApplicationConfigurationDto;\r\n    getDeep$(keys: string[] | string): Observable<any>;\r\n    getDeep(keys: string[] | string): any;\r\n    getFeature(key: string): string;\r\n    getFeature$(key: string): Observable<string>;\r\n    getFeatures(keys: string[]): {};\r\n    getFeatures$(keys: string[]): Observable<{}>;\r\n    getSetting(key: string): string;\r\n    getSetting$(key: string): Observable<string>;\r\n    getSettings(keyword?: string): Record<string, string>;\r\n    getSettings$(keyword?: string): Observable<Record<string, string>>;\r\n}\r\n"]}