{"version":3,"file":"routes.service.d.ts","sources":["routes.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;AACA;AACA;;AACA","sourcesContent":["import { Injector, OnDestroy } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ABP } from '../models/common';\r\nimport { TreeNode } from '../utils/tree-utils';\r\nexport declare abstract class AbstractTreeService<T extends object> {\r\n    abstract id: string;\r\n    abstract parentId: string;\r\n    abstract hide: (item: T) => boolean;\r\n    abstract sort: (a: T, b: T) => number;\r\n    private _flat$;\r\n    private _tree$;\r\n    private _visible$;\r\n    get flat(): T[];\r\n    get flat$(): Observable<T[]>;\r\n    get tree(): TreeNode<T>[];\r\n    get tree$(): Observable<TreeNode<T>[]>;\r\n    get visible(): TreeNode<T>[];\r\n    get visible$(): Observable<TreeNode<T>[]>;\r\n    protected createTree(items: T[]): TreeNode<T>[];\r\n    private filterWith;\r\n    private findItemsToRemove;\r\n    private publish;\r\n    add(items: T[]): T[];\r\n    find(predicate: (item: TreeNode<T>) => boolean, tree?: TreeNode<T>[]): TreeNode<T> | null;\r\n    patch(identifier: string, props: Partial<T>): T[] | false;\r\n    refresh(): T[];\r\n    remove(identifiers: string[]): T[];\r\n    search(params: Partial<T>, tree?: TreeNode<T>[]): TreeNode<T> | null;\r\n}\r\nexport declare abstract class AbstractNavTreeService<T extends ABP.Nav> extends AbstractTreeService<T> implements OnDestroy {\r\n    protected injector: Injector;\r\n    private subscription;\r\n    private permissionService;\r\n    readonly id = \"name\";\r\n    readonly parentId = \"parentName\";\r\n    readonly hide: (item: T) => boolean;\r\n    readonly sort: (a: T, b: T) => number;\r\n    constructor(injector: Injector);\r\n    protected isGranted({ requiredPolicy }: T): boolean;\r\n    hasChildren(identifier: string): boolean;\r\n    hasInvisibleChild(identifier: string): boolean;\r\n    ngOnDestroy(): void;\r\n}\r\nexport declare class RoutesService extends AbstractNavTreeService<ABP.Route> {\r\n}\r\nexport declare class SettingTabsService extends AbstractNavTreeService<ABP.Tab> {\r\n}\r\n"]}