{"version":3,"file":"environment.service.d.ts","sources":["environment.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { Environment } from '../models/environment';\r\nexport declare class EnvironmentService {\r\n    private readonly store;\r\n    get createOnUpdateStream(): <Slice>(selector: (state: {\r\n        apis?: {\r\n            [x: string]: {\r\n                [x: string]: string;\r\n                url?: string;\r\n                rootNamespace?: string;\r\n            };\r\n            default?: {\r\n                [x: string]: string;\r\n                url?: string;\r\n                rootNamespace?: string;\r\n            };\r\n        };\r\n        application?: {\r\n            name?: string;\r\n            baseUrl?: string;\r\n            logoUrl?: string;\r\n        };\r\n        hmr?: boolean;\r\n        test?: boolean;\r\n        localization?: {\r\n            defaultResourceName?: string;\r\n        };\r\n        oAuthConfig?: {\r\n            clientId?: string;\r\n            redirectUri?: string;\r\n            postLogoutRedirectUri?: string;\r\n            loginUrl?: string;\r\n            scope?: string;\r\n            resource?: string;\r\n            rngUrl?: string;\r\n            oidc?: boolean;\r\n            requestAccessToken?: boolean;\r\n            options?: any;\r\n            issuer?: string;\r\n            logoutUrl?: string;\r\n            clearHashAfterLogin?: boolean;\r\n            tokenEndpoint?: string;\r\n            revocationEndpoint?: string;\r\n            customTokenParameters?: string[];\r\n            userinfoEndpoint?: string;\r\n            responseType?: string;\r\n            showDebugInformation?: boolean;\r\n            silentRefreshRedirectUri?: string;\r\n            silentRefreshMessagePrefix?: string;\r\n            silentRefreshShowIFrame?: boolean;\r\n            siletRefreshTimeout?: number;\r\n            silentRefreshTimeout?: number;\r\n            dummyClientSecret?: string;\r\n            requireHttps?: boolean | \"remoteOnly\";\r\n            strictDiscoveryDocumentValidation?: boolean;\r\n            jwks?: object;\r\n            customQueryParams?: object;\r\n            silentRefreshIFrameName?: string;\r\n            timeoutFactor?: number;\r\n            sessionChecksEnabled?: boolean;\r\n            sessionCheckIntervall?: number;\r\n            sessionCheckIFrameUrl?: string;\r\n            sessionCheckIFrameName?: string;\r\n            disableAtHashCheck?: boolean;\r\n            skipSubjectCheck?: boolean;\r\n            useIdTokenHintForSilentRefresh?: boolean;\r\n            skipIssuerCheck?: boolean;\r\n            fallbackAccessTokenExpirationTimeInSec?: number;\r\n            nonceStateSeparator?: string;\r\n            useHttpBasicAuth?: boolean;\r\n            clockSkewInSec?: number;\r\n            waitForTokenInMsec?: number;\r\n            useSilentRefresh?: any;\r\n            disablePKCE?: boolean;\r\n            openUri?: (uri: string) => void;\r\n        };\r\n        production?: boolean;\r\n        remoteEnv?: {\r\n            url?: string;\r\n            mergeStrategy?: import(\"../models/environment\").customMergeFn | \"deepmerge\" | \"overwrite\";\r\n            method?: string;\r\n            headers?: {\r\n                [x: string]: string;\r\n            };\r\n        };\r\n    }) => Slice, filterFn?: (x: Slice) => boolean) => Observable<Slice>;\r\n    getEnvironment$(): Observable<Environment>;\r\n    getEnvironment(): Environment;\r\n    getApiUrl(key?: string): string;\r\n    getApiUrl$(key?: string): Observable<string>;\r\n    setState(environment: Environment): void;\r\n}\r\n"]}