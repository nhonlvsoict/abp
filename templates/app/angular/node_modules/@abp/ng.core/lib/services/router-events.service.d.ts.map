{"version":3,"file":"router-events.service.d.ts","sources":["router-events.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Type } from '@angular/core';\r\nimport { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, Router, RouterEvent } from '@angular/router';\r\nexport declare const NavigationEvent: {\r\n    Cancel: typeof NavigationCancel;\r\n    End: typeof NavigationEnd;\r\n    Error: typeof NavigationError;\r\n    Start: typeof NavigationStart;\r\n};\r\nexport declare class RouterEvents {\r\n    private router;\r\n    constructor(router: Router);\r\n    getEvents<T extends RouterEventConstructors>(...eventTypes: T): import(\"rxjs\").Observable<T extends Type<infer Ctor>[] ? Ctor : never>;\r\n    getNavigationEvents<T extends NavigationEventKeys>(...navigationEventKeys: T): import(\"rxjs\").Observable<T extends (infer Key)[] ? Key extends \"Cancel\" | \"End\" | \"Error\" | \"Start\" ? InstanceType<{\r\n        Cancel: typeof NavigationCancel;\r\n        End: typeof NavigationEnd;\r\n        Error: typeof NavigationError;\r\n        Start: typeof NavigationStart;\r\n    }[Key]> : never : never>;\r\n    getAllEvents(): import(\"rxjs\").Observable<import(\"@angular/router\").Event>;\r\n    getAllNavigationEvents(): import(\"rxjs\").Observable<NavigationCancel | NavigationEnd | NavigationError | NavigationStart>;\r\n}\r\ndeclare type RouterEventConstructors = [Type<RouterEvent>, ...Type<RouterEvent>[]];\r\ndeclare type NavigationEventKeys = [NavigationEventKey, ...NavigationEventKey[]];\r\ndeclare type NavigationEventType = typeof NavigationEvent;\r\nexport declare type NavigationEventKey = keyof NavigationEventType;\r\nexport {};\r\n"]}