{"version":3,"file":"config.state.d.ts","sources":["config.state.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { State, StateContext, Store } from '@ngxs/store';\r\nimport { PatchConfigState, SetEnvironment } from '../actions/config.actions';\r\nimport { Config } from '../models/config';\r\nimport { ConfigStateService } from '../services/config-state.service';\r\nimport { EnvironmentService } from '../services/environment.service';\r\nimport { SessionStateService } from '../services/session-state.service';\r\nimport { ApplicationConfigurationDto } from '../proxy/volo/abp/asp-net-core/mvc/application-configurations/models';\r\n/**\r\n * @deprecated Use ConfigStateService instead. To be deleted in v5.0.\r\n */\r\nexport declare class ConfigState {\r\n    private http;\r\n    private store;\r\n    private sessionState;\r\n    private environmentService;\r\n    private configState;\r\n    static getAll(state: Config.State): Config.State;\r\n    static getApplicationInfo(state: Config.State): Config.Application;\r\n    static getEnvironment(state: Config.State): Config.Environment;\r\n    static getOne(key: string): (state: Config.State) => any;\r\n    static getDeep(keys: string[] | string): (state: Config.State) => any;\r\n    static getApiUrl(key?: string): (state: Config.State) => string;\r\n    static getFeature(key: string): (state: Config.State) => string;\r\n    static getSetting(key: string): (state: Config.State) => string;\r\n    static getSettings(keyword?: string): (state: Config.State) => import(\"../models\").ABP.Dictionary<string>;\r\n    /**\r\n     * @deprecated use PermissionService's getGrantedPolicyStream or getGrantedPolicy methods.\r\n     */\r\n    static getGrantedPolicy(key: string): (state: Config.State) => boolean;\r\n    static getLocalizationResource(resourceName: string): (state: Config.State) => {\r\n        [key: string]: string;\r\n    };\r\n    static getLocalization(key: string | Config.LocalizationWithDefault, ...interpolateParams: string[]): (state: Config.State) => string;\r\n    constructor(http: HttpClient, store: Store, sessionState: SessionStateService, environmentService: EnvironmentService, configState: ConfigStateService);\r\n    private syncConfigState;\r\n    private syncEnvironment;\r\n    addData({ patchState, dispatch }: StateContext<Config.State>): import(\"rxjs\").Observable<ApplicationConfigurationDto>;\r\n    setEnvironment(_: any, { environment }: SetEnvironment): void;\r\n    setConfig({ patchState, getState }: StateContext<Config.State>, { state }: PatchConfigState): void;\r\n}\r\n"]}