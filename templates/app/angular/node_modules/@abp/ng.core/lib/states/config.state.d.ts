import { HttpClient } from '@angular/common/http';
import { State, StateContext, Store } from '@ngxs/store';
import { PatchConfigState, SetEnvironment } from '../actions/config.actions';
import { Config } from '../models/config';
import { ConfigStateService } from '../services/config-state.service';
import { EnvironmentService } from '../services/environment.service';
import { SessionStateService } from '../services/session-state.service';
import { ApplicationConfigurationDto } from '../proxy/volo/abp/asp-net-core/mvc/application-configurations/models';
/**
 * @deprecated Use ConfigStateService instead. To be deleted in v5.0.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ConfigState {
    private http;
    private store;
    private sessionState;
    private environmentService;
    private configState;
    static getAll(state: Config.State): Config.State;
    static getApplicationInfo(state: Config.State): Config.Application;
    static getEnvironment(state: Config.State): Config.Environment;
    static getOne(key: string): (state: Config.State) => any;
    static getDeep(keys: string[] | string): (state: Config.State) => any;
    static getApiUrl(key?: string): (state: Config.State) => string;
    static getFeature(key: string): (state: Config.State) => string;
    static getSetting(key: string): (state: Config.State) => string;
    static getSettings(keyword?: string): (state: Config.State) => import("../models").ABP.Dictionary<string>;
    /**
     * @deprecated use PermissionService's getGrantedPolicyStream or getGrantedPolicy methods.
     */
    static getGrantedPolicy(key: string): (state: Config.State) => boolean;
    static getLocalizationResource(resourceName: string): (state: Config.State) => {
        [key: string]: string;
    };
    static getLocalization(key: string | Config.LocalizationWithDefault, ...interpolateParams: string[]): (state: Config.State) => string;
    constructor(http: HttpClient, store: Store, sessionState: SessionStateService, environmentService: EnvironmentService, configState: ConfigStateService);
    private syncConfigState;
    private syncEnvironment;
    addData({ patchState, dispatch }: StateContext<Config.State>): import("rxjs").Observable<ApplicationConfigurationDto>;
    setEnvironment(_: any, { environment }: SetEnvironment): void;
    setConfig({ patchState, getState }: StateContext<Config.State>, { state }: PatchConfigState): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ConfigState, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<ConfigState>;
}

//# sourceMappingURL=config.state.d.ts.map