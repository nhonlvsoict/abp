import { __rest } from 'tslib';
import * as i1 from '@abp/ng.core';
import { PermissionService, ConfigStateService, RestService, CORE_OPTIONS, EnvironmentService, coreOptionsFactory, LIST_QUERY_DEBOUNCE_TIME, LOADER_DELAY, BaseCoreModule } from '@abp/ng.core';
import { APP_BASE_HREF } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, Inject, NgModule } from '@angular/core';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { provideRoutes } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import * as i2 from '@angular/common/http';
import { HttpClient } from '@angular/common/http';
import { throwError } from 'rxjs';

class MockPermissionService extends PermissionService {
    constructor(configState) {
        super(configState);
        this.configState = configState;
        this.grantAllPolicies();
    }
    grantAllPolicies() {
        const grantedPolicies = new Proxy({}, {
            get() {
                return true;
            },
        });
        this.configState['store'].deepPatch({ auth: { grantedPolicies } });
    }
    grantPolicies(keys) {
        const grantedPolicies = keys.reduce((policies, key) => {
            policies[key] = true;
            return policies;
        }, {});
        this.configState['store'].deepPatch({ auth: { grantedPolicies } });
    }
}
MockPermissionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MockPermissionService_Factory() { return new MockPermissionService(i0.ɵɵinject(i1.ConfigStateService)); }, token: MockPermissionService, providedIn: "root" });
MockPermissionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
MockPermissionService.ctorParameters = () => [
    { type: ConfigStateService }
];

class MockRestService extends RestService {
    constructor(options, http, environment) {
        super(options, http, environment, null);
        this.options = options;
        this.http = http;
        this.environment = environment;
    }
    handleError(err) {
        return throwError(err);
    }
}
MockRestService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MockRestService_Factory() { return new MockRestService(i0.ɵɵinject(i1.CORE_OPTIONS), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i1.EnvironmentService)); }, token: MockRestService, providedIn: "root" });
MockRestService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
MockRestService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CORE_OPTIONS,] }] },
    { type: HttpClient },
    { type: EnvironmentService }
];

/**
 * CoreTestingModule is the module that will be used in tests
 * and it provides mock alternatives
 */
class CoreTestingModule {
    static withConfig(_a = {}) {
        var { baseHref = '/', listQueryDebounceTime = 0, routes = [] } = _a, options = __rest(_a, ["baseHref", "listQueryDebounceTime", "routes"]);
        return {
            ngModule: CoreTestingModule,
            providers: [
                { provide: APP_BASE_HREF, useValue: baseHref },
                {
                    provide: 'CORE_OPTIONS',
                    useValue: Object.assign({ skipGetAppConfiguration: true }, options),
                },
                {
                    provide: CORE_OPTIONS,
                    useFactory: coreOptionsFactory,
                    deps: ['CORE_OPTIONS'],
                },
                {
                    provide: LIST_QUERY_DEBOUNCE_TIME,
                    useValue: listQueryDebounceTime,
                },
                {
                    provide: PermissionService,
                    useClass: MockPermissionService,
                },
                {
                    provide: RestService,
                    useClass: MockRestService,
                },
                {
                    provide: LOADER_DELAY,
                    useValue: 0,
                },
                provideRoutes(routes),
            ],
        };
    }
}
CoreTestingModule.decorators = [
    { type: NgModule, args: [{
                exports: [RouterTestingModule, BaseCoreModule],
                imports: [NoopAnimationsModule, RouterTestingModule, BaseCoreModule],
            },] }
];

function clearPage(_fixture) {
    if (!document)
        return;
    const elements = document.querySelectorAll('body > *');
    elements.forEach(element => {
        if (/^(abp|ngb)-/i.test(element.tagName))
            document.body.removeChild(element);
    });
}

function wait(fixture, timeout = 0) {
    fixture.detectChanges();
    return new Promise(res => setTimeout(res, timeout));
}

/**
 * Generated bundle index. Do not edit.
 */

export { CoreTestingModule, MockPermissionService, MockRestService, clearPage, wait, MockPermissionService as ɵa, MockRestService as ɵb };
//# sourceMappingURL=abp-ng.core-testing.js.map
