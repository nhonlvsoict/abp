import { SettingTabsService, DynamicLayoutComponent, AuthGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import { ThemeSharedModule } from '@abp/ng.theme.shared';
import { Injectable, Component, NgModule } from '@angular/core';
import { Action, Selector, State, Store, NgxsModule } from '@ngxs/store';
import { PageModule } from '@abp/ng.components/page';
import { Subscription } from 'rxjs';
import { __decorate } from 'tslib';
import { RouterModule } from '@angular/router';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngxs/store';
import * as ɵngcc2 from '@abp/ng.core';
import * as ɵngcc3 from '@abp/ng.components/page';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/router';

function SettingManagementComponent_ng_container_8_li_1_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 11);
    ɵngcc0.ɵɵlistener("click", function SettingManagementComponent_ng_container_8_li_1_Template_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const setting_r2 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.selected = setting_r2; });
    ɵngcc0.ɵɵelementStart(1, "a", 12);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const setting_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("active", setting_r2.name === ctx_r3.selected.name);
    ɵngcc0.ɵɵproperty("id", setting_r2.name + "-tab");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, setting_r2.name));
} }
function SettingManagementComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, SettingManagementComponent_ng_container_8_li_1_Template, 4, 6, "li", 10);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const setting_r2 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("abpPermission", setting_r2.requiredPolicy);
} }
function SettingManagementComponent_div_10_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function SettingManagementComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "div", 14);
    ɵngcc0.ɵɵtemplate(2, SettingManagementComponent_div_10_ng_container_2_Template, 1, 0, "ng-container", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", ctx_r1.selected.name + "-tab");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngComponentOutlet", ctx_r1.selected.component);
} }
class SetSelectedSettingTab {
    constructor(payload) {
        this.payload = payload;
    }
}
SetSelectedSettingTab.type = '[SettingManagement] Set Selected Tab';

let SettingManagementState = class SettingManagementState {
    static getSelectedTab({ selectedTab }) {
        return selectedTab;
    }
    settingManagementAction({ patchState }, { payload }) {
        patchState({
            selectedTab: payload,
        });
    }
};
SettingManagementState.ɵfac = function SettingManagementState_Factory(t) { return new (t || SettingManagementState)(); };
SettingManagementState.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SettingManagementState, factory: function (t) { return SettingManagementState.ɵfac(t); } });
__decorate([
    Action(SetSelectedSettingTab)
], SettingManagementState.prototype, "settingManagementAction", null);
__decorate([
    Selector()
], SettingManagementState, "getSelectedTab", null);
SettingManagementState = __decorate([
    State({
        name: 'SettingManagementState',
        defaults: {},
    })
], SettingManagementState);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SettingManagementState, [{
        type: Injectable
    }], null, null); })();

class SettingManagementComponent {
    constructor(store, settingTabsService) {
        this.store = store;
        this.settingTabsService = settingTabsService;
        this.subscription = new Subscription();
        this.settings = [];
        this.trackByFn = (_, item) => item.name;
    }
    set selected(value) {
        this.store.dispatch(new SetSelectedSettingTab(value));
    }
    get selected() {
        const value = this.store.selectSnapshot(SettingManagementState.getSelectedTab);
        return (value === null || value === void 0 ? void 0 : value.component) ? value : this.settings[0] || {};
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    ngOnInit() {
        this.subscription.add(this.settingTabsService.visible$.subscribe(settings => {
            this.settings = settings;
            if (!this.selected)
                this.selected = this.settings[0];
        }));
    }
}
SettingManagementComponent.ɵfac = function SettingManagementComponent_Factory(t) { return new (t || SettingManagementComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Store), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.SettingTabsService)); };
SettingManagementComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SettingManagementComponent, selectors: [["abp-setting-management"]], decls: 11, vars: 6, consts: [[3, "title"], ["id", "SettingManagementWrapper"], [1, "card"], [1, "card-body"], [1, "row"], [1, "col-12", "col-md-3", "mb-2", "mb-md-0"], ["id", "nav-tab", "role", "tablist", 1, "nav", "flex-column", "nav-pills"], [4, "abpFor", "abpForOf", "abpForTrackBy"], [1, "col-12", "col-md-9"], ["class", "tab-content", 4, "ngIf"], ["class", "nav-item pointer", 3, "click", 4, "abpPermission"], [1, "nav-item", "pointer", 3, "click"], ["role", "tab", 1, "nav-link", 3, "id"], [1, "tab-content"], ["role", "tabpanel", 1, "tab-pane", "fade", "show", "active", 3, "id"], [4, "ngComponentOutlet"]], template: function SettingManagementComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "abp-page", 0);
        ɵngcc0.ɵɵpipe(1, "abpLocalization");
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "div", 5);
        ɵngcc0.ɵɵelementStart(7, "ul", 6);
        ɵngcc0.ɵɵtemplate(8, SettingManagementComponent_ng_container_8_Template, 2, 1, "ng-container", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 8);
        ɵngcc0.ɵɵtemplate(10, SettingManagementComponent_div_10_Template, 3, 2, "div", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 4, "AbpSettingManagement::Settings"));
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵproperty("abpForOf", ctx.settings)("abpForTrackBy", ctx.trackByFn);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.settings.length);
    } }, directives: [ɵngcc3.PageComponent, ɵngcc2.ForDirective, ɵngcc4.NgIf, ɵngcc2.PermissionDirective, ɵngcc4.NgComponentOutlet], pipes: [ɵngcc2.LocalizationPipe], encapsulation: 2 });
SettingManagementComponent.ctorParameters = () => [
    { type: Store },
    { type: SettingTabsService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SettingManagementComponent, [{
        type: Component,
        args: [{
                selector: 'abp-setting-management',
                template: "<abp-page [title]=\"'AbpSettingManagement::Settings' | abpLocalization\">\n  <div id=\"SettingManagementWrapper\">\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <div class=\"row\">\n          <div class=\"col-12 col-md-3 mb-2 mb-md-0\">\n            <ul class=\"nav flex-column nav-pills\" id=\"nav-tab\" role=\"tablist\">\n              <ng-container *abpFor=\"let setting of settings; trackBy: trackByFn\">\n                <li\n                  (click)=\"selected = setting\"\n                  class=\"nav-item pointer\"\n                  *abpPermission=\"setting.requiredPolicy\"\n                >\n                  <a\n                    class=\"nav-link\"\n                    [id]=\"setting.name + '-tab'\"\n                    role=\"tab\"\n                    [class.active]=\"setting.name === selected.name\"\n                    >{{ setting.name | abpLocalization }}</a\n                  >\n                </li>\n              </ng-container>\n            </ul>\n          </div>\n          <div class=\"col-12 col-md-9\">\n            <div *ngIf=\"settings.length\" class=\"tab-content\">\n              <div class=\"tab-pane fade show active\" [id]=\"selected.name + '-tab'\" role=\"tabpanel\">\n                <ng-container *ngComponentOutlet=\"selected.component\"></ng-container>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</abp-page>\n"
            }]
    }], function () { return [{ type: ɵngcc1.Store }, { type: ɵngcc2.SettingTabsService }]; }, null); })();

const ɵ0 = {
    requiredPolicy: 'AbpAccount.SettingManagement',
    replaceableComponent: {
        key: "SettingManagement.SettingManagementComponent" /* SettingManagement */,
        defaultComponent: SettingManagementComponent,
    },
};
const routes = [
    {
        path: '',
        component: DynamicLayoutComponent,
        canActivate: [AuthGuard],
        children: [
            {
                path: '',
                component: ReplaceableRouteContainerComponent,
                data: ɵ0,
            },
        ],
    },
];
class SettingManagementRoutingModule {
}
SettingManagementRoutingModule.ɵfac = function SettingManagementRoutingModule_Factory(t) { return new (t || SettingManagementRoutingModule)(); };
SettingManagementRoutingModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SettingManagementRoutingModule });
SettingManagementRoutingModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[RouterModule.forChild(routes)], RouterModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SettingManagementRoutingModule, [{
        type: NgModule,
        args: [{
                imports: [RouterModule.forChild(routes)],
                exports: [RouterModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SettingManagementRoutingModule, { imports: function () { return [ɵngcc5.RouterModule]; }, exports: function () { return [RouterModule]; } }); })();

class SettingManagementModule {
    static forChild() {
        return {
            ngModule: SettingManagementModule,
            providers: [],
        };
    }
    static forLazy() {
        return new LazyModuleFactory(SettingManagementModule.forChild());
    }
}
SettingManagementModule.ɵfac = function SettingManagementModule_Factory(t) { return new (t || SettingManagementModule)(); };
SettingManagementModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SettingManagementModule });
SettingManagementModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            SettingManagementRoutingModule,
            CoreModule,
            ThemeSharedModule,
            PageModule,
            NgxsModule.forFeature([SettingManagementState]),
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SettingManagementModule, [{
        type: NgModule,
        args: [{
                declarations: [SettingManagementComponent],
                exports: [SettingManagementComponent],
                imports: [
                    SettingManagementRoutingModule,
                    CoreModule,
                    ThemeSharedModule,
                    PageModule,
                    NgxsModule.forFeature([SettingManagementState]),
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SettingManagementModule, { declarations: function () { return [SettingManagementComponent]; }, imports: function () { return [SettingManagementRoutingModule, CoreModule,
        ThemeSharedModule,
        PageModule, ɵngcc1.ɵbc]; }, exports: function () { return [SettingManagementComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { SettingManagementComponent, SettingManagementModule, SettingManagementRoutingModule as ɵa, SettingManagementState as ɵc, SetSelectedSettingTab as ɵd };

//# sourceMappingURL=abp-ng.setting-management.js.map