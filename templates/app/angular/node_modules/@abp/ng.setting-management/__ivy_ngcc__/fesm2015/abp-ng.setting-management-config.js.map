{"version":3,"file":"abp-ng.setting-management-config.js","sources":["../../../packages/setting-management/config/src/providers/route.provider.ts","../../../packages/setting-management/config/src/proxy/email-settings.service.ts","../../../packages/setting-management/config/src/components/email-setting-group/email-setting-group.component.ts","../../../packages/setting-management/config/src/providers/setting-tab.provider.ts","../../../packages/setting-management/config/src/setting-management-config.module.ts","../../../packages/setting-management/config/src/abp-ng.setting-management-config.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAMa,kCAAkC,GAAG;AACjD,IAAC,EAAE,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,aAAa,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE;AAC9F,IAAC;AACD,QAAG,OAAO,EAAE,eAAe;AAC3B,QAAG,UAAU,EAAE,UAAU;AACzB,QAAG,IAAI,EAAE,CAAC,aAAa,EAAE,kBAAkB,CAAC;AAC5C,QAAG,KAAK,EAAE,IAAI;AACd,KAAE;AACF,EAAC;AAEF,SAAgB,eAAe,CAAC,aAA4B;AAC3D,IAAC,OAAO;AACR,QAAG,aAAa,CAAC,GAAG,CAAC;AACrB,YAAK;AACL,gBAAO,IAAI;AACD,gBAAH,IAAI,EAAE,qBAAqB;AAClC,gBAAO,UAAU;AACK,gBAAf,MAAM;AACL,gBAAD,KAAK,EAAE,GAAG;AACjB,gBAAO,SAAS,EAAE,WAAW;AAC7B,aAAM;AACN,SAAI,CAAC,CAAC;AACN,KAAE,CAAC;AACJ,CAAC;AAED,SAAgB,UAAU,CAAC,aAA4B,EAAE,kBAAsC;AAC9F,IAAC,OAAO;AACR,QAAG,kBAAkB,CAAC,QAAQ;AAC9B,aAAM,IAAI,CACH,YAAY,CAAC,CAAC,CAAC,EACf,GAAG,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAC5B;AACN,aAAM,SAAS,CAAC,SAAS,IAClB,aAAa,CAAC,KAAK,kDAAwC,EAAE,SAAS,EAAE,CAAC,CAC1E,CAAC;AACP,KAAE,CAAC;AACJ;AACA;AAAC,MCpCY,oBAAoB;AAChC,IAiBC,YAAoB,WAAwB;AAC9C,QADsB,gBAAW,GAAX,WAAW,CAAa;AAAE,QAjB9C,YAAO,GAAG,mBAAmB,CAAC;AAEhC,QAAE,QAAG,GAAG,MACJ,IAAI,CAAC,WAAW,CAAC,OAAO,CAAwB;AACnD,YAAK,MAAM,EAAE,KAAK;AAClB,YAAK,GAAG,EAAE,kCAAkC;AAC5C,SAAI,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AAE/B,QAAE,WAAM,GAAG,CAAC,KAA6B,KACrC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAY;AACvC,YAAK,MAAM,EAAE,MAAM;AACnB,YAAK,GAAG,EAAE,kCAAkC;AAC5C,YAAK,IAAI,EAAE,KAAK;AAChB,SAAI,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AAE/B,KAAkD;AACjD;sJACD;AAAE,4NApBI;AAAE;EAHP,UAAU,SAAC,rBAIO,YAPV,WAAW;AAAI;UAItB,UAAU,EAAE,MAAM,gBACnB;;;;;4EALyB;AAAC;AAAC,MCWf,0BAA0B;AAAI,IAKzC,YACU,oBAA0C,EAC1C,EAAe,EACf,cAA8B;AACvC,QAHS,yBAAoB,GAApB,oBAAoB,CAAsB;AACtD,QAAY,OAAE,GAAF,EAAE,CAAa;AAC3B,QAAY,mBAAc,GAAd,cAAc,CAAgB;AAC1C,QANE,WAAM,GAAG,KAAK,CAAC;AAEjB,KAIM;AAEN,IAAE,QAAQ;AACT,QAAG,IAAI,CAAC,OAAO,EAAE,CAAC;AAClB,KAAE;AAEH,IAAU,OAAO;AAChB,QAAG,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,GAAG;AAChD,YAAK,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AACzB,SAAI,CAAC,CAAC;AACN,KAAE;AAEH,IAAU,SAAS,CAAC,aAA+B;AAClD,QAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;AAC7B,YAAK,sBAAsB,EAAE,CAAC,aAAa,CAAC,sBAAsB,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AAC1F,YAAK,kBAAkB,EAAE,CAAC,aAAa,CAAC,kBAAkB,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AAClF,YAAK,QAAQ,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC;AACvC,YAAK,QAAQ,EAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AAC9D,YAAK,aAAa,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC;AACjD,YAAK,yBAAyB,EAAE,CAAC,aAAa,CAAC,yBAAyB,CAAC;AACzE,YAAK,UAAU,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC;AAC3C,YAAK,YAAY,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC;AAC/C,YAAK,YAAY,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC;AAC/C,SAAI,CAAC,CAAC;AACN,KAAE;AAEH,IAAE,MAAM;AACP,QAAG,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO;AAAG,YAAD,OAAO;AAEjD,QAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACtB,QAAG,IAAI,CAAC,oBAAoB;AAC5B,aAAM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;AAC7B,aAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC;AACjD,aAAM,SAAS,CAAC;AAChB,YAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,yCAAyC,CAAC,CAAC;AAC9E,YAAO,IAAI,CAAC,OAAO,EAAE,CAAC;AACtB,SAAM,CAAC,CAAC;AACR,KAAE;AACF;wDApDA,SAAS,SAAC,mBACT,QAAQ,EAAE,yBAAyB,mBACnC;;;;;;;;;;;;;gbAGI;AAAE;AACP,YATQ,oBAAoB;AAAK,YAFzB,WAAW;AAAK,YAFN,cAAc;AAAI;;;;kDASc;gBACjD,UAAU,EAAE,CAAC,QAAQ,CAAC,eACvB;;;6IAXsC;AAAC;AAAC,MCK5B,wCAAwC,GAAG;AACvD,IAAC;AACD,QAAG,OAAO,EAAE,eAAe;AAC3B,QAAG,UAAU,EAAE,oBAAoB;AACnC,QAAG,IAAI,EAAE,CAAC,kBAAkB,CAAC;AAC7B,QAAG,KAAK,EAAE,IAAI;AACd,KAAE;AACF,EAAC;AAEF,SAAgB,oBAAoB,CAAC,WAA+B;AACnE,IAAC,OAAO;AACR,QAAG,WAAW,CAAC,GAAG,CAAC;AACnB,YAAK;AACL,gBAAO,IAAI;AACH,gBAAD,KAAK,EAAE,GAAG;AACjB,gBAAO,cAAc,EAAE,4BAA4B;AACnD,gBAAO,SAAS,EAAE,0BAA0B;AAC5C,aAAM;AACN,SAAI,CAAC,CAAC;AACN,KAAE,CAAC;AACJ;AACA;AAAC,MCdY,6BAA6B;AACzC,IAAC,OAAO,OAAO;AAAM,QAClB,OAAO;AACV,YAAK,QAAQ,EAAE,6BAA6B;AAC5C,YAAK,SAAS,EAAE,CAAC,kCAAkC,EAAE,wCAAwC,CAAC;AAC9F,SAAI,CAAC;AACL,KAAE;AACF;2DAZA,QAAQ,SAAC,mBACR,OAAO,EAAE,CAAC,UAAU,EAAE,qBAAqB,CAAC;eAC5C,YAAY,EAAE,CAAC,0BAA0B,CAAC,mBAC1C,OAAO,EAAE,CAAC,0BAA0B,CAAC;YACtC;;;;;;;;;8UACK;AAAC;ACZP;AACC;AACC;AAED;AAAC;AAIiI","sourcesContent":["import { eLayoutType, RoutesService, SettingTabsService } from '@abp/ng.core';\nimport { eThemeSharedRouteNames } from '@abp/ng.theme.shared';\nimport { APP_INITIALIZER } from '@angular/core';\nimport { debounceTime, map } from 'rxjs/operators';\nimport { eSettingManagementRouteNames } from '../enums/route-names';\n\nexport const SETTING_MANAGEMENT_ROUTE_PROVIDERS = [\n  { provide: APP_INITIALIZER, useFactory: configureRoutes, deps: [RoutesService], multi: true },\n  {\n    provide: APP_INITIALIZER,\n    useFactory: hideRoutes,\n    deps: [RoutesService, SettingTabsService],\n    multi: true,\n  },\n];\n\nexport function configureRoutes(routesService: RoutesService) {\n  return () => {\n    routesService.add([\n      {\n        name: eSettingManagementRouteNames.Settings,\n        path: '/setting-management',\n        parentName: eThemeSharedRouteNames.Administration,\n        layout: eLayoutType.application,\n        order: 100,\n        iconClass: 'fa fa-cog',\n      },\n    ]);\n  };\n}\n\nexport function hideRoutes(routesService: RoutesService, settingTabsService: SettingTabsService) {\n  return () => {\n    settingTabsService.visible$\n      .pipe(\n        debounceTime(0),\n        map(nodes => !nodes.length),\n      )\n      .subscribe(invisible =>\n        routesService.patch(eSettingManagementRouteNames.Settings, { invisible }),\n      );\n  };\n}\n","import type { EmailSettingsDto, UpdateEmailSettingsDto } from './models';\nimport { RestService } from '@abp/ng.core';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EmailSettingsService {\n  apiName = 'SettingManagement';\n\n  get = () =>\n    this.restService.request<any, EmailSettingsDto>({\n      method: 'GET',\n      url: '/api/setting-management/emailing',\n    },\n    { apiName: this.apiName });\n\n  update = (input: UpdateEmailSettingsDto) =>\n    this.restService.request<any, void>({\n      method: 'POST',\n      url: '/api/setting-management/emailing',\n      body: input,\n    },\n    { apiName: this.apiName });\n\n  constructor(private restService: RestService) {}\n}\n","import { collapse, ToasterService } from '@abp/ng.theme.shared';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { finalize } from 'rxjs/operators';\nimport { EmailSettingsService } from '../../proxy/email-settings.service';\nimport { EmailSettingsDto } from '../../proxy/models';\n\n@Component({\n  selector: 'abp-email-setting-group',\n  templateUrl: 'email-setting-group.component.html',\n  animations: [collapse],\n})\nexport class EmailSettingGroupComponent implements OnInit {\n  form: FormGroup;\n\n  saving = false;\n\n  constructor(\n    private emailSettingsService: EmailSettingsService,\n    private fb: FormBuilder,\n    private toasterService: ToasterService,\n  ) {}\n\n  ngOnInit() {\n    this.getData();\n  }\n\n  private getData() {\n    this.emailSettingsService.get().subscribe(res => {\n      this.buildForm(res);\n    });\n  }\n\n  private buildForm(emailSettings: EmailSettingsDto) {\n    this.form = this.fb.group({\n      defaultFromDisplayName: [emailSettings.defaultFromDisplayName, [Validators.required]],\n      defaultFromAddress: [emailSettings.defaultFromAddress, [Validators.required]],\n      smtpHost: [emailSettings.smtpHost],\n      smtpPort: [emailSettings.smtpPort, [Validators.required]],\n      smtpEnableSsl: [emailSettings.smtpEnableSsl],\n      smtpUseDefaultCredentials: [emailSettings.smtpUseDefaultCredentials],\n      smtpDomain: [emailSettings.smtpDomain],\n      smtpUserName: [emailSettings.smtpUserName],\n      smtpPassword: [emailSettings.smtpPassword],\n    });\n  }\n\n  submit() {\n    if (this.saving || this.form.invalid) return;\n\n    this.saving = true;\n    this.emailSettingsService\n      .update(this.form.value)\n      .pipe(finalize(() => (this.saving = false)))\n      .subscribe(() => {\n        this.toasterService.success('AbpSettingManagement::SuccessfullySaved');\n        this.getData();\n      });\n  }\n}\n","import { SettingTabsService } from '@abp/ng.core';\nimport { APP_INITIALIZER } from '@angular/core';\nimport { EmailSettingGroupComponent } from '../components/email-setting-group/email-setting-group.component';\nimport { eSettingManamagementSettingTabNames } from '../enums/setting-tab-names';\n\nexport const SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: configureSettingTabs,\n    deps: [SettingTabsService],\n    multi: true,\n  },\n];\n\nexport function configureSettingTabs(settingTabs: SettingTabsService) {\n  return () => {\n    settingTabs.add([\n      {\n        name: eSettingManamagementSettingTabNames.EmailSettingGroup,\n        order: 100,\n        requiredPolicy: 'SettingManagement.Emailing',\n        component: EmailSettingGroupComponent,\n      },\n    ]);\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CoreModule } from '@abp/ng.core';\nimport { EmailSettingGroupComponent } from './components/email-setting-group/email-setting-group.component';\nimport { SETTING_MANAGEMENT_ROUTE_PROVIDERS } from './providers/route.provider';\nimport { SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS } from './providers/setting-tab.provider';\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\n\n@NgModule({\n  imports: [CoreModule, NgxValidateCoreModule],\n  declarations: [EmailSettingGroupComponent],\n  exports: [EmailSettingGroupComponent],\n})\nexport class SettingManagementConfigModule {\n  static forRoot(): ModuleWithProviders<SettingManagementConfigModule> {\n    return {\n      ngModule: SettingManagementConfigModule,\n      providers: [SETTING_MANAGEMENT_ROUTE_PROVIDERS, SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {SETTING_MANAGEMENT_ROUTE_PROVIDERS as ɵb,configureRoutes as ɵc,hideRoutes as ɵd} from './providers/route.provider';\nexport {SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS as ɵe,configureSettingTabs as ɵf} from './providers/setting-tab.provider';\nexport {EmailSettingsService as ɵa} from './proxy/email-settings.service';"]}