{"version":3,"file":"abp-ng.setting-management.js","sources":["../../../packages/setting-management/src/lib/actions/setting-management.actions.ts","../../../packages/setting-management/src/lib/states/setting-management.state.ts","../../../packages/setting-management/src/lib/components/setting-management.component.ts","../../../packages/setting-management/src/lib/setting-management-routing.module.ts","../../../packages/setting-management/src/lib/setting-management.module.ts","../../../packages/setting-management/src/abp-ng.setting-management.ts"],"names":[],"mappings":"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","sourcesContent":["import { ABP } from '@abp/ng.core';\n\nexport class SetSelectedSettingTab {\n  static readonly type = '[SettingManagement] Set Selected Tab';\n  constructor(public payload: ABP.Tab) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\nimport { SetSelectedSettingTab } from '../actions/setting-management.actions';\nimport { SettingManagement } from '../models/setting-management';\n\n@State<SettingManagement.State>({\n  name: 'SettingManagementState',\n  defaults: {},\n})\n@Injectable()\nexport class SettingManagementState {\n  @Selector()\n  static getSelectedTab({ selectedTab }: SettingManagement.State) {\n    return selectedTab;\n  }\n\n  @Action(SetSelectedSettingTab)\n  settingManagementAction(\n    { patchState }: StateContext<SettingManagement.State>,\n    { payload }: SetSelectedSettingTab,\n  ) {\n    patchState({\n      selectedTab: payload,\n    });\n  }\n}\n","import { ABP, SettingTabsService } from '@abp/ng.core';\nimport { Component, OnDestroy, OnInit, TrackByFunction } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { Subscription } from 'rxjs';\nimport { SetSelectedSettingTab } from '../actions/setting-management.actions';\nimport { SettingManagementState } from '../states/setting-management.state';\n\n@Component({\n  selector: 'abp-setting-management',\n  templateUrl: './setting-management.component.html',\n})\nexport class SettingManagementComponent implements OnDestroy, OnInit {\n  private subscription = new Subscription();\n  settings: ABP.Tab[] = [];\n\n  set selected(value: ABP.Tab) {\n    this.store.dispatch(new SetSelectedSettingTab(value));\n  }\n  get selected(): ABP.Tab {\n    const value = this.store.selectSnapshot(SettingManagementState.getSelectedTab);\n\n    return value?.component ? value : this.settings[0] || ({} as ABP.Tab);\n  }\n\n  trackByFn: TrackByFunction<ABP.Tab> = (_, item) => item.name;\n\n  constructor(private store: Store, private settingTabsService: SettingTabsService) {}\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  ngOnInit() {\n    this.subscription.add(\n      this.settingTabsService.visible$.subscribe(settings => {\n        this.settings = settings;\n\n        if (!this.selected) this.selected = this.settings[0];\n      }),\n    );\n  }\n}\n","import {\n  DynamicLayoutComponent,\n  ReplaceableComponents,\n  ReplaceableRouteContainerComponent,\n  AuthGuard,\n} from '@abp/ng.core';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SettingManagementComponent } from './components/setting-management.component';\nimport { eSettingManagementComponents } from './enums/components';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DynamicLayoutComponent,\n    canActivate: [AuthGuard],\n    children: [\n      {\n        path: '',\n        component: ReplaceableRouteContainerComponent,\n        data: {\n          requiredPolicy: 'AbpAccount.SettingManagement',\n          replaceableComponent: {\n            key: eSettingManagementComponents.SettingManagement,\n            defaultComponent: SettingManagementComponent,\n          } as ReplaceableComponents.RouteData,\n        },\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingManagementRoutingModule {}\n","import { CoreModule, LazyModuleFactory } from '@abp/ng.core';\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\nimport { ModuleWithProviders, NgModule, NgModuleFactory } from '@angular/core';\nimport { NgxsModule } from '@ngxs/store';\nimport { PageModule } from '@abp/ng.components/page';\nimport { SettingManagementComponent } from './components/setting-management.component';\nimport { SettingManagementRoutingModule } from './setting-management-routing.module';\nimport { SettingManagementState } from './states/setting-management.state';\n\n@NgModule({\n  declarations: [SettingManagementComponent],\n  exports: [SettingManagementComponent],\n  imports: [\n    SettingManagementRoutingModule,\n    CoreModule,\n    ThemeSharedModule,\n    PageModule,\n    NgxsModule.forFeature([SettingManagementState]),\n  ],\n})\nexport class SettingManagementModule {\n  static forChild(): ModuleWithProviders<SettingManagementModule> {\n    return {\n      ngModule: SettingManagementModule,\n      providers: [],\n    };\n  }\n\n  static forLazy(): NgModuleFactory<SettingManagementModule> {\n    return new LazyModuleFactory(SettingManagementModule.forChild());\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {SetSelectedSettingTab as ɵd} from './lib/actions/setting-management.actions';\nexport {eSettingManagementComponents as ɵb} from './lib/enums/components';\nexport {SettingManagementRoutingModule as ɵa} from './lib/setting-management-routing.module';\nexport {SettingManagementState as ɵc} from './lib/states/setting-management.state';"]}