import * as i1 from '@abp/ng.core';
import { RoutesService, SettingTabsService, RestService, CoreModule } from '@abp/ng.core';
import * as i0 from '@angular/core';
import { APP_INITIALIZER, Injectable, Component, NgModule } from '@angular/core';
import { debounceTime, map, finalize } from 'rxjs/operators';
import { collapse, ToasterService } from '@abp/ng.theme.shared';
import { Validators, FormBuilder } from '@angular/forms';
import { NgxValidateCoreModule } from '@ngx-validate/core';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@abp/ng.core';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@abp/ng.theme.shared';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@ngx-validate/core';

const _c0 = function () { return { time: "200ms", easing: "linear" }; };
const _c1 = function (a0, a1) { return { value: a0, params: a1 }; };
function EmailSettingGroupComponent_form_4_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "form", 2);
    ɵngcc0.ɵɵlistener("ngSubmit", function EmailSettingGroupComponent_form_4_Template_form_ngSubmit_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.submit(); });
    ɵngcc0.ɵɵelementStart(1, "div", 3);
    ɵngcc0.ɵɵelementStart(2, "label");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(5, "input", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 3);
    ɵngcc0.ɵɵelementStart(7, "label");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(10, "input", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "div", 3);
    ɵngcc0.ɵɵelementStart(12, "label");
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵpipe(14, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(15, "input", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(16, "div", 3);
    ɵngcc0.ɵɵelementStart(17, "label");
    ɵngcc0.ɵɵtext(18);
    ɵngcc0.ɵɵpipe(19, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(20, "input", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "div", 8);
    ɵngcc0.ɵɵelement(22, "input", 9);
    ɵngcc0.ɵɵelementStart(23, "label", 10);
    ɵngcc0.ɵɵtext(24);
    ɵngcc0.ɵɵpipe(25, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(26, "div", 8);
    ɵngcc0.ɵɵelement(27, "input", 11);
    ɵngcc0.ɵɵelementStart(28, "label", 12);
    ɵngcc0.ɵɵtext(29);
    ɵngcc0.ɵɵpipe(30, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(31, "div");
    ɵngcc0.ɵɵelementStart(32, "div", 3);
    ɵngcc0.ɵɵelementStart(33, "label");
    ɵngcc0.ɵɵtext(34);
    ɵngcc0.ɵɵpipe(35, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(36, "input", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(37, "div", 3);
    ɵngcc0.ɵɵelementStart(38, "label");
    ɵngcc0.ɵɵtext(39);
    ɵngcc0.ɵɵpipe(40, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(41, "input", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(42, "div", 3);
    ɵngcc0.ɵɵelementStart(43, "label");
    ɵngcc0.ɵɵtext(44);
    ɵngcc0.ɵɵpipe(45, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(46, "input", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(47, "hr");
    ɵngcc0.ɵɵelementStart(48, "button", 16);
    ɵngcc0.ɵɵtext(49);
    ɵngcc0.ɵɵpipe(50, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("formGroup", ctx_r0.form);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 12, "AbpSettingManagement::DefaultFromDisplayName"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(9, 14, "AbpSettingManagement::DefaultFromAddress"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(14, 16, "AbpSettingManagement::SmtpHost"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(19, 18, "AbpSettingManagement::SmtpPort"));
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(25, 20, "AbpSettingManagement::SmtpEnableSsl"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(30, 22, "AbpSettingManagement::SmtpUseDefaultCredentials"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("@collapse", ɵngcc0.ɵɵpureFunction2(33, _c1, ctx_r0.form.get("smtpUseDefaultCredentials").value ? "collapsed" : "expanded", ɵngcc0.ɵɵpureFunction0(32, _c0)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(35, 24, "AbpSettingManagement::SmtpDomain"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(40, 26, "AbpSettingManagement::SmtpUserName"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(45, 28, "AbpSettingManagement::SmtpPassword"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(50, 30, "AbpSettingManagement::Save"), " ");
} }
const SETTING_MANAGEMENT_ROUTE_PROVIDERS = [
    { provide: APP_INITIALIZER, useFactory: configureRoutes, deps: [RoutesService], multi: true },
    {
        provide: APP_INITIALIZER,
        useFactory: hideRoutes,
        deps: [RoutesService, SettingTabsService],
        multi: true,
    },
];
function configureRoutes(routesService) {
    return () => {
        routesService.add([
            {
                name: "AbpSettingManagement::Settings" /* Settings */,
                path: '/setting-management',
                parentName: "AbpUiNavigation::Menu:Administration" /* Administration */,
                layout: "application" /* application */,
                order: 100,
                iconClass: 'fa fa-cog',
            },
        ]);
    };
}
function hideRoutes(routesService, settingTabsService) {
    return () => {
        settingTabsService.visible$
            .pipe(debounceTime(0), map(nodes => !nodes.length))
            .subscribe(invisible => routesService.patch("AbpSettingManagement::Settings" /* Settings */, { invisible }));
    };
}

class EmailSettingsService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'SettingManagement';
        this.get = () => this.restService.request({
            method: 'GET',
            url: '/api/setting-management/emailing',
        }, { apiName: this.apiName });
        this.update = (input) => this.restService.request({
            method: 'POST',
            url: '/api/setting-management/emailing',
            body: input,
        }, { apiName: this.apiName });
    }
}
EmailSettingsService.ɵfac = function EmailSettingsService_Factory(t) { return new (t || EmailSettingsService)(ɵngcc0.ɵɵinject(ɵngcc1.RestService)); };
EmailSettingsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function EmailSettingsService_Factory() { return new EmailSettingsService(i0.ɵɵinject(i1.RestService)); }, token: EmailSettingsService, providedIn: "root" });
EmailSettingsService.ctorParameters = () => [
    { type: RestService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EmailSettingsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.RestService }]; }, null); })();

class EmailSettingGroupComponent {
    constructor(emailSettingsService, fb, toasterService) {
        this.emailSettingsService = emailSettingsService;
        this.fb = fb;
        this.toasterService = toasterService;
        this.saving = false;
    }
    ngOnInit() {
        this.getData();
    }
    getData() {
        this.emailSettingsService.get().subscribe(res => {
            this.buildForm(res);
        });
    }
    buildForm(emailSettings) {
        this.form = this.fb.group({
            defaultFromDisplayName: [emailSettings.defaultFromDisplayName, [Validators.required]],
            defaultFromAddress: [emailSettings.defaultFromAddress, [Validators.required]],
            smtpHost: [emailSettings.smtpHost],
            smtpPort: [emailSettings.smtpPort, [Validators.required]],
            smtpEnableSsl: [emailSettings.smtpEnableSsl],
            smtpUseDefaultCredentials: [emailSettings.smtpUseDefaultCredentials],
            smtpDomain: [emailSettings.smtpDomain],
            smtpUserName: [emailSettings.smtpUserName],
            smtpPassword: [emailSettings.smtpPassword],
        });
    }
    submit() {
        if (this.saving || this.form.invalid)
            return;
        this.saving = true;
        this.emailSettingsService
            .update(this.form.value)
            .pipe(finalize(() => (this.saving = false)))
            .subscribe(() => {
            this.toasterService.success('AbpSettingManagement::SuccessfullySaved');
            this.getData();
        });
    }
}
EmailSettingGroupComponent.ɵfac = function EmailSettingGroupComponent_Factory(t) { return new (t || EmailSettingGroupComponent)(ɵngcc0.ɵɵdirectiveInject(EmailSettingsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ToasterService)); };
EmailSettingGroupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: EmailSettingGroupComponent, selectors: [["abp-email-setting-group"]], decls: 5, vars: 4, consts: [[1, "my-3"], ["validateOnSubmit", "", 3, "formGroup", "ngSubmit", 4, "ngIf"], ["validateOnSubmit", "", 3, "formGroup", "ngSubmit"], [1, "form-group"], ["type", "text", "formControlName", "defaultFromDisplayName", 1, "form-control"], ["type", "text", "formControlName", "defaultFromAddress", 1, "form-control"], ["type", "text", "formControlName", "smtpHost", 1, "form-control"], ["type", "number", "formControlName", "smtpPort", 1, "form-control"], [1, "custom-checkbox", "custom-control", "mb-2"], ["type", "checkbox", "id", "smtp-enable-ssl", "formControlName", "smtpEnableSsl", 1, "custom-control-input"], ["for", "smtp-enable-ssl", 1, "custom-control-label"], ["type", "checkbox", "id", "smtp-use-default-credentials", "formControlName", "smtpUseDefaultCredentials", 1, "custom-control-input"], ["for", "smtp-use-default-credentials", 1, "custom-control-label"], ["type", "text", "formControlName", "smtpDomain", 1, "form-control"], ["type", "text", "formControlName", "smtpUserName", 1, "form-control"], ["type", "text", "formControlName", "smtpPassword", 1, "form-control"], ["type", "submit", 1, "btn", "btn-primary"]], template: function EmailSettingGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h2");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "abpLocalization");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(3, "hr", 0);
        ɵngcc0.ɵɵtemplate(4, EmailSettingGroupComponent_form_4_Template, 51, 36, "form", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 2, "AbpSettingManagement::Menu:Emailing"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form);
    } }, directives: [ɵngcc4.NgIf, ɵngcc2.ɵNgNoValidate, ɵngcc2.NgControlStatusGroup, ɵngcc1.FormSubmitDirective, ɵngcc2.FormGroupDirective, ɵngcc5.ValidationGroupDirective, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.FormControlName, ɵngcc5.ValidationDirective, ɵngcc2.NumberValueAccessor, ɵngcc2.CheckboxControlValueAccessor], pipes: [ɵngcc1.LocalizationPipe], encapsulation: 2, data: { animation: [collapse] } });
EmailSettingGroupComponent.ctorParameters = () => [
    { type: EmailSettingsService },
    { type: FormBuilder },
    { type: ToasterService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EmailSettingGroupComponent, [{
        type: Component,
        args: [{
                selector: 'abp-email-setting-group',
                template: "<h2>{{ 'AbpSettingManagement::Menu:Emailing' | abpLocalization }}</h2>\n\n<hr class=\"my-3\" />\n\n<form *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"submit()\" validateOnSubmit>\n  <div class=\"form-group\">\n    <label>{{ 'AbpSettingManagement::DefaultFromDisplayName' | abpLocalization }}</label>\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromDisplayName\" />\n  </div>\n  <div class=\"form-group\">\n    <label>{{ 'AbpSettingManagement::DefaultFromAddress' | abpLocalization }}</label>\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromAddress\" />\n  </div>\n  <div class=\"form-group\">\n    <label>{{ 'AbpSettingManagement::SmtpHost' | abpLocalization }}</label>\n    <input type=\"text\" class=\"form-control\" formControlName=\"smtpHost\" />\n  </div>\n  <div class=\"form-group\">\n    <label>{{ 'AbpSettingManagement::SmtpPort' | abpLocalization }}</label>\n    <input type=\"number\" class=\"form-control\" formControlName=\"smtpPort\" />\n  </div>\n\n  <div class=\"custom-checkbox custom-control mb-2\">\n    <input\n      type=\"checkbox\"\n      id=\"smtp-enable-ssl\"\n      class=\"custom-control-input\"\n      formControlName=\"smtpEnableSsl\"\n    />\n    <label class=\"custom-control-label\" for=\"smtp-enable-ssl\">{{\n      'AbpSettingManagement::SmtpEnableSsl' | abpLocalization\n    }}</label>\n  </div>\n  <div class=\"custom-checkbox custom-control mb-2\">\n    <input\n      type=\"checkbox\"\n      id=\"smtp-use-default-credentials\"\n      class=\"custom-control-input\"\n      formControlName=\"smtpUseDefaultCredentials\"\n    />\n    <label class=\"custom-control-label\" for=\"smtp-use-default-credentials\">{{\n      'AbpSettingManagement::SmtpUseDefaultCredentials' | abpLocalization\n    }}</label>\n  </div>\n\n  <div\n    [@collapse]=\"{\n      value: form.get('smtpUseDefaultCredentials').value ? 'collapsed' : 'expanded',\n      params: { time: '200ms', easing: 'linear' }\n    }\"\n  >\n    <div class=\"form-group\">\n      <label>{{ 'AbpSettingManagement::SmtpDomain' | abpLocalization }}</label>\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpDomain\" />\n    </div>\n\n    <div class=\"form-group\">\n      <label>{{ 'AbpSettingManagement::SmtpUserName' | abpLocalization }}</label>\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpUserName\" />\n    </div>\n\n    <div class=\"form-group\">\n      <label>{{ 'AbpSettingManagement::SmtpPassword' | abpLocalization }}</label>\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpPassword\" />\n    </div>\n  </div>\n\n  <hr />\n\n  <button type=\"submit\" class=\"btn btn-primary\">\n    {{ 'AbpSettingManagement::Save' | abpLocalization }}\n  </button>\n</form>\n",
                animations: [collapse]
            }]
    }], function () { return [{ type: EmailSettingsService }, { type: ɵngcc2.FormBuilder }, { type: ɵngcc3.ToasterService }]; }, null); })();

const SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS = [
    {
        provide: APP_INITIALIZER,
        useFactory: configureSettingTabs,
        deps: [SettingTabsService],
        multi: true,
    },
];
function configureSettingTabs(settingTabs) {
    return () => {
        settingTabs.add([
            {
                name: "AbpSettingManagement::Menu:Emailing" /* EmailSettingGroup */,
                order: 100,
                requiredPolicy: 'SettingManagement.Emailing',
                component: EmailSettingGroupComponent,
            },
        ]);
    };
}

class SettingManagementConfigModule {
    static forRoot() {
        return {
            ngModule: SettingManagementConfigModule,
            providers: [SETTING_MANAGEMENT_ROUTE_PROVIDERS, SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS],
        };
    }
}
SettingManagementConfigModule.ɵfac = function SettingManagementConfigModule_Factory(t) { return new (t || SettingManagementConfigModule)(); };
SettingManagementConfigModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SettingManagementConfigModule });
SettingManagementConfigModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CoreModule, NgxValidateCoreModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SettingManagementConfigModule, [{
        type: NgModule,
        args: [{
                imports: [CoreModule, NgxValidateCoreModule],
                declarations: [EmailSettingGroupComponent],
                exports: [EmailSettingGroupComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SettingManagementConfigModule, { declarations: function () { return [EmailSettingGroupComponent]; }, imports: function () { return [CoreModule, NgxValidateCoreModule]; }, exports: function () { return [EmailSettingGroupComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { EmailSettingGroupComponent, EmailSettingsService, SETTING_MANAGEMENT_ROUTE_PROVIDERS, SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS, SettingManagementConfigModule, configureRoutes, configureSettingTabs, hideRoutes, EmailSettingsService as ɵa, SETTING_MANAGEMENT_ROUTE_PROVIDERS as ɵb, configureRoutes as ɵc, hideRoutes as ɵd, SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS as ɵe, configureSettingTabs as ɵf };

//# sourceMappingURL=abp-ng.setting-management-config.js.map