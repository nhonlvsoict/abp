import * as i1 from '@abp/ng.core';
import { RoutesService, SettingTabsService, RestService, CoreModule } from '@abp/ng.core';
import * as i0 from '@angular/core';
import { APP_INITIALIZER, Injectable, Component, NgModule } from '@angular/core';
import { debounceTime, map, finalize } from 'rxjs/operators';
import { collapse, ToasterService } from '@abp/ng.theme.shared';
import { Validators, FormBuilder } from '@angular/forms';
import { NgxValidateCoreModule } from '@ngx-validate/core';

const SETTING_MANAGEMENT_ROUTE_PROVIDERS = [
    { provide: APP_INITIALIZER, useFactory: configureRoutes, deps: [RoutesService], multi: true },
    {
        provide: APP_INITIALIZER,
        useFactory: hideRoutes,
        deps: [RoutesService, SettingTabsService],
        multi: true,
    },
];
function configureRoutes(routesService) {
    return () => {
        routesService.add([
            {
                name: "AbpSettingManagement::Settings" /* Settings */,
                path: '/setting-management',
                parentName: "AbpUiNavigation::Menu:Administration" /* Administration */,
                layout: "application" /* application */,
                order: 100,
                iconClass: 'fa fa-cog',
            },
        ]);
    };
}
function hideRoutes(routesService, settingTabsService) {
    return () => {
        settingTabsService.visible$
            .pipe(debounceTime(0), map(nodes => !nodes.length))
            .subscribe(invisible => routesService.patch("AbpSettingManagement::Settings" /* Settings */, { invisible }));
    };
}

class EmailSettingsService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'SettingManagement';
        this.get = () => this.restService.request({
            method: 'GET',
            url: '/api/setting-management/emailing',
        }, { apiName: this.apiName });
        this.update = (input) => this.restService.request({
            method: 'POST',
            url: '/api/setting-management/emailing',
            body: input,
        }, { apiName: this.apiName });
    }
}
EmailSettingsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function EmailSettingsService_Factory() { return new EmailSettingsService(i0.ɵɵinject(i1.RestService)); }, token: EmailSettingsService, providedIn: "root" });
EmailSettingsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
EmailSettingsService.ctorParameters = () => [
    { type: RestService }
];

class EmailSettingGroupComponent {
    constructor(emailSettingsService, fb, toasterService) {
        this.emailSettingsService = emailSettingsService;
        this.fb = fb;
        this.toasterService = toasterService;
        this.saving = false;
    }
    ngOnInit() {
        this.getData();
    }
    getData() {
        this.emailSettingsService.get().subscribe(res => {
            this.buildForm(res);
        });
    }
    buildForm(emailSettings) {
        this.form = this.fb.group({
            defaultFromDisplayName: [emailSettings.defaultFromDisplayName, [Validators.required]],
            defaultFromAddress: [emailSettings.defaultFromAddress, [Validators.required]],
            smtpHost: [emailSettings.smtpHost],
            smtpPort: [emailSettings.smtpPort, [Validators.required]],
            smtpEnableSsl: [emailSettings.smtpEnableSsl],
            smtpUseDefaultCredentials: [emailSettings.smtpUseDefaultCredentials],
            smtpDomain: [emailSettings.smtpDomain],
            smtpUserName: [emailSettings.smtpUserName],
            smtpPassword: [emailSettings.smtpPassword],
        });
    }
    submit() {
        if (this.saving || this.form.invalid)
            return;
        this.saving = true;
        this.emailSettingsService
            .update(this.form.value)
            .pipe(finalize(() => (this.saving = false)))
            .subscribe(() => {
            this.toasterService.success('AbpSettingManagement::SuccessfullySaved');
            this.getData();
        });
    }
}
EmailSettingGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-email-setting-group',
                template: "<h2>{{ 'AbpSettingManagement::Menu:Emailing' | abpLocalization }}</h2>\n\n<hr class=\"my-3\" />\n\n<form *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"submit()\" validateOnSubmit>\n  <div class=\"form-group\">\n    <label>{{ 'AbpSettingManagement::DefaultFromDisplayName' | abpLocalization }}</label>\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromDisplayName\" />\n  </div>\n  <div class=\"form-group\">\n    <label>{{ 'AbpSettingManagement::DefaultFromAddress' | abpLocalization }}</label>\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromAddress\" />\n  </div>\n  <div class=\"form-group\">\n    <label>{{ 'AbpSettingManagement::SmtpHost' | abpLocalization }}</label>\n    <input type=\"text\" class=\"form-control\" formControlName=\"smtpHost\" />\n  </div>\n  <div class=\"form-group\">\n    <label>{{ 'AbpSettingManagement::SmtpPort' | abpLocalization }}</label>\n    <input type=\"number\" class=\"form-control\" formControlName=\"smtpPort\" />\n  </div>\n\n  <div class=\"custom-checkbox custom-control mb-2\">\n    <input\n      type=\"checkbox\"\n      id=\"smtp-enable-ssl\"\n      class=\"custom-control-input\"\n      formControlName=\"smtpEnableSsl\"\n    />\n    <label class=\"custom-control-label\" for=\"smtp-enable-ssl\">{{\n      'AbpSettingManagement::SmtpEnableSsl' | abpLocalization\n    }}</label>\n  </div>\n  <div class=\"custom-checkbox custom-control mb-2\">\n    <input\n      type=\"checkbox\"\n      id=\"smtp-use-default-credentials\"\n      class=\"custom-control-input\"\n      formControlName=\"smtpUseDefaultCredentials\"\n    />\n    <label class=\"custom-control-label\" for=\"smtp-use-default-credentials\">{{\n      'AbpSettingManagement::SmtpUseDefaultCredentials' | abpLocalization\n    }}</label>\n  </div>\n\n  <div\n    [@collapse]=\"{\n      value: form.get('smtpUseDefaultCredentials').value ? 'collapsed' : 'expanded',\n      params: { time: '200ms', easing: 'linear' }\n    }\"\n  >\n    <div class=\"form-group\">\n      <label>{{ 'AbpSettingManagement::SmtpDomain' | abpLocalization }}</label>\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpDomain\" />\n    </div>\n\n    <div class=\"form-group\">\n      <label>{{ 'AbpSettingManagement::SmtpUserName' | abpLocalization }}</label>\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpUserName\" />\n    </div>\n\n    <div class=\"form-group\">\n      <label>{{ 'AbpSettingManagement::SmtpPassword' | abpLocalization }}</label>\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpPassword\" />\n    </div>\n  </div>\n\n  <hr />\n\n  <button type=\"submit\" class=\"btn btn-primary\">\n    {{ 'AbpSettingManagement::Save' | abpLocalization }}\n  </button>\n</form>\n",
                animations: [collapse]
            },] }
];
EmailSettingGroupComponent.ctorParameters = () => [
    { type: EmailSettingsService },
    { type: FormBuilder },
    { type: ToasterService }
];

const SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS = [
    {
        provide: APP_INITIALIZER,
        useFactory: configureSettingTabs,
        deps: [SettingTabsService],
        multi: true,
    },
];
function configureSettingTabs(settingTabs) {
    return () => {
        settingTabs.add([
            {
                name: "AbpSettingManagement::Menu:Emailing" /* EmailSettingGroup */,
                order: 100,
                requiredPolicy: 'SettingManagement.Emailing',
                component: EmailSettingGroupComponent,
            },
        ]);
    };
}

class SettingManagementConfigModule {
    static forRoot() {
        return {
            ngModule: SettingManagementConfigModule,
            providers: [SETTING_MANAGEMENT_ROUTE_PROVIDERS, SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS],
        };
    }
}
SettingManagementConfigModule.decorators = [
    { type: NgModule, args: [{
                imports: [CoreModule, NgxValidateCoreModule],
                declarations: [EmailSettingGroupComponent],
                exports: [EmailSettingGroupComponent],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { EmailSettingGroupComponent, EmailSettingsService, SETTING_MANAGEMENT_ROUTE_PROVIDERS, SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS, SettingManagementConfigModule, configureRoutes, configureSettingTabs, hideRoutes, EmailSettingsService as ɵa, SETTING_MANAGEMENT_ROUTE_PROVIDERS as ɵb, configureRoutes as ɵc, hideRoutes as ɵd, SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS as ɵe, configureSettingTabs as ɵf };
//# sourceMappingURL=abp-ng.setting-management-config.js.map
