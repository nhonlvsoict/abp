{"version":3,"file":"abp-ng.setting-management-config.js","sources":["../../../packages/setting-management/config/src/providers/route.provider.ts","../../../packages/setting-management/config/src/proxy/email-settings.service.ts","../../../packages/setting-management/config/src/components/email-setting-group/email-setting-group.component.ts","../../../packages/setting-management/config/src/providers/setting-tab.provider.ts","../../../packages/setting-management/config/src/setting-management-config.module.ts","../../../packages/setting-management/config/src/abp-ng.setting-management-config.ts"],"sourcesContent":["import { eLayoutType, RoutesService, SettingTabsService } from '@abp/ng.core';\nimport { eThemeSharedRouteNames } from '@abp/ng.theme.shared';\nimport { APP_INITIALIZER } from '@angular/core';\nimport { debounceTime, map } from 'rxjs/operators';\nimport { eSettingManagementRouteNames } from '../enums/route-names';\n\nexport const SETTING_MANAGEMENT_ROUTE_PROVIDERS = [\n  { provide: APP_INITIALIZER, useFactory: configureRoutes, deps: [RoutesService], multi: true },\n  {\n    provide: APP_INITIALIZER,\n    useFactory: hideRoutes,\n    deps: [RoutesService, SettingTabsService],\n    multi: true,\n  },\n];\n\nexport function configureRoutes(routesService: RoutesService) {\n  return () => {\n    routesService.add([\n      {\n        name: eSettingManagementRouteNames.Settings,\n        path: '/setting-management',\n        parentName: eThemeSharedRouteNames.Administration,\n        layout: eLayoutType.application,\n        order: 100,\n        iconClass: 'fa fa-cog',\n      },\n    ]);\n  };\n}\n\nexport function hideRoutes(routesService: RoutesService, settingTabsService: SettingTabsService) {\n  return () => {\n    settingTabsService.visible$\n      .pipe(\n        debounceTime(0),\n        map(nodes => !nodes.length),\n      )\n      .subscribe(invisible =>\n        routesService.patch(eSettingManagementRouteNames.Settings, { invisible }),\n      );\n  };\n}\n","import type { EmailSettingsDto, UpdateEmailSettingsDto } from './models';\nimport { RestService } from '@abp/ng.core';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EmailSettingsService {\n  apiName = 'SettingManagement';\n\n  get = () =>\n    this.restService.request<any, EmailSettingsDto>({\n      method: 'GET',\n      url: '/api/setting-management/emailing',\n    },\n    { apiName: this.apiName });\n\n  update = (input: UpdateEmailSettingsDto) =>\n    this.restService.request<any, void>({\n      method: 'POST',\n      url: '/api/setting-management/emailing',\n      body: input,\n    },\n    { apiName: this.apiName });\n\n  constructor(private restService: RestService) {}\n}\n","import { collapse, ToasterService } from '@abp/ng.theme.shared';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { finalize } from 'rxjs/operators';\nimport { EmailSettingsService } from '../../proxy/email-settings.service';\nimport { EmailSettingsDto } from '../../proxy/models';\n\n@Component({\n  selector: 'abp-email-setting-group',\n  templateUrl: 'email-setting-group.component.html',\n  animations: [collapse],\n})\nexport class EmailSettingGroupComponent implements OnInit {\n  form: FormGroup;\n\n  saving = false;\n\n  constructor(\n    private emailSettingsService: EmailSettingsService,\n    private fb: FormBuilder,\n    private toasterService: ToasterService,\n  ) {}\n\n  ngOnInit() {\n    this.getData();\n  }\n\n  private getData() {\n    this.emailSettingsService.get().subscribe(res => {\n      this.buildForm(res);\n    });\n  }\n\n  private buildForm(emailSettings: EmailSettingsDto) {\n    this.form = this.fb.group({\n      defaultFromDisplayName: [emailSettings.defaultFromDisplayName, [Validators.required]],\n      defaultFromAddress: [emailSettings.defaultFromAddress, [Validators.required]],\n      smtpHost: [emailSettings.smtpHost],\n      smtpPort: [emailSettings.smtpPort, [Validators.required]],\n      smtpEnableSsl: [emailSettings.smtpEnableSsl],\n      smtpUseDefaultCredentials: [emailSettings.smtpUseDefaultCredentials],\n      smtpDomain: [emailSettings.smtpDomain],\n      smtpUserName: [emailSettings.smtpUserName],\n      smtpPassword: [emailSettings.smtpPassword],\n    });\n  }\n\n  submit() {\n    if (this.saving || this.form.invalid) return;\n\n    this.saving = true;\n    this.emailSettingsService\n      .update(this.form.value)\n      .pipe(finalize(() => (this.saving = false)))\n      .subscribe(() => {\n        this.toasterService.success('AbpSettingManagement::SuccessfullySaved');\n        this.getData();\n      });\n  }\n}\n","import { SettingTabsService } from '@abp/ng.core';\nimport { APP_INITIALIZER } from '@angular/core';\nimport { EmailSettingGroupComponent } from '../components/email-setting-group/email-setting-group.component';\nimport { eSettingManamagementSettingTabNames } from '../enums/setting-tab-names';\n\nexport const SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: configureSettingTabs,\n    deps: [SettingTabsService],\n    multi: true,\n  },\n];\n\nexport function configureSettingTabs(settingTabs: SettingTabsService) {\n  return () => {\n    settingTabs.add([\n      {\n        name: eSettingManamagementSettingTabNames.EmailSettingGroup,\n        order: 100,\n        requiredPolicy: 'SettingManagement.Emailing',\n        component: EmailSettingGroupComponent,\n      },\n    ]);\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CoreModule } from '@abp/ng.core';\nimport { EmailSettingGroupComponent } from './components/email-setting-group/email-setting-group.component';\nimport { SETTING_MANAGEMENT_ROUTE_PROVIDERS } from './providers/route.provider';\nimport { SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS } from './providers/setting-tab.provider';\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\n\n@NgModule({\n  imports: [CoreModule, NgxValidateCoreModule],\n  declarations: [EmailSettingGroupComponent],\n  exports: [EmailSettingGroupComponent],\n})\nexport class SettingManagementConfigModule {\n  static forRoot(): ModuleWithProviders<SettingManagementConfigModule> {\n    return {\n      ngModule: SettingManagementConfigModule,\n      providers: [SETTING_MANAGEMENT_ROUTE_PROVIDERS, SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {SETTING_MANAGEMENT_ROUTE_PROVIDERS as ɵb,configureRoutes as ɵc,hideRoutes as ɵd} from './providers/route.provider';\nexport {SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS as ɵe,configureSettingTabs as ɵf} from './providers/setting-tab.provider';\nexport {EmailSettingsService as ɵa} from './proxy/email-settings.service';"],"names":[],"mappings":"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"}