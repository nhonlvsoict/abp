import { SettingTabsService, DynamicLayoutComponent, AuthGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import { ThemeSharedModule } from '@abp/ng.theme.shared';
import { Injectable, Component, NgModule } from '@angular/core';
import { Action, Selector, State, Store, NgxsModule } from '@ngxs/store';
import { PageModule } from '@abp/ng.components/page';
import { Subscription } from 'rxjs';
import { __decorate } from 'tslib';
import { RouterModule } from '@angular/router';

class SetSelectedSettingTab {
    constructor(payload) {
        this.payload = payload;
    }
}
SetSelectedSettingTab.type = '[SettingManagement] Set Selected Tab';

let SettingManagementState = class SettingManagementState {
    static getSelectedTab({ selectedTab }) {
        return selectedTab;
    }
    settingManagementAction({ patchState }, { payload }) {
        patchState({
            selectedTab: payload,
        });
    }
};
SettingManagementState.decorators = [
    { type: Injectable }
];
__decorate([
    Action(SetSelectedSettingTab)
], SettingManagementState.prototype, "settingManagementAction", null);
__decorate([
    Selector()
], SettingManagementState, "getSelectedTab", null);
SettingManagementState = __decorate([
    State({
        name: 'SettingManagementState',
        defaults: {},
    })
], SettingManagementState);

class SettingManagementComponent {
    constructor(store, settingTabsService) {
        this.store = store;
        this.settingTabsService = settingTabsService;
        this.subscription = new Subscription();
        this.settings = [];
        this.trackByFn = (_, item) => item.name;
    }
    set selected(value) {
        this.store.dispatch(new SetSelectedSettingTab(value));
    }
    get selected() {
        const value = this.store.selectSnapshot(SettingManagementState.getSelectedTab);
        return (value === null || value === void 0 ? void 0 : value.component) ? value : this.settings[0] || {};
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    ngOnInit() {
        this.subscription.add(this.settingTabsService.visible$.subscribe(settings => {
            this.settings = settings;
            if (!this.selected)
                this.selected = this.settings[0];
        }));
    }
}
SettingManagementComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-setting-management',
                template: "<abp-page [title]=\"'AbpSettingManagement::Settings' | abpLocalization\">\n  <div id=\"SettingManagementWrapper\">\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <div class=\"row\">\n          <div class=\"col-12 col-md-3 mb-2 mb-md-0\">\n            <ul class=\"nav flex-column nav-pills\" id=\"nav-tab\" role=\"tablist\">\n              <ng-container *abpFor=\"let setting of settings; trackBy: trackByFn\">\n                <li\n                  (click)=\"selected = setting\"\n                  class=\"nav-item pointer\"\n                  *abpPermission=\"setting.requiredPolicy\"\n                >\n                  <a\n                    class=\"nav-link\"\n                    [id]=\"setting.name + '-tab'\"\n                    role=\"tab\"\n                    [class.active]=\"setting.name === selected.name\"\n                    >{{ setting.name | abpLocalization }}</a\n                  >\n                </li>\n              </ng-container>\n            </ul>\n          </div>\n          <div class=\"col-12 col-md-9\">\n            <div *ngIf=\"settings.length\" class=\"tab-content\">\n              <div class=\"tab-pane fade show active\" [id]=\"selected.name + '-tab'\" role=\"tabpanel\">\n                <ng-container *ngComponentOutlet=\"selected.component\"></ng-container>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</abp-page>\n"
            },] }
];
SettingManagementComponent.ctorParameters = () => [
    { type: Store },
    { type: SettingTabsService }
];

const ɵ0 = {
    requiredPolicy: 'AbpAccount.SettingManagement',
    replaceableComponent: {
        key: "SettingManagement.SettingManagementComponent" /* SettingManagement */,
        defaultComponent: SettingManagementComponent,
    },
};
const routes = [
    {
        path: '',
        component: DynamicLayoutComponent,
        canActivate: [AuthGuard],
        children: [
            {
                path: '',
                component: ReplaceableRouteContainerComponent,
                data: ɵ0,
            },
        ],
    },
];
class SettingManagementRoutingModule {
}
SettingManagementRoutingModule.decorators = [
    { type: NgModule, args: [{
                imports: [RouterModule.forChild(routes)],
                exports: [RouterModule],
            },] }
];

class SettingManagementModule {
    static forChild() {
        return {
            ngModule: SettingManagementModule,
            providers: [],
        };
    }
    static forLazy() {
        return new LazyModuleFactory(SettingManagementModule.forChild());
    }
}
SettingManagementModule.decorators = [
    { type: NgModule, args: [{
                declarations: [SettingManagementComponent],
                exports: [SettingManagementComponent],
                imports: [
                    SettingManagementRoutingModule,
                    CoreModule,
                    ThemeSharedModule,
                    PageModule,
                    NgxsModule.forFeature([SettingManagementState]),
                ],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { SettingManagementComponent, SettingManagementModule, SettingManagementRoutingModule as ɵa, SettingManagementState as ɵc, SetSelectedSettingTab as ɵd };
//# sourceMappingURL=abp-ng.setting-management.js.map
