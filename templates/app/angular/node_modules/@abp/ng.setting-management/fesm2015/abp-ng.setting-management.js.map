{"version":3,"file":"abp-ng.setting-management.js","sources":["../../../packages/setting-management/src/lib/actions/setting-management.actions.ts","../../../packages/setting-management/src/lib/states/setting-management.state.ts","../../../packages/setting-management/src/lib/components/setting-management.component.ts","../../../packages/setting-management/src/lib/setting-management-routing.module.ts","../../../packages/setting-management/src/lib/setting-management.module.ts","../../../packages/setting-management/src/abp-ng.setting-management.ts"],"sourcesContent":["import { ABP } from '@abp/ng.core';\n\nexport class SetSelectedSettingTab {\n  static readonly type = '[SettingManagement] Set Selected Tab';\n  constructor(public payload: ABP.Tab) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\nimport { SetSelectedSettingTab } from '../actions/setting-management.actions';\nimport { SettingManagement } from '../models/setting-management';\n\n@State<SettingManagement.State>({\n  name: 'SettingManagementState',\n  defaults: {},\n})\n@Injectable()\nexport class SettingManagementState {\n  @Selector()\n  static getSelectedTab({ selectedTab }: SettingManagement.State) {\n    return selectedTab;\n  }\n\n  @Action(SetSelectedSettingTab)\n  settingManagementAction(\n    { patchState }: StateContext<SettingManagement.State>,\n    { payload }: SetSelectedSettingTab,\n  ) {\n    patchState({\n      selectedTab: payload,\n    });\n  }\n}\n","import { ABP, SettingTabsService } from '@abp/ng.core';\nimport { Component, OnDestroy, OnInit, TrackByFunction } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { Subscription } from 'rxjs';\nimport { SetSelectedSettingTab } from '../actions/setting-management.actions';\nimport { SettingManagementState } from '../states/setting-management.state';\n\n@Component({\n  selector: 'abp-setting-management',\n  templateUrl: './setting-management.component.html',\n})\nexport class SettingManagementComponent implements OnDestroy, OnInit {\n  private subscription = new Subscription();\n  settings: ABP.Tab[] = [];\n\n  set selected(value: ABP.Tab) {\n    this.store.dispatch(new SetSelectedSettingTab(value));\n  }\n  get selected(): ABP.Tab {\n    const value = this.store.selectSnapshot(SettingManagementState.getSelectedTab);\n\n    return value?.component ? value : this.settings[0] || ({} as ABP.Tab);\n  }\n\n  trackByFn: TrackByFunction<ABP.Tab> = (_, item) => item.name;\n\n  constructor(private store: Store, private settingTabsService: SettingTabsService) {}\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  ngOnInit() {\n    this.subscription.add(\n      this.settingTabsService.visible$.subscribe(settings => {\n        this.settings = settings;\n\n        if (!this.selected) this.selected = this.settings[0];\n      }),\n    );\n  }\n}\n","import {\n  DynamicLayoutComponent,\n  ReplaceableComponents,\n  ReplaceableRouteContainerComponent,\n  AuthGuard,\n} from '@abp/ng.core';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SettingManagementComponent } from './components/setting-management.component';\nimport { eSettingManagementComponents } from './enums/components';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DynamicLayoutComponent,\n    canActivate: [AuthGuard],\n    children: [\n      {\n        path: '',\n        component: ReplaceableRouteContainerComponent,\n        data: {\n          requiredPolicy: 'AbpAccount.SettingManagement',\n          replaceableComponent: {\n            key: eSettingManagementComponents.SettingManagement,\n            defaultComponent: SettingManagementComponent,\n          } as ReplaceableComponents.RouteData,\n        },\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingManagementRoutingModule {}\n","import { CoreModule, LazyModuleFactory } from '@abp/ng.core';\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\nimport { ModuleWithProviders, NgModule, NgModuleFactory } from '@angular/core';\nimport { NgxsModule } from '@ngxs/store';\nimport { PageModule } from '@abp/ng.components/page';\nimport { SettingManagementComponent } from './components/setting-management.component';\nimport { SettingManagementRoutingModule } from './setting-management-routing.module';\nimport { SettingManagementState } from './states/setting-management.state';\n\n@NgModule({\n  declarations: [SettingManagementComponent],\n  exports: [SettingManagementComponent],\n  imports: [\n    SettingManagementRoutingModule,\n    CoreModule,\n    ThemeSharedModule,\n    PageModule,\n    NgxsModule.forFeature([SettingManagementState]),\n  ],\n})\nexport class SettingManagementModule {\n  static forChild(): ModuleWithProviders<SettingManagementModule> {\n    return {\n      ngModule: SettingManagementModule,\n      providers: [],\n    };\n  }\n\n  static forLazy(): NgModuleFactory<SettingManagementModule> {\n    return new LazyModuleFactory(SettingManagementModule.forChild());\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {SetSelectedSettingTab as ɵd} from './lib/actions/setting-management.actions';\nexport {eSettingManagementComponents as ɵb} from './lib/enums/components';\nexport {SettingManagementRoutingModule as ɵa} from './lib/setting-management-routing.module';\nexport {SettingManagementState as ɵc} from './lib/states/setting-management.state';"],"names":[],"mappings":"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"}