import { RoutesService, SettingTabsService } from '@abp/ng.core';
import { APP_INITIALIZER } from '@angular/core';
import { debounceTime, map } from 'rxjs/operators';
export const SETTING_MANAGEMENT_ROUTE_PROVIDERS = [
    { provide: APP_INITIALIZER, useFactory: configureRoutes, deps: [RoutesService], multi: true },
    {
        provide: APP_INITIALIZER,
        useFactory: hideRoutes,
        deps: [RoutesService, SettingTabsService],
        multi: true,
    },
];
export function configureRoutes(routesService) {
    return () => {
        routesService.add([
            {
                name: "AbpSettingManagement::Settings" /* Settings */,
                path: '/setting-management',
                parentName: "AbpUiNavigation::Menu:Administration" /* Administration */,
                layout: "application" /* application */,
                order: 100,
                iconClass: 'fa fa-cog',
            },
        ]);
    };
}
export function hideRoutes(routesService, settingTabsService) {
    return () => {
        settingTabsService.visible$
            .pipe(debounceTime(0), map(nodes => !nodes.length))
            .subscribe(invisible => routesService.patch("AbpSettingManagement::Settings" /* Settings */, { invisible }));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zZXR0aW5nLW1hbmFnZW1lbnQvY29uZmlnL3NyYy9wcm92aWRlcnMvcm91dGUucHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFlLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUU5RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHbkQsTUFBTSxDQUFDLE1BQU0sa0NBQWtDLEdBQUc7SUFDaEQsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtJQUM3RjtRQUNFLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLElBQUksRUFBRSxDQUFDLGFBQWEsRUFBRSxrQkFBa0IsQ0FBQztRQUN6QyxLQUFLLEVBQUUsSUFBSTtLQUNaO0NBQ0YsQ0FBQztBQUVGLE1BQU0sVUFBVSxlQUFlLENBQUMsYUFBNEI7SUFDMUQsT0FBTyxHQUFHLEVBQUU7UUFDVixhQUFhLENBQUMsR0FBRyxDQUFDO1lBQ2hCO2dCQUNFLElBQUksaURBQXVDO2dCQUMzQyxJQUFJLEVBQUUscUJBQXFCO2dCQUMzQixVQUFVLDZEQUF1QztnQkFDakQsTUFBTSxpQ0FBeUI7Z0JBQy9CLEtBQUssRUFBRSxHQUFHO2dCQUNWLFNBQVMsRUFBRSxXQUFXO2FBQ3ZCO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsYUFBNEIsRUFBRSxrQkFBc0M7SUFDN0YsT0FBTyxHQUFHLEVBQUU7UUFDVixrQkFBa0IsQ0FBQyxRQUFRO2FBQ3hCLElBQUksQ0FDSCxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQ2YsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQzVCO2FBQ0EsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQ3JCLGFBQWEsQ0FBQyxLQUFLLGtEQUF3QyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQzFFLENBQUM7SUFDTixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZUxheW91dFR5cGUsIFJvdXRlc1NlcnZpY2UsIFNldHRpbmdUYWJzU2VydmljZSB9IGZyb20gJ0BhYnAvbmcuY29yZSc7XG5pbXBvcnQgeyBlVGhlbWVTaGFyZWRSb3V0ZU5hbWVzIH0gZnJvbSAnQGFicC9uZy50aGVtZS5zaGFyZWQnO1xuaW1wb3J0IHsgQVBQX0lOSVRJQUxJWkVSIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGVTZXR0aW5nTWFuYWdlbWVudFJvdXRlTmFtZXMgfSBmcm9tICcuLi9lbnVtcy9yb3V0ZS1uYW1lcyc7XG5cbmV4cG9ydCBjb25zdCBTRVRUSU5HX01BTkFHRU1FTlRfUk9VVEVfUFJPVklERVJTID0gW1xuICB7IHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUiwgdXNlRmFjdG9yeTogY29uZmlndXJlUm91dGVzLCBkZXBzOiBbUm91dGVzU2VydmljZV0sIG11bHRpOiB0cnVlIH0sXG4gIHtcbiAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgdXNlRmFjdG9yeTogaGlkZVJvdXRlcyxcbiAgICBkZXBzOiBbUm91dGVzU2VydmljZSwgU2V0dGluZ1RhYnNTZXJ2aWNlXSxcbiAgICBtdWx0aTogdHJ1ZSxcbiAgfSxcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVSb3V0ZXMocm91dGVzU2VydmljZTogUm91dGVzU2VydmljZSkge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHJvdXRlc1NlcnZpY2UuYWRkKFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogZVNldHRpbmdNYW5hZ2VtZW50Um91dGVOYW1lcy5TZXR0aW5ncyxcbiAgICAgICAgcGF0aDogJy9zZXR0aW5nLW1hbmFnZW1lbnQnLFxuICAgICAgICBwYXJlbnROYW1lOiBlVGhlbWVTaGFyZWRSb3V0ZU5hbWVzLkFkbWluaXN0cmF0aW9uLFxuICAgICAgICBsYXlvdXQ6IGVMYXlvdXRUeXBlLmFwcGxpY2F0aW9uLFxuICAgICAgICBvcmRlcjogMTAwLFxuICAgICAgICBpY29uQ2xhc3M6ICdmYSBmYS1jb2cnLFxuICAgICAgfSxcbiAgICBdKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhpZGVSb3V0ZXMocm91dGVzU2VydmljZTogUm91dGVzU2VydmljZSwgc2V0dGluZ1RhYnNTZXJ2aWNlOiBTZXR0aW5nVGFic1NlcnZpY2UpIHtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBzZXR0aW5nVGFic1NlcnZpY2UudmlzaWJsZSRcbiAgICAgIC5waXBlKFxuICAgICAgICBkZWJvdW5jZVRpbWUoMCksXG4gICAgICAgIG1hcChub2RlcyA9PiAhbm9kZXMubGVuZ3RoKSxcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoaW52aXNpYmxlID0+XG4gICAgICAgIHJvdXRlc1NlcnZpY2UucGF0Y2goZVNldHRpbmdNYW5hZ2VtZW50Um91dGVOYW1lcy5TZXR0aW5ncywgeyBpbnZpc2libGUgfSksXG4gICAgICApO1xuICB9O1xufVxuIl19