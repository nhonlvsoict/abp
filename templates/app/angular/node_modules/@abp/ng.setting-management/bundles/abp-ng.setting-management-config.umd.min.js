!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@angular/core"),require("rxjs/operators"),require("@abp/ng.theme.shared"),require("@angular/forms"),require("@ngx-validate/core")):"function"==typeof define&&define.amd?define("@abp/ng.setting-management/config",["exports","@abp/ng.core","@angular/core","rxjs/operators","@abp/ng.theme.shared","@angular/forms","@ngx-validate/core"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng["setting-management"]=e.abp.ng["setting-management"]||{},e.abp.ng["setting-management"].config={}),e.i1,e.ng.core,e.rxjs.operators,e.ng_theme_shared,e.ng.forms,e.core)}(this,(function(e,t,n,a,o,r,i){"use strict";function s(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var a=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,a.get?a:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var l=s(t),m=s(n),p=[{provide:n.APP_INITIALIZER,useFactory:u,deps:[t.RoutesService],multi:!0},{provide:n.APP_INITIALIZER,useFactory:c,deps:[t.RoutesService,t.SettingTabsService],multi:!0}];function u(e){return function(){e.add([{name:"AbpSettingManagement::Settings",path:"/setting-management",parentName:"AbpUiNavigation::Menu:Administration",layout:"application",order:100,iconClass:"fa fa-cog"}])}}function c(e,t){return function(){t.visible$.pipe(a.debounceTime(0),a.map((function(e){return!e.length}))).subscribe((function(t){return e.patch("AbpSettingManagement::Settings",{invisible:t})}))}}var g=function(e){var t=this;this.restService=e,this.apiName="SettingManagement",this.get=function(){return t.restService.request({method:"GET",url:"/api/setting-management/emailing"},{apiName:t.apiName})},this.update=function(e){return t.restService.request({method:"POST",url:"/api/setting-management/emailing",body:e},{apiName:t.apiName})}};g.ɵprov=m.ɵɵdefineInjectable({factory:function(){return new g(m.ɵɵinject(l.RestService))},token:g,providedIn:"root"}),g.decorators=[{type:n.Injectable,args:[{providedIn:"root"}]}],g.ctorParameters=function(){return[{type:t.RestService}]};var d=function(){function e(e,t,n){this.emailSettingsService=e,this.fb=t,this.toasterService=n,this.saving=!1}return e.prototype.ngOnInit=function(){this.getData()},e.prototype.getData=function(){var e=this;this.emailSettingsService.get().subscribe((function(t){e.buildForm(t)}))},e.prototype.buildForm=function(e){this.form=this.fb.group({defaultFromDisplayName:[e.defaultFromDisplayName,[r.Validators.required]],defaultFromAddress:[e.defaultFromAddress,[r.Validators.required]],smtpHost:[e.smtpHost],smtpPort:[e.smtpPort,[r.Validators.required]],smtpEnableSsl:[e.smtpEnableSsl],smtpUseDefaultCredentials:[e.smtpUseDefaultCredentials],smtpDomain:[e.smtpDomain],smtpUserName:[e.smtpUserName],smtpPassword:[e.smtpPassword]})},e.prototype.submit=function(){var e=this;this.saving||this.form.invalid||(this.saving=!0,this.emailSettingsService.update(this.form.value).pipe(a.finalize((function(){return e.saving=!1}))).subscribe((function(){e.toasterService.success("AbpSettingManagement::SuccessfullySaved"),e.getData()})))},e}();d.decorators=[{type:n.Component,args:[{selector:"abp-email-setting-group",template:'<h2>{{ \'AbpSettingManagement::Menu:Emailing\' | abpLocalization }}</h2>\n\n<hr class="my-3" />\n\n<form *ngIf="form" [formGroup]="form" (ngSubmit)="submit()" validateOnSubmit>\n  <div class="form-group">\n    <label>{{ \'AbpSettingManagement::DefaultFromDisplayName\' | abpLocalization }}</label>\n    <input type="text" class="form-control" formControlName="defaultFromDisplayName" />\n  </div>\n  <div class="form-group">\n    <label>{{ \'AbpSettingManagement::DefaultFromAddress\' | abpLocalization }}</label>\n    <input type="text" class="form-control" formControlName="defaultFromAddress" />\n  </div>\n  <div class="form-group">\n    <label>{{ \'AbpSettingManagement::SmtpHost\' | abpLocalization }}</label>\n    <input type="text" class="form-control" formControlName="smtpHost" />\n  </div>\n  <div class="form-group">\n    <label>{{ \'AbpSettingManagement::SmtpPort\' | abpLocalization }}</label>\n    <input type="number" class="form-control" formControlName="smtpPort" />\n  </div>\n\n  <div class="custom-checkbox custom-control mb-2">\n    <input\n      type="checkbox"\n      id="smtp-enable-ssl"\n      class="custom-control-input"\n      formControlName="smtpEnableSsl"\n    />\n    <label class="custom-control-label" for="smtp-enable-ssl">{{\n      \'AbpSettingManagement::SmtpEnableSsl\' | abpLocalization\n    }}</label>\n  </div>\n  <div class="custom-checkbox custom-control mb-2">\n    <input\n      type="checkbox"\n      id="smtp-use-default-credentials"\n      class="custom-control-input"\n      formControlName="smtpUseDefaultCredentials"\n    />\n    <label class="custom-control-label" for="smtp-use-default-credentials">{{\n      \'AbpSettingManagement::SmtpUseDefaultCredentials\' | abpLocalization\n    }}</label>\n  </div>\n\n  <div\n    [@collapse]="{\n      value: form.get(\'smtpUseDefaultCredentials\').value ? \'collapsed\' : \'expanded\',\n      params: { time: \'200ms\', easing: \'linear\' }\n    }"\n  >\n    <div class="form-group">\n      <label>{{ \'AbpSettingManagement::SmtpDomain\' | abpLocalization }}</label>\n      <input type="text" class="form-control" formControlName="smtpDomain" />\n    </div>\n\n    <div class="form-group">\n      <label>{{ \'AbpSettingManagement::SmtpUserName\' | abpLocalization }}</label>\n      <input type="text" class="form-control" formControlName="smtpUserName" />\n    </div>\n\n    <div class="form-group">\n      <label>{{ \'AbpSettingManagement::SmtpPassword\' | abpLocalization }}</label>\n      <input type="text" class="form-control" formControlName="smtpPassword" />\n    </div>\n  </div>\n\n  <hr />\n\n  <button type="submit" class="btn btn-primary">\n    {{ \'AbpSettingManagement::Save\' | abpLocalization }}\n  </button>\n</form>\n',animations:[o.collapse]}]}],d.ctorParameters=function(){return[{type:g},{type:r.FormBuilder},{type:o.ToasterService}]};var f=[{provide:n.APP_INITIALIZER,useFactory:b,deps:[t.SettingTabsService],multi:!0}];function b(e){return function(){e.add([{name:"AbpSettingManagement::Menu:Emailing",order:100,requiredPolicy:"SettingManagement.Emailing",component:d}])}}var v=function(){function e(){}return e.forRoot=function(){return{ngModule:e,providers:[p,f]}},e}();v.decorators=[{type:n.NgModule,args:[{imports:[t.CoreModule,i.NgxValidateCoreModule],declarations:[d],exports:[d]}]}],e.EmailSettingGroupComponent=d,e.EmailSettingsService=g,e.SETTING_MANAGEMENT_ROUTE_PROVIDERS=p,e.SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS=f,e.SettingManagementConfigModule=v,e.configureRoutes=u,e.configureSettingTabs=b,e.hideRoutes=c,e.ɵa=g,e.ɵb=p,e.ɵc=u,e.ɵd=c,e.ɵe=f,e.ɵf=b,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=abp-ng.setting-management-config.umd.min.js.map