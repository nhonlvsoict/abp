{"version":3,"sources":["../../../packages/setting-management/config/src/providers/route.provider.ts","../../../packages/setting-management/config/src/proxy/email-settings.service.ts","../../../packages/setting-management/config/src/components/email-setting-group/email-setting-group.component.ts","../../../packages/setting-management/config/src/providers/setting-tab.provider.ts","../../../packages/setting-management/config/src/setting-management-config.module.ts"],"names":["SETTING_MANAGEMENT_ROUTE_PROVIDERS","provide","APP_INITIALIZER","useFactory","configureRoutes","deps","RoutesService","multi","hideRoutes","SettingTabsService","routesService","add","name","path","parentName","layout","order","iconClass","settingTabsService","visible$","pipe","debounceTime","map","nodes","length","subscribe","invisible","patch","restService","_this","this","apiName","get","request","method","url","update","input","body","Injectable","args","providedIn","RestService","EmailSettingGroupComponent","emailSettingsService","fb","toasterService","saving","prototype","ngOnInit","getData","res","buildForm","emailSettings","form","group","defaultFromDisplayName","Validators","required","defaultFromAddress","smtpHost","smtpPort","smtpEnableSsl","smtpUseDefaultCredentials","smtpDomain","smtpUserName","smtpPassword","submit","invalid","value","finalize","success","Component","selector","template","animations","collapse","EmailSettingsService","FormBuilder","ToasterService","SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS","configureSettingTabs","settingTabs","requiredPolicy","component","SettingManagementConfigModule","forRoot","ngModule","providers","NgModule","imports","CoreModule","NgxValidateCoreModule","declarations","exports"],"mappings":"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","sourcesContent":["import { eLayoutType, RoutesService, SettingTabsService } from '@abp/ng.core';\nimport { eThemeSharedRouteNames } from '@abp/ng.theme.shared';\nimport { APP_INITIALIZER } from '@angular/core';\nimport { debounceTime, map } from 'rxjs/operators';\nimport { eSettingManagementRouteNames } from '../enums/route-names';\n\nexport const SETTING_MANAGEMENT_ROUTE_PROVIDERS = [\n  { provide: APP_INITIALIZER, useFactory: configureRoutes, deps: [RoutesService], multi: true },\n  {\n    provide: APP_INITIALIZER,\n    useFactory: hideRoutes,\n    deps: [RoutesService, SettingTabsService],\n    multi: true,\n  },\n];\n\nexport function configureRoutes(routesService: RoutesService) {\n  return () => {\n    routesService.add([\n      {\n        name: eSettingManagementRouteNames.Settings,\n        path: '/setting-management',\n        parentName: eThemeSharedRouteNames.Administration,\n        layout: eLayoutType.application,\n        order: 100,\n        iconClass: 'fa fa-cog',\n      },\n    ]);\n  };\n}\n\nexport function hideRoutes(routesService: RoutesService, settingTabsService: SettingTabsService) {\n  return () => {\n    settingTabsService.visible$\n      .pipe(\n        debounceTime(0),\n        map(nodes => !nodes.length),\n      )\n      .subscribe(invisible =>\n        routesService.patch(eSettingManagementRouteNames.Settings, { invisible }),\n      );\n  };\n}\n","import type { EmailSettingsDto, UpdateEmailSettingsDto } from './models';\nimport { RestService } from '@abp/ng.core';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EmailSettingsService {\n  apiName = 'SettingManagement';\n\n  get = () =>\n    this.restService.request<any, EmailSettingsDto>({\n      method: 'GET',\n      url: '/api/setting-management/emailing',\n    },\n    { apiName: this.apiName });\n\n  update = (input: UpdateEmailSettingsDto) =>\n    this.restService.request<any, void>({\n      method: 'POST',\n      url: '/api/setting-management/emailing',\n      body: input,\n    },\n    { apiName: this.apiName });\n\n  constructor(private restService: RestService) {}\n}\n","import { collapse, ToasterService } from '@abp/ng.theme.shared';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { finalize } from 'rxjs/operators';\nimport { EmailSettingsService } from '../../proxy/email-settings.service';\nimport { EmailSettingsDto } from '../../proxy/models';\n\n@Component({\n  selector: 'abp-email-setting-group',\n  templateUrl: 'email-setting-group.component.html',\n  animations: [collapse],\n})\nexport class EmailSettingGroupComponent implements OnInit {\n  form: FormGroup;\n\n  saving = false;\n\n  constructor(\n    private emailSettingsService: EmailSettingsService,\n    private fb: FormBuilder,\n    private toasterService: ToasterService,\n  ) {}\n\n  ngOnInit() {\n    this.getData();\n  }\n\n  private getData() {\n    this.emailSettingsService.get().subscribe(res => {\n      this.buildForm(res);\n    });\n  }\n\n  private buildForm(emailSettings: EmailSettingsDto) {\n    this.form = this.fb.group({\n      defaultFromDisplayName: [emailSettings.defaultFromDisplayName, [Validators.required]],\n      defaultFromAddress: [emailSettings.defaultFromAddress, [Validators.required]],\n      smtpHost: [emailSettings.smtpHost],\n      smtpPort: [emailSettings.smtpPort, [Validators.required]],\n      smtpEnableSsl: [emailSettings.smtpEnableSsl],\n      smtpUseDefaultCredentials: [emailSettings.smtpUseDefaultCredentials],\n      smtpDomain: [emailSettings.smtpDomain],\n      smtpUserName: [emailSettings.smtpUserName],\n      smtpPassword: [emailSettings.smtpPassword],\n    });\n  }\n\n  submit() {\n    if (this.saving || this.form.invalid) return;\n\n    this.saving = true;\n    this.emailSettingsService\n      .update(this.form.value)\n      .pipe(finalize(() => (this.saving = false)))\n      .subscribe(() => {\n        this.toasterService.success('AbpSettingManagement::SuccessfullySaved');\n        this.getData();\n      });\n  }\n}\n","import { SettingTabsService } from '@abp/ng.core';\nimport { APP_INITIALIZER } from '@angular/core';\nimport { EmailSettingGroupComponent } from '../components/email-setting-group/email-setting-group.component';\nimport { eSettingManamagementSettingTabNames } from '../enums/setting-tab-names';\n\nexport const SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: configureSettingTabs,\n    deps: [SettingTabsService],\n    multi: true,\n  },\n];\n\nexport function configureSettingTabs(settingTabs: SettingTabsService) {\n  return () => {\n    settingTabs.add([\n      {\n        name: eSettingManamagementSettingTabNames.EmailSettingGroup,\n        order: 100,\n        requiredPolicy: 'SettingManagement.Emailing',\n        component: EmailSettingGroupComponent,\n      },\n    ]);\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CoreModule } from '@abp/ng.core';\nimport { EmailSettingGroupComponent } from './components/email-setting-group/email-setting-group.component';\nimport { SETTING_MANAGEMENT_ROUTE_PROVIDERS } from './providers/route.provider';\nimport { SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS } from './providers/setting-tab.provider';\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\n\n@NgModule({\n  imports: [CoreModule, NgxValidateCoreModule],\n  declarations: [EmailSettingGroupComponent],\n  exports: [EmailSettingGroupComponent],\n})\nexport class SettingManagementConfigModule {\n  static forRoot(): ModuleWithProviders<SettingManagementConfigModule> {\n    return {\n      ngModule: SettingManagementConfigModule,\n      providers: [SETTING_MANAGEMENT_ROUTE_PROVIDERS, SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS],\n    };\n  }\n}\n"]}