(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@abp/ng.core'), require('@angular/core'), require('rxjs/operators'), require('@abp/ng.theme.shared'), require('@angular/forms'), require('@ngx-validate/core')) :
    typeof define === 'function' && define.amd ? define('@abp/ng.setting-management/config', ['exports', '@abp/ng.core', '@angular/core', 'rxjs/operators', '@abp/ng.theme.shared', '@angular/forms', '@ngx-validate/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.abp = global.abp || {}, global.abp.ng = global.abp.ng || {}, global.abp.ng['setting-management'] = global.abp.ng['setting-management'] || {}, global.abp.ng['setting-management'].config = {}), global.i1, global.ng.core, global.rxjs.operators, global.ng_theme_shared, global.ng.forms, global.core));
}(this, (function (exports, i1, i0, operators, ng_theme_shared, forms, core) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var SETTING_MANAGEMENT_ROUTE_PROVIDERS = [
        { provide: i0.APP_INITIALIZER, useFactory: configureRoutes, deps: [i1.RoutesService], multi: true },
        {
            provide: i0.APP_INITIALIZER,
            useFactory: hideRoutes,
            deps: [i1.RoutesService, i1.SettingTabsService],
            multi: true,
        },
    ];
    function configureRoutes(routesService) {
        return function () {
            routesService.add([
                {
                    name: "AbpSettingManagement::Settings" /* Settings */,
                    path: '/setting-management',
                    parentName: "AbpUiNavigation::Menu:Administration" /* Administration */,
                    layout: "application" /* application */,
                    order: 100,
                    iconClass: 'fa fa-cog',
                },
            ]);
        };
    }
    function hideRoutes(routesService, settingTabsService) {
        return function () {
            settingTabsService.visible$
                .pipe(operators.debounceTime(0), operators.map(function (nodes) { return !nodes.length; }))
                .subscribe(function (invisible) { return routesService.patch("AbpSettingManagement::Settings" /* Settings */, { invisible: invisible }); });
        };
    }

    var EmailSettingsService = /** @class */ (function () {
        function EmailSettingsService(restService) {
            var _this = this;
            this.restService = restService;
            this.apiName = 'SettingManagement';
            this.get = function () { return _this.restService.request({
                method: 'GET',
                url: '/api/setting-management/emailing',
            }, { apiName: _this.apiName }); };
            this.update = function (input) { return _this.restService.request({
                method: 'POST',
                url: '/api/setting-management/emailing',
                body: input,
            }, { apiName: _this.apiName }); };
        }
        return EmailSettingsService;
    }());
    EmailSettingsService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function EmailSettingsService_Factory() { return new EmailSettingsService(i0__namespace.ɵɵinject(i1__namespace.RestService)); }, token: EmailSettingsService, providedIn: "root" });
    EmailSettingsService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    EmailSettingsService.ctorParameters = function () { return [
        { type: i1.RestService }
    ]; };

    var EmailSettingGroupComponent = /** @class */ (function () {
        function EmailSettingGroupComponent(emailSettingsService, fb, toasterService) {
            this.emailSettingsService = emailSettingsService;
            this.fb = fb;
            this.toasterService = toasterService;
            this.saving = false;
        }
        EmailSettingGroupComponent.prototype.ngOnInit = function () {
            this.getData();
        };
        EmailSettingGroupComponent.prototype.getData = function () {
            var _this = this;
            this.emailSettingsService.get().subscribe(function (res) {
                _this.buildForm(res);
            });
        };
        EmailSettingGroupComponent.prototype.buildForm = function (emailSettings) {
            this.form = this.fb.group({
                defaultFromDisplayName: [emailSettings.defaultFromDisplayName, [forms.Validators.required]],
                defaultFromAddress: [emailSettings.defaultFromAddress, [forms.Validators.required]],
                smtpHost: [emailSettings.smtpHost],
                smtpPort: [emailSettings.smtpPort, [forms.Validators.required]],
                smtpEnableSsl: [emailSettings.smtpEnableSsl],
                smtpUseDefaultCredentials: [emailSettings.smtpUseDefaultCredentials],
                smtpDomain: [emailSettings.smtpDomain],
                smtpUserName: [emailSettings.smtpUserName],
                smtpPassword: [emailSettings.smtpPassword],
            });
        };
        EmailSettingGroupComponent.prototype.submit = function () {
            var _this = this;
            if (this.saving || this.form.invalid)
                return;
            this.saving = true;
            this.emailSettingsService
                .update(this.form.value)
                .pipe(operators.finalize(function () { return (_this.saving = false); }))
                .subscribe(function () {
                _this.toasterService.success('AbpSettingManagement::SuccessfullySaved');
                _this.getData();
            });
        };
        return EmailSettingGroupComponent;
    }());
    EmailSettingGroupComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'abp-email-setting-group',
                    template: "<h2>{{ 'AbpSettingManagement::Menu:Emailing' | abpLocalization }}</h2>\n\n<hr class=\"my-3\" />\n\n<form *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"submit()\" validateOnSubmit>\n  <div class=\"form-group\">\n    <label>{{ 'AbpSettingManagement::DefaultFromDisplayName' | abpLocalization }}</label>\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromDisplayName\" />\n  </div>\n  <div class=\"form-group\">\n    <label>{{ 'AbpSettingManagement::DefaultFromAddress' | abpLocalization }}</label>\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromAddress\" />\n  </div>\n  <div class=\"form-group\">\n    <label>{{ 'AbpSettingManagement::SmtpHost' | abpLocalization }}</label>\n    <input type=\"text\" class=\"form-control\" formControlName=\"smtpHost\" />\n  </div>\n  <div class=\"form-group\">\n    <label>{{ 'AbpSettingManagement::SmtpPort' | abpLocalization }}</label>\n    <input type=\"number\" class=\"form-control\" formControlName=\"smtpPort\" />\n  </div>\n\n  <div class=\"custom-checkbox custom-control mb-2\">\n    <input\n      type=\"checkbox\"\n      id=\"smtp-enable-ssl\"\n      class=\"custom-control-input\"\n      formControlName=\"smtpEnableSsl\"\n    />\n    <label class=\"custom-control-label\" for=\"smtp-enable-ssl\">{{\n      'AbpSettingManagement::SmtpEnableSsl' | abpLocalization\n    }}</label>\n  </div>\n  <div class=\"custom-checkbox custom-control mb-2\">\n    <input\n      type=\"checkbox\"\n      id=\"smtp-use-default-credentials\"\n      class=\"custom-control-input\"\n      formControlName=\"smtpUseDefaultCredentials\"\n    />\n    <label class=\"custom-control-label\" for=\"smtp-use-default-credentials\">{{\n      'AbpSettingManagement::SmtpUseDefaultCredentials' | abpLocalization\n    }}</label>\n  </div>\n\n  <div\n    [@collapse]=\"{\n      value: form.get('smtpUseDefaultCredentials').value ? 'collapsed' : 'expanded',\n      params: { time: '200ms', easing: 'linear' }\n    }\"\n  >\n    <div class=\"form-group\">\n      <label>{{ 'AbpSettingManagement::SmtpDomain' | abpLocalization }}</label>\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpDomain\" />\n    </div>\n\n    <div class=\"form-group\">\n      <label>{{ 'AbpSettingManagement::SmtpUserName' | abpLocalization }}</label>\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpUserName\" />\n    </div>\n\n    <div class=\"form-group\">\n      <label>{{ 'AbpSettingManagement::SmtpPassword' | abpLocalization }}</label>\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpPassword\" />\n    </div>\n  </div>\n\n  <hr />\n\n  <button type=\"submit\" class=\"btn btn-primary\">\n    {{ 'AbpSettingManagement::Save' | abpLocalization }}\n  </button>\n</form>\n",
                    animations: [ng_theme_shared.collapse]
                },] }
    ];
    EmailSettingGroupComponent.ctorParameters = function () { return [
        { type: EmailSettingsService },
        { type: forms.FormBuilder },
        { type: ng_theme_shared.ToasterService }
    ]; };

    var SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS = [
        {
            provide: i0.APP_INITIALIZER,
            useFactory: configureSettingTabs,
            deps: [i1.SettingTabsService],
            multi: true,
        },
    ];
    function configureSettingTabs(settingTabs) {
        return function () {
            settingTabs.add([
                {
                    name: "AbpSettingManagement::Menu:Emailing" /* EmailSettingGroup */,
                    order: 100,
                    requiredPolicy: 'SettingManagement.Emailing',
                    component: EmailSettingGroupComponent,
                },
            ]);
        };
    }

    var SettingManagementConfigModule = /** @class */ (function () {
        function SettingManagementConfigModule() {
        }
        SettingManagementConfigModule.forRoot = function () {
            return {
                ngModule: SettingManagementConfigModule,
                providers: [SETTING_MANAGEMENT_ROUTE_PROVIDERS, SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS],
            };
        };
        return SettingManagementConfigModule;
    }());
    SettingManagementConfigModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CoreModule, core.NgxValidateCoreModule],
                    declarations: [EmailSettingGroupComponent],
                    exports: [EmailSettingGroupComponent],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.EmailSettingGroupComponent = EmailSettingGroupComponent;
    exports.EmailSettingsService = EmailSettingsService;
    exports.SETTING_MANAGEMENT_ROUTE_PROVIDERS = SETTING_MANAGEMENT_ROUTE_PROVIDERS;
    exports.SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS = SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS;
    exports.SettingManagementConfigModule = SettingManagementConfigModule;
    exports.configureRoutes = configureRoutes;
    exports.configureSettingTabs = configureSettingTabs;
    exports.hideRoutes = hideRoutes;
    exports.ɵa = EmailSettingsService;
    exports.ɵb = SETTING_MANAGEMENT_ROUTE_PROVIDERS;
    exports.ɵc = configureRoutes;
    exports.ɵd = hideRoutes;
    exports.ɵe = SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS;
    exports.ɵf = configureSettingTabs;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=abp-ng.setting-management-config.umd.js.map
