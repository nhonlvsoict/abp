import * as i1 from '@abp/ng.core';
import { RestService, TrackByService, ConfigStateService, AbpApplicationConfigurationService, CoreModule } from '@abp/ng.core';
import { ThemeSharedModule } from '@abp/ng.theme.shared';
import * as i0 from '@angular/core';
import { Injectable, EventEmitter, Component, Input, Output, Directive, HostBinding, NgModule } from '@angular/core';
import { NgbNavModule } from '@ng-bootstrap/ng-bootstrap';
import { Store, NgxsModule } from '@ngxs/store';
import { finalize, tap } from 'rxjs/operators';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@abp/ng.core';
import * as ɵngcc2 from '@ngxs/store';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@abp/ng.theme.shared';
import * as ɵngcc5 from '@ng-bootstrap/ng-bootstrap';
import * as ɵngcc6 from '@angular/forms';

function FeatureManagementComponent_abp_modal_0_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h3");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "AbpFeatureManagement::Features"));
} }
function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_1_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c0 = function (a0) { return { $implicit: a0 }; };
function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 22);
    ɵngcc0.ɵɵelementStart(2, "input", 23);
    ɵngcc0.ɵɵlistener("ngModelChange", function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_1_Template_input_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const feature_r15 = ɵngcc0.ɵɵnextContext().$implicit; return feature_r15.value = $event; })("ngModelChange", function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_1_Template_input_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const feature_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r25 = ɵngcc0.ɵɵnextContext(5); return ctx_r25.onCheckboxClick($event, feature_r15); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "label", 24);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_1_ng_container_5_Template, 1, 0, "ng-container", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const feature_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵnextContext(3);
    const _r9 = ɵngcc0.ɵɵreference(6);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("id", feature_r15.name)("ngModel", feature_r15.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("htmlFor", feature_r15.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(feature_r15.displayName);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r9)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(6, _c0, feature_r15.description));
} }
function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_2_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r31 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 26);
    ɵngcc0.ɵɵelementStart(2, "label", 27);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "input", 28);
    ɵngcc0.ɵɵlistener("ngModelChange", function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_2_Template_input_ngModelChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r31); const feature_r15 = ɵngcc0.ɵɵnextContext().$implicit; return feature_r15.value = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_2_ng_container_5_Template, 1, 0, "ng-container", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const feature_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵnextContext(3);
    const _r9 = ɵngcc0.ɵɵreference(6);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("htmlFor", feature_r15.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(feature_r15.displayName);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", feature_r15.name)("ngModel", feature_r15.value)("abpFeatureManagementFreeText", feature_r15);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r9)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(7, _c0, feature_r15.description));
} }
function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_3_ng_container_1_option_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 32);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r36 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", item_r36.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, (item_r36.displayText == null ? null : item_r36.displayText.resourceName) + "::" + (item_r36.displayText == null ? null : item_r36.displayText.name)), " ");
} }
function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_3_ng_container_1_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r39 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 26);
    ɵngcc0.ɵɵelementStart(2, "label", 27);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "select", 30);
    ɵngcc0.ɵɵlistener("ngModelChange", function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_3_ng_container_1_Template_select_ngModelChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r39); const feature_r15 = ɵngcc0.ɵɵnextContext(2).$implicit; return feature_r15.value = $event; });
    ɵngcc0.ɵɵtemplate(5, FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_3_ng_container_1_option_5_Template, 3, 4, "option", 31);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(6, FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_3_ng_container_1_ng_container_6_Template, 1, 0, "ng-container", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const feature_r15 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵnextContext(3);
    const _r9 = ɵngcc0.ɵɵreference(6);
    const ctx_r33 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("htmlFor", feature_r15.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(feature_r15.displayName);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", feature_r15.name)("ngModel", feature_r15.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", feature_r15.valueType.itemSource == null ? null : feature_r15.valueType.itemSource.items)("ngForTrackBy", ctx_r33.track.by("value"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r9)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(8, _c0, feature_r15.description));
} }
function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_3_ng_container_1_Template, 7, 10, "ng-container", 29);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const feature_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", feature_r15.valueType.itemSource == null ? null : feature_r15.valueType.itemSource.items == null ? null : feature_r15.valueType.itemSource.items.length);
} }
function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const feature_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(feature_r15.displayName);
} }
function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r44 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵlistener("keyup.enter", function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_Template_div_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r44); const ctx_r43 = ɵngcc0.ɵɵnextContext(5); return ctx_r43.save(); });
    ɵngcc0.ɵɵtemplate(1, FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_1_Template, 6, 8, "ng-container", 20);
    ɵngcc0.ɵɵtemplate(2, FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_2_Template, 6, 9, "ng-container", 20);
    ɵngcc0.ɵɵtemplate(3, FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_3_Template, 2, 1, "ng-container", 20);
    ɵngcc0.ɵɵtemplate(4, FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_ng_container_4_Template, 2, 1, "ng-container", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const feature_r15 = ctx.$implicit;
    const ctx_r14 = ɵngcc0.ɵɵnextContext(5);
    ɵngcc0.ɵɵproperty("ngStyle", feature_r15.style)("ngSwitch", feature_r15.valueType == null ? null : feature_r15.valueType.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r14.valueTypes.ToggleStringValueType);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r14.valueTypes.FreeTextStringValueType);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r14.valueTypes.SelectionStringValueType);
} }
function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h4");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(2, "hr", 17);
    ɵngcc0.ɵɵtemplate(3, FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_div_3_Template, 5, 5, "div", 18);
} if (rf & 2) {
    const group_r12 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r13 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r13.selectedGroupDisplayName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r13.features[group_r12.name])("ngForTrackBy", ctx_r13.track.by("id"));
} }
function FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 14);
    ɵngcc0.ɵɵelementStart(1, "a", 15);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_ng_template_3_Template, 4, 3, "ng-template", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const group_r12 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngbNavItem", group_r12.displayName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(group_r12.displayName);
} }
function FeatureManagementComponent_abp_modal_0_ng_template_3_ng_template_5_small_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 34);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const description_r46 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(description_r46);
} }
function FeatureManagementComponent_abp_modal_0_ng_template_3_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, FeatureManagementComponent_abp_modal_0_ng_template_3_ng_template_5_small_0_Template, 2, 1, "small", 33);
} if (rf & 2) {
    const description_r46 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngIf", description_r46);
} }
function FeatureManagementComponent_abp_modal_0_ng_template_3_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 35);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "AbpFeatureManagement::NoFeatureFoundMessage"), " ");
} }
function FeatureManagementComponent_abp_modal_0_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r50 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵelementStart(2, "ul", 7, 8);
    ɵngcc0.ɵɵlistener("activeIdChange", function FeatureManagementComponent_abp_modal_0_ng_template_3_Template_ul_activeIdChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r50); const ctx_r49 = ɵngcc0.ɵɵnextContext(2); return ctx_r49.selectedGroupDisplayName = $event; });
    ɵngcc0.ɵɵtemplate(4, FeatureManagementComponent_abp_modal_0_ng_template_3_li_4_Template, 4, 2, "li", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, FeatureManagementComponent_abp_modal_0_ng_template_3_ng_template_5_Template, 1, 1, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementStart(7, "div", 11);
    ɵngcc0.ɵɵelement(8, "div", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(9, FeatureManagementComponent_abp_modal_0_ng_template_3_div_9_Template, 3, 3, "div", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r7 = ɵngcc0.ɵɵreference(3);
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("activeId", ctx_r4.selectedGroupDisplayName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.groups)("ngForTrackBy", ctx_r4.track.by("name"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngbNavOutlet", _r7);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r4.groups.length);
} }
function FeatureManagementComponent_abp_modal_0_ng_template_5_abp_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r53 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "abp-button", 38);
    ɵngcc0.ɵɵlistener("click", function FeatureManagementComponent_abp_modal_0_ng_template_5_abp_button_3_Template_abp_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r53); const ctx_r52 = ɵngcc0.ɵɵnextContext(3); return ctx_r52.save(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r51 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("disabled", ctx_r51.modalBusy);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "AbpFeatureManagement::Save"), " ");
} }
function FeatureManagementComponent_abp_modal_0_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 36);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, FeatureManagementComponent_abp_modal_0_ng_template_5_abp_button_3_Template, 3, 4, "abp-button", 37);
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "AbpFeatureManagement::Cancel"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.groups.length);
} }
function FeatureManagementComponent_abp_modal_0_Template(rf, ctx) { if (rf & 1) {
    const _r55 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "abp-modal", 1);
    ɵngcc0.ɵɵlistener("visibleChange", function FeatureManagementComponent_abp_modal_0_Template_abp_modal_visibleChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r55); const ctx_r54 = ɵngcc0.ɵɵnextContext(); return ctx_r54.visible = $event; });
    ɵngcc0.ɵɵtemplate(1, FeatureManagementComponent_abp_modal_0_ng_template_1_Template, 3, 3, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(3, FeatureManagementComponent_abp_modal_0_ng_template_3_Template, 10, 5, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(5, FeatureManagementComponent_abp_modal_0_ng_template_5_Template, 4, 4, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("visible", ctx_r0.visible)("busy", ctx_r0.modalBusy);
} }
class FeaturesService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpFeatureManagement';
        this.get = (providerName, providerKey) => this.restService.request({
            method: 'GET',
            url: '/api/feature-management/features',
            params: { providerName, providerKey },
        }, { apiName: this.apiName });
        this.update = (providerName, providerKey, input) => this.restService.request({
            method: 'PUT',
            url: '/api/feature-management/features',
            params: { providerName, providerKey },
            body: input,
        }, { apiName: this.apiName });
    }
}
FeaturesService.ɵfac = function FeaturesService_Factory(t) { return new (t || FeaturesService)(ɵngcc0.ɵɵinject(ɵngcc1.RestService)); };
FeaturesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FeaturesService_Factory() { return new FeaturesService(i0.ɵɵinject(i1.RestService)); }, token: FeaturesService, providedIn: "root" });
FeaturesService.ctorParameters = () => [
    { type: RestService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FeaturesService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.RestService }]; }, null); })();

var ValueTypes;
(function (ValueTypes) {
    ValueTypes["ToggleStringValueType"] = "ToggleStringValueType";
    ValueTypes["FreeTextStringValueType"] = "FreeTextStringValueType";
    ValueTypes["SelectionStringValueType"] = "SelectionStringValueType";
})(ValueTypes || (ValueTypes = {}));
class FeatureManagementComponent {
    constructor(track, service, store, configState, appConfigService) {
        this.track = track;
        this.service = service;
        this.store = store;
        this.configState = configState;
        this.appConfigService = appConfigService;
        this.groups = [];
        this.valueTypes = ValueTypes;
        this.visibleChange = new EventEmitter();
        this.modalBusy = false;
    }
    get visible() {
        return this._visible;
    }
    set visible(value) {
        if (this._visible === value)
            return;
        this._visible = value;
        this.visibleChange.emit(value);
        if (value)
            this.openModal();
    }
    openModal() {
        if (!this.providerName) {
            throw new Error('providerName is required.');
        }
        this.getFeatures();
    }
    getFeatures() {
        this.service.get(this.providerName, this.providerKey).subscribe(res => {
            var _a;
            if (!((_a = res.groups) === null || _a === void 0 ? void 0 : _a.length))
                return;
            this.groups = res.groups.map(({ name, displayName }) => ({ name, displayName }));
            this.selectedGroupDisplayName = this.groups[0].displayName;
            this.features = res.groups.reduce((acc, val) => (Object.assign(Object.assign({}, acc), { [val.name]: mapFeatures(val.features, document.body.dir) })), {});
        });
    }
    save() {
        if (this.modalBusy)
            return;
        const changedFeatures = [];
        Object.keys(this.features).forEach(key => {
            this.features[key].forEach(feature => {
                if (feature.value !== feature.initialValue)
                    changedFeatures.push({ name: feature.name, value: `${feature.value}` });
            });
        });
        if (!changedFeatures.length) {
            this.visible = false;
            return;
        }
        this.modalBusy = true;
        this.service
            .update(this.providerName, this.providerKey, { features: changedFeatures })
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.visible = false;
            if (!this.providerKey) {
                // to refresh host's features
                this.appConfigService
                    .get()
                    .pipe(tap(res => this.configState.setState(res)))
                    .subscribe();
            }
        });
    }
    onCheckboxClick(val, feature) {
        if (val) {
            this.checkToggleAncestors(feature);
        }
        else {
            this.uncheckToggleDescendants(feature);
        }
    }
    uncheckToggleDescendants(feature) {
        this.findAllDescendantsOfByType(feature, ValueTypes.ToggleStringValueType).forEach(node => this.setFeatureValue(node, false));
    }
    checkToggleAncestors(feature) {
        this.findAllAncestorsOfByType(feature, ValueTypes.ToggleStringValueType).forEach(node => this.setFeatureValue(node, true));
    }
    findAllAncestorsOfByType(feature, type) {
        let parent = this.findParentByType(feature, type);
        const ancestors = [];
        while (parent) {
            ancestors.push(parent);
            parent = this.findParentByType(parent, type);
        }
        return ancestors;
    }
    findAllDescendantsOfByType(feature, type) {
        const descendants = [];
        const queue = [feature];
        while (queue.length) {
            const node = queue.pop();
            const newDescendants = this.findChildrenByType(node, type);
            descendants.push(...newDescendants);
            queue.push(...newDescendants);
        }
        return descendants;
    }
    findParentByType(feature, type) {
        return this.getCurrentGroup().find(f => f.valueType.name === type && f.name === feature.parentName);
    }
    findChildrenByType(feature, type) {
        return this.getCurrentGroup().filter(f => f.valueType.name === type && f.parentName === feature.name);
    }
    getCurrentGroup() {
        var _a;
        return (_a = this.features[this.selectedGroupDisplayName]) !== null && _a !== void 0 ? _a : [];
    }
    setFeatureValue(feature, val) {
        feature.value = val;
    }
}
FeatureManagementComponent.ɵfac = function FeatureManagementComponent_Factory(t) { return new (t || FeatureManagementComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TrackByService), ɵngcc0.ɵɵdirectiveInject(FeaturesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Store), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ConfigStateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AbpApplicationConfigurationService)); };
FeatureManagementComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FeatureManagementComponent, selectors: [["abp-feature-management"]], inputs: { visible: "visible", providerKey: "providerKey", providerName: "providerName" }, outputs: { visibleChange: "visibleChange" }, exportAs: ["abpFeatureManagement"], decls: 1, vars: 1, consts: [["size", "lg", 3, "visible", "busy", "visibleChange", 4, "ngIf"], ["size", "lg", 3, "visible", "busy", "visibleChange"], ["abpHeader", ""], ["abpBody", ""], ["abpFooter", ""], [1, "row"], [1, "col-md-4"], ["ngbNav", "", "orientation", "vertical", 1, "nav-pills", 3, "activeId", "activeIdChange"], ["nav", "ngbNav"], [3, "ngbNavItem", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["descTmp", ""], [1, "col-md-8"], [3, "ngbNavOutlet"], ["class", "mx-3", 4, "ngIf"], [3, "ngbNavItem"], ["ngbNavLink", ""], ["ngbNavContent", ""], [1, "mt-2", "mb-3"], ["class", "mt-2", 3, "ngStyle", "ngSwitch", "keyup.enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "mt-2", 3, "ngStyle", "ngSwitch", "keyup.enter"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], [1, "custom-checkbox", "custom-control"], ["type", "checkbox", 1, "custom-control-input", 3, "id", "ngModel", "ngModelChange"], [1, "custom-control-label", 3, "htmlFor"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "form-group"], [3, "htmlFor"], ["type", "text", 1, "form-control", 3, "id", "ngModel", "abpFeatureManagementFreeText", "ngModelChange"], [4, "ngIf"], [1, "form-control", "custom-select", 3, "id", "ngModel", "ngModelChange"], [3, "ngValue", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ngValue"], ["class", "form-text text-muted", 4, "ngIf"], [1, "form-text", "text-muted"], [1, "mx-3"], ["abpClose", "", "type", "button", 1, "btn", "btn-secondary"], ["iconClass", "fa fa-check", 3, "disabled", "click", 4, "ngIf"], ["iconClass", "fa fa-check", 3, "disabled", "click"]], template: function FeatureManagementComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FeatureManagementComponent_abp_modal_0_Template, 7, 2, "abp-modal", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.visible);
    } }, directives: function () { return [ɵngcc3.NgIf, ɵngcc4.ModalComponent, ɵngcc5.NgbNav, ɵngcc3.NgForOf, ɵngcc5.NgbNavOutlet, ɵngcc5.NgbNavItem, ɵngcc5.NgbNavLink, ɵngcc5.NgbNavContent, ɵngcc3.NgStyle, ɵngcc3.NgSwitch, ɵngcc3.NgSwitchCase, ɵngcc3.NgSwitchDefault, ɵngcc6.CheckboxControlValueAccessor, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc3.NgTemplateOutlet, ɵngcc6.DefaultValueAccessor, FreeTextInputDirective, ɵngcc6.SelectControlValueAccessor, ɵngcc6.NgSelectOption, ɵngcc6.ɵNgSelectMultipleOption, ɵngcc4.ModalCloseDirective, ɵngcc4.ButtonComponent]; }, pipes: function () { return [ɵngcc1.LocalizationPipe]; }, encapsulation: 2 });
FeatureManagementComponent.ctorParameters = () => [
    { type: TrackByService },
    { type: FeaturesService },
    { type: Store },
    { type: ConfigStateService },
    { type: AbpApplicationConfigurationService }
];
FeatureManagementComponent.propDecorators = {
    providerKey: [{ type: Input }],
    providerName: [{ type: Input }],
    visible: [{ type: Input }],
    visibleChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FeatureManagementComponent, [{
        type: Component,
        args: [{
                selector: 'abp-feature-management',
                template: "<abp-modal *ngIf=\"visible\" size=\"lg\" [(visible)]=\"visible\" [busy]=\"modalBusy\">\n  <ng-template #abpHeader>\n    <h3>{{ 'AbpFeatureManagement::Features' | abpLocalization }}</h3>\n  </ng-template>\n\n  <ng-template #abpBody>\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <ul\n          ngbNav\n          #nav=\"ngbNav\"\n          [(activeId)]=\"selectedGroupDisplayName\"\n          class=\"nav-pills\"\n          orientation=\"vertical\"\n        >\n          <li\n            *ngFor=\"let group of groups; trackBy: track.by('name')\"\n            [ngbNavItem]=\"group.displayName\"\n          >\n            <a ngbNavLink>{{ group.displayName }}</a>\n            <ng-template ngbNavContent>\n              <h4>{{ selectedGroupDisplayName }}</h4>\n              <hr class=\"mt-2 mb-3\" />\n\n              <div\n                class=\"mt-2\"\n                *ngFor=\"let feature of features[group.name]; let i = index; trackBy: track.by('id')\"\n                [ngStyle]=\"feature.style\"\n                [ngSwitch]=\"feature.valueType?.name\"\n                (keyup.enter)=\"save()\"\n              >\n                <ng-container *ngSwitchCase=\"valueTypes.ToggleStringValueType\">\n                  <div class=\"custom-checkbox custom-control\">\n                    <input\n                      class=\"custom-control-input\"\n                      type=\"checkbox\"\n                      [id]=\"feature.name\"\n                      [(ngModel)]=\"feature.value\"\n                      (ngModelChange)=\"onCheckboxClick($event, feature)\"\n                    />\n\n                    <label class=\"custom-control-label\" [htmlFor]=\"feature.name\">{{\n                      feature.displayName\n                    }}</label>\n                    <ng-container\n                      *ngTemplateOutlet=\"descTmp; context: { $implicit: feature.description }\"\n                    ></ng-container>\n                  </div>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"valueTypes.FreeTextStringValueType\">\n                  <div class=\"form-group\">\n                    <label [htmlFor]=\"feature.name\">{{ feature.displayName }}</label>\n                    <input\n                      class=\"form-control\"\n                      type=\"text\"\n                      [id]=\"feature.name\"\n                      [(ngModel)]=\"feature.value\"\n                      [abpFeatureManagementFreeText]=\"feature\"\n                    />\n\n                    <ng-container\n                      *ngTemplateOutlet=\"descTmp; context: { $implicit: feature.description }\"\n                    ></ng-container>\n                  </div>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"valueTypes.SelectionStringValueType\">\n                  <ng-container *ngIf=\"feature.valueType.itemSource?.items?.length\">\n                    <div class=\"form-group\">\n                      <label [htmlFor]=\"feature.name\">{{ feature.displayName }}</label>\n                      <select\n                        class=\"form-control custom-select\"\n                        [id]=\"feature.name\"\n                        [(ngModel)]=\"feature.value\"\n                      >\n                        <option\n                          *ngFor=\"\n                            let item of feature.valueType.itemSource?.items;\n                            trackBy: track.by('value')\n                          \"\n                          [ngValue]=\"item.value\"\n                        >\n                          {{\n                            item.displayText?.resourceName + '::' + item.displayText?.name\n                              | abpLocalization\n                          }}\n                        </option>\n                      </select>\n                      <ng-container\n                        *ngTemplateOutlet=\"descTmp; context: { $implicit: feature.description }\"\n                      ></ng-container>\n                    </div>\n                  </ng-container>\n                </ng-container>\n                <ng-container *ngSwitchDefault>{{ feature.displayName }}</ng-container>\n              </div>\n            </ng-template>\n          </li>\n        </ul>\n      </div>\n\n      <ng-template #descTmp let-description>\n        <small *ngIf=\"description\" class=\"form-text text-muted\">{{ description }}</small>\n      </ng-template>\n\n      <div class=\"col-md-8\"><div [ngbNavOutlet]=\"nav\"></div></div>\n\n      <div class=\"mx-3\" *ngIf=\"!groups.length\">\n        {{ 'AbpFeatureManagement::NoFeatureFoundMessage' | abpLocalization }}\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #abpFooter>\n    <button abpClose type=\"button\" class=\"btn btn-secondary\">\n      {{ 'AbpFeatureManagement::Cancel' | abpLocalization }}\n    </button>\n    <abp-button\n      *ngIf=\"groups.length\"\n      iconClass=\"fa fa-check\"\n      [disabled]=\"modalBusy\"\n      (click)=\"save()\"\n    >\n      {{ 'AbpFeatureManagement::Save' | abpLocalization }}\n    </abp-button>\n  </ng-template>\n</abp-modal>\n",
                exportAs: 'abpFeatureManagement'
            }]
    }], function () { return [{ type: ɵngcc1.TrackByService }, { type: FeaturesService }, { type: ɵngcc2.Store }, { type: ɵngcc1.ConfigStateService }, { type: ɵngcc1.AbpApplicationConfigurationService }]; }, { visibleChange: [{
            type: Output
        }], visible: [{
            type: Input
        }], providerKey: [{
            type: Input
        }], providerName: [{
            type: Input
        }] }); })();
function mapFeatures(features, dir) {
    const margin = `margin-${dir === 'rtl' ? 'right' : 'left'}.px`;
    return features.map(feature => {
        var _a;
        const value = ((_a = feature.valueType) === null || _a === void 0 ? void 0 : _a.name) === ValueTypes.ToggleStringValueType
            ? (feature.value || '').toLowerCase() === 'true'
            : feature.value;
        return Object.assign(Object.assign({}, feature), { value, initialValue: value, style: { [margin]: feature.depth * 20 } });
    });
}

const INPUT_TYPES = {
    numeric: 'number',
    default: 'text',
};
class FreeTextInputDirective {
    set feature(val) {
        this._feature = val;
        this.setInputType();
    }
    get feature() {
        return this._feature;
    }
    setInputType() {
        var _a, _b, _c, _d;
        const validatorType = (_c = (_b = (_a = this.feature) === null || _a === void 0 ? void 0 : _a.valueType) === null || _b === void 0 ? void 0 : _b.validator) === null || _c === void 0 ? void 0 : _c.name.toLowerCase();
        this.type = (_d = INPUT_TYPES[validatorType]) !== null && _d !== void 0 ? _d : INPUT_TYPES.default;
    }
}
FreeTextInputDirective.ɵfac = function FreeTextInputDirective_Factory(t) { return new (t || FreeTextInputDirective)(); };
FreeTextInputDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FreeTextInputDirective, selectors: [["input", "abpFeatureManagementFreeText", ""]], hostVars: 1, hostBindings: function FreeTextInputDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("type", ctx.type);
    } }, inputs: { feature: ["abpFeatureManagementFreeText", "feature"] }, exportAs: ["inputAbpFeatureManagementFreeText"] });
FreeTextInputDirective.propDecorators = {
    feature: [{ type: Input, args: ['abpFeatureManagementFreeText',] }],
    type: [{ type: HostBinding, args: ['type',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FreeTextInputDirective, [{
        type: Directive,
        args: [{
                selector: 'input[abpFeatureManagementFreeText]',
                exportAs: 'inputAbpFeatureManagementFreeText'
            }]
    }], null, { feature: [{
            type: Input,
            args: ['abpFeatureManagementFreeText']
        }], type: [{
            type: HostBinding,
            args: ['type']
        }] }); })();

const exported = [FeatureManagementComponent, FreeTextInputDirective];
class FeatureManagementModule {
}
FeatureManagementModule.ɵfac = function FeatureManagementModule_Factory(t) { return new (t || FeatureManagementModule)(); };
FeatureManagementModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: FeatureManagementModule });
FeatureManagementModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CoreModule, ThemeSharedModule, NgbNavModule, NgxsModule.forFeature([])]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FeatureManagementModule, [{
        type: NgModule,
        args: [{
                declarations: [...exported],
                imports: [CoreModule, ThemeSharedModule, NgbNavModule, NgxsModule.forFeature([])],
                exports: [...exported]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FeatureManagementModule, { declarations: function () { return [FeatureManagementComponent, FreeTextInputDirective]; }, imports: function () { return [CoreModule, ThemeSharedModule, NgbNavModule, ɵngcc2.ɵbc]; }, exports: function () { return [FeatureManagementComponent, FreeTextInputDirective]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { FeatureManagementComponent, FeatureManagementModule, FeaturesService, FeatureManagementComponent as ɵa, FeaturesService as ɵb, FreeTextInputDirective as ɵc };

//# sourceMappingURL=abp-ng.feature-management.js.map