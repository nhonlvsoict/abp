import { Injectable, Injector } from '@angular/core';
import { map, finalize } from 'rxjs/operators';
import { ActivatedRoute } from '@angular/router';
import { MultiTenancyService, ConfigStateService, AbpTenantService, SessionStateService, AbpApplicationConfigurationService } from '@abp/ng.core';
import { __rest } from 'tslib';
import { ToasterService } from '@abp/ng.theme.shared';

class AuthWrapperService {
    constructor(multiTenancy, configState, injector) {
        this.multiTenancy = multiTenancy;
        this.configState = configState;
        this.isMultiTenancyEnabled$ = this.configState.getDeep$('multiTenancy.isEnabled');
        this.tenantBoxKey = 'Account.TenantBoxComponent';
        this.route = injector.get(ActivatedRoute);
    }
    get enableLocalLogin$() {
        return this.configState
            .getSetting$('Abp.Account.EnableLocalLogin')
            .pipe(map(value => (value === null || value === void 0 ? void 0 : value.toLowerCase()) !== 'false'));
    }
    get isTenantBoxVisibleForCurrentRoute() {
        var _a;
        return (_a = this.getMostInnerChild().data.tenantBoxVisible) !== null && _a !== void 0 ? _a : true;
    }
    get isTenantBoxVisible() {
        return this.isTenantBoxVisibleForCurrentRoute && this.multiTenancy.isTenantBoxVisible;
    }
    getMostInnerChild() {
        let child = this.route.snapshot;
        let depth = 0;
        const depthLimit = 10;
        while (child.firstChild && depth < depthLimit) {
            child = child.firstChild;
            depth++;
        }
        return child;
    }
}
AuthWrapperService.decorators = [
    { type: Injectable }
];
AuthWrapperService.ctorParameters = () => [
    { type: MultiTenancyService },
    { type: ConfigStateService },
    { type: Injector }
];

class TenantBoxService {
    constructor(toasterService, tenantService, sessionState, configState, appConfigService) {
        this.toasterService = toasterService;
        this.tenantService = tenantService;
        this.sessionState = sessionState;
        this.configState = configState;
        this.appConfigService = appConfigService;
        this.currentTenant$ = this.sessionState.getTenant$();
    }
    onSwitch() {
        const tenant = this.sessionState.getTenant();
        this.name = tenant === null || tenant === void 0 ? void 0 : tenant.name;
        this.isModalVisible = true;
    }
    save() {
        if (!this.name) {
            this.setTenant(null);
            this.isModalVisible = false;
            return;
        }
        this.modalBusy = true;
        this.tenantService
            .findTenantByName(this.name, {})
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe((_a) => {
            var { success, tenantId: id } = _a, tenant = __rest(_a, ["success", "tenantId"]);
            if (!success) {
                this.showError();
                return;
            }
            this.setTenant(Object.assign(Object.assign({}, tenant), { id, isAvailable: true }));
            this.isModalVisible = false;
        });
    }
    setTenant(tenant) {
        this.sessionState.setTenant(tenant);
        this.appConfigService.get().subscribe(res => this.configState.setState(res));
    }
    showError() {
        this.toasterService.error('AbpUiMultiTenancy::GivenTenantIsNotAvailable', 'AbpUi::Error', {
            messageLocalizationParams: [this.name],
        });
    }
}
TenantBoxService.decorators = [
    { type: Injectable }
];
TenantBoxService.ctorParameters = () => [
    { type: ToasterService },
    { type: AbpTenantService },
    { type: SessionStateService },
    { type: ConfigStateService },
    { type: AbpApplicationConfigurationService }
];

/*
 * Public API Surface of account-core
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AuthWrapperService, TenantBoxService };
//# sourceMappingURL=abp-ng.account.core.js.map
