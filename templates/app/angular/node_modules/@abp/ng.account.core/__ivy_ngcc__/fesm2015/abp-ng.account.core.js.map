{"version":3,"file":"abp-ng.account.core.js","sources":["../../../packages/account-core/src/lib/auth-wrapper.service.ts","../../../packages/account-core/src/lib/tenant-box.service.ts","../../../packages/account-core/src/public-api.ts","../../../packages/account-core/src/abp-ng.account.core.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ActivatedRoute } from '@angular/router';\nimport { ConfigStateService, MultiTenancyService } from '@abp/ng.core';\n\n@Injectable()\nexport class AuthWrapperService {\n  isMultiTenancyEnabled$ = this.configState.getDeep$('multiTenancy.isEnabled');\n\n  get enableLocalLogin$(): Observable<boolean> {\n    return this.configState\n      .getSetting$('Abp.Account.EnableLocalLogin')\n      .pipe(map(value => value?.toLowerCase() !== 'false'));\n  }\n\n  tenantBoxKey = 'Account.TenantBoxComponent';\n  route: ActivatedRoute;\n\n  get isTenantBoxVisibleForCurrentRoute() {\n    return this.getMostInnerChild().data.tenantBoxVisible ?? true;\n  }\n\n  get isTenantBoxVisible() {\n    return this.isTenantBoxVisibleForCurrentRoute && this.multiTenancy.isTenantBoxVisible;\n  }\n\n  constructor(\n    public readonly multiTenancy: MultiTenancyService,\n    private configState: ConfigStateService,\n    injector: Injector,\n  ) {\n    this.route = injector.get(ActivatedRoute);\n  }\n\n  private getMostInnerChild() {\n    let child = this.route.snapshot;\n    let depth = 0;\n    const depthLimit = 10;\n    while (child.firstChild && depth < depthLimit) {\n      child = child.firstChild;\n      depth++;\n    }\n    return child;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ToasterService } from '@abp/ng.theme.shared';\nimport {\n  AbpApplicationConfigurationService,\n  AbpTenantService,\n  ConfigStateService,\n  CurrentTenantDto,\n  SessionStateService,\n} from '@abp/ng.core';\nimport { finalize } from 'rxjs/operators';\n\n@Injectable()\nexport class TenantBoxService {\n  currentTenant$ = this.sessionState.getTenant$();\n\n  name: string;\n\n  isModalVisible: boolean;\n\n  modalBusy: boolean;\n\n  constructor(\n    private toasterService: ToasterService,\n    private tenantService: AbpTenantService,\n    private sessionState: SessionStateService,\n    private configState: ConfigStateService,\n    private appConfigService: AbpApplicationConfigurationService,\n  ) {}\n\n  onSwitch() {\n    const tenant = this.sessionState.getTenant();\n    this.name = tenant?.name;\n    this.isModalVisible = true;\n  }\n\n  save() {\n    if (!this.name) {\n      this.setTenant(null);\n      this.isModalVisible = false;\n      return;\n    }\n\n    this.modalBusy = true;\n    this.tenantService\n      .findTenantByName(this.name, {})\n      .pipe(finalize(() => (this.modalBusy = false)))\n      .subscribe(({ success, tenantId: id, ...tenant }) => {\n        if (!success) {\n          this.showError();\n          return;\n        }\n\n        this.setTenant({ ...tenant, id, isAvailable: true });\n        this.isModalVisible = false;\n      });\n  }\n\n  private setTenant(tenant: CurrentTenantDto) {\n    this.sessionState.setTenant(tenant);\n    this.appConfigService.get().subscribe(res => this.configState.setState(res));\n  }\n\n  private showError() {\n    this.toasterService.error('AbpUiMultiTenancy::GivenTenantIsNotAvailable', 'AbpUi::Error', {\n      messageLocalizationParams: [this.name],\n    });\n  }\n}\n","/*\n * Public API Surface of account-core\n */\n\nexport * from './lib/auth-wrapper.service';\nexport * from './lib/tenant-box.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}