import { Injectable, Injector } from '@angular/core';
import { map } from 'rxjs/operators';
import { ActivatedRoute } from '@angular/router';
import { ConfigStateService, MultiTenancyService } from '@abp/ng.core';
export class AuthWrapperService {
    constructor(multiTenancy, configState, injector) {
        this.multiTenancy = multiTenancy;
        this.configState = configState;
        this.isMultiTenancyEnabled$ = this.configState.getDeep$('multiTenancy.isEnabled');
        this.tenantBoxKey = 'Account.TenantBoxComponent';
        this.route = injector.get(ActivatedRoute);
    }
    get enableLocalLogin$() {
        return this.configState
            .getSetting$('Abp.Account.EnableLocalLogin')
            .pipe(map(value => (value === null || value === void 0 ? void 0 : value.toLowerCase()) !== 'false'));
    }
    get isTenantBoxVisibleForCurrentRoute() {
        var _a;
        return (_a = this.getMostInnerChild().data.tenantBoxVisible) !== null && _a !== void 0 ? _a : true;
    }
    get isTenantBoxVisible() {
        return this.isTenantBoxVisibleForCurrentRoute && this.multiTenancy.isTenantBoxVisible;
    }
    getMostInnerChild() {
        let child = this.route.snapshot;
        let depth = 0;
        const depthLimit = 10;
        while (child.firstChild && depth < depthLimit) {
            child = child.firstChild;
            depth++;
        }
        return child;
    }
}
AuthWrapperService.decorators = [
    { type: Injectable }
];
AuthWrapperService.ctorParameters = () => [
    { type: MultiTenancyService },
    { type: ConfigStateService },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC13cmFwcGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9hY2NvdW50LWNvcmUvc3JjL2xpYi9hdXRoLXdyYXBwZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUd2RSxNQUFNLE9BQU8sa0JBQWtCO0lBb0I3QixZQUNrQixZQUFpQyxFQUN6QyxXQUErQixFQUN2QyxRQUFrQjtRQUZGLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtRQUN6QyxnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7UUFyQnpDLDJCQUFzQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFRN0UsaUJBQVksR0FBRyw0QkFBNEIsQ0FBQztRQWdCMUMsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUF2QkQsSUFBSSxpQkFBaUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsV0FBVzthQUNwQixXQUFXLENBQUMsOEJBQThCLENBQUM7YUFDM0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLFdBQVcsUUFBTyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFLRCxJQUFJLGlDQUFpQzs7UUFDbkMsYUFBTyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLG1DQUFJLElBQUksQ0FBQztJQUNoRSxDQUFDO0lBRUQsSUFBSSxrQkFBa0I7UUFDcEIsT0FBTyxJQUFJLENBQUMsaUNBQWlDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQztJQUN4RixDQUFDO0lBVU8saUJBQWlCO1FBQ3ZCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQ2hDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUN0QixPQUFPLEtBQUssQ0FBQyxVQUFVLElBQUksS0FBSyxHQUFHLFVBQVUsRUFBRTtZQUM3QyxLQUFLLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztZQUN6QixLQUFLLEVBQUUsQ0FBQztTQUNUO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7WUF0Q0YsVUFBVTs7O1lBRmtCLG1CQUFtQjtZQUF2QyxrQkFBa0I7WUFKTixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IENvbmZpZ1N0YXRlU2VydmljZSwgTXVsdGlUZW5hbmN5U2VydmljZSB9IGZyb20gJ0BhYnAvbmcuY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBdXRoV3JhcHBlclNlcnZpY2Uge1xuICBpc011bHRpVGVuYW5jeUVuYWJsZWQkID0gdGhpcy5jb25maWdTdGF0ZS5nZXREZWVwJCgnbXVsdGlUZW5hbmN5LmlzRW5hYmxlZCcpO1xuXG4gIGdldCBlbmFibGVMb2NhbExvZ2luJCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5jb25maWdTdGF0ZVxuICAgICAgLmdldFNldHRpbmckKCdBYnAuQWNjb3VudC5FbmFibGVMb2NhbExvZ2luJylcbiAgICAgIC5waXBlKG1hcCh2YWx1ZSA9PiB2YWx1ZT8udG9Mb3dlckNhc2UoKSAhPT0gJ2ZhbHNlJykpO1xuICB9XG5cbiAgdGVuYW50Qm94S2V5ID0gJ0FjY291bnQuVGVuYW50Qm94Q29tcG9uZW50JztcbiAgcm91dGU6IEFjdGl2YXRlZFJvdXRlO1xuXG4gIGdldCBpc1RlbmFudEJveFZpc2libGVGb3JDdXJyZW50Um91dGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TW9zdElubmVyQ2hpbGQoKS5kYXRhLnRlbmFudEJveFZpc2libGUgPz8gdHJ1ZTtcbiAgfVxuXG4gIGdldCBpc1RlbmFudEJveFZpc2libGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNUZW5hbnRCb3hWaXNpYmxlRm9yQ3VycmVudFJvdXRlICYmIHRoaXMubXVsdGlUZW5hbmN5LmlzVGVuYW50Qm94VmlzaWJsZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBtdWx0aVRlbmFuY3k6IE11bHRpVGVuYW5jeVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjb25maWdTdGF0ZTogQ29uZmlnU3RhdGVTZXJ2aWNlLFxuICAgIGluamVjdG9yOiBJbmplY3RvcixcbiAgKSB7XG4gICAgdGhpcy5yb3V0ZSA9IGluamVjdG9yLmdldChBY3RpdmF0ZWRSb3V0ZSk7XG4gIH1cblxuICBwcml2YXRlIGdldE1vc3RJbm5lckNoaWxkKCkge1xuICAgIGxldCBjaGlsZCA9IHRoaXMucm91dGUuc25hcHNob3Q7XG4gICAgbGV0IGRlcHRoID0gMDtcbiAgICBjb25zdCBkZXB0aExpbWl0ID0gMTA7XG4gICAgd2hpbGUgKGNoaWxkLmZpcnN0Q2hpbGQgJiYgZGVwdGggPCBkZXB0aExpbWl0KSB7XG4gICAgICBjaGlsZCA9IGNoaWxkLmZpcnN0Q2hpbGQ7XG4gICAgICBkZXB0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cbn1cbiJdfQ==