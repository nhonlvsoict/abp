import { __rest } from "tslib";
import { Injectable } from '@angular/core';
import { ToasterService } from '@abp/ng.theme.shared';
import { AbpApplicationConfigurationService, AbpTenantService, ConfigStateService, SessionStateService, } from '@abp/ng.core';
import { finalize } from 'rxjs/operators';
export class TenantBoxService {
    constructor(toasterService, tenantService, sessionState, configState, appConfigService) {
        this.toasterService = toasterService;
        this.tenantService = tenantService;
        this.sessionState = sessionState;
        this.configState = configState;
        this.appConfigService = appConfigService;
        this.currentTenant$ = this.sessionState.getTenant$();
    }
    onSwitch() {
        const tenant = this.sessionState.getTenant();
        this.name = tenant === null || tenant === void 0 ? void 0 : tenant.name;
        this.isModalVisible = true;
    }
    save() {
        if (!this.name) {
            this.setTenant(null);
            this.isModalVisible = false;
            return;
        }
        this.modalBusy = true;
        this.tenantService
            .findTenantByName(this.name, {})
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe((_a) => {
            var { success, tenantId: id } = _a, tenant = __rest(_a, ["success", "tenantId"]);
            if (!success) {
                this.showError();
                return;
            }
            this.setTenant(Object.assign(Object.assign({}, tenant), { id, isAvailable: true }));
            this.isModalVisible = false;
        });
    }
    setTenant(tenant) {
        this.sessionState.setTenant(tenant);
        this.appConfigService.get().subscribe(res => this.configState.setState(res));
    }
    showError() {
        this.toasterService.error('AbpUiMultiTenancy::GivenTenantIsNotAvailable', 'AbpUi::Error', {
            messageLocalizationParams: [this.name],
        });
    }
}
TenantBoxService.decorators = [
    { type: Injectable }
];
TenantBoxService.ctorParameters = () => [
    { type: ToasterService },
    { type: AbpTenantService },
    { type: SessionStateService },
    { type: ConfigStateService },
    { type: AbpApplicationConfigurationService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuYW50LWJveC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvYWNjb3VudC1jb3JlL3NyYy9saWIvdGVuYW50LWJveC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RCxPQUFPLEVBQ0wsa0NBQWtDLEVBQ2xDLGdCQUFnQixFQUNoQixrQkFBa0IsRUFFbEIsbUJBQW1CLEdBQ3BCLE1BQU0sY0FBYyxDQUFDO0FBQ3RCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUcxQyxNQUFNLE9BQU8sZ0JBQWdCO0lBUzNCLFlBQ1UsY0FBOEIsRUFDOUIsYUFBK0IsRUFDL0IsWUFBaUMsRUFDakMsV0FBK0IsRUFDL0IsZ0JBQW9EO1FBSnBELG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDL0IsaUJBQVksR0FBWixZQUFZLENBQXFCO1FBQ2pDLGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtRQUMvQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQW9DO1FBYjlELG1CQUFjLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQWM3QyxDQUFDO0lBRUosUUFBUTtRQUNOLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDN0MsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDZCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1lBQzVCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxhQUFhO2FBQ2YsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7YUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUM5QyxTQUFTLENBQUMsQ0FBQyxFQUFvQyxFQUFFLEVBQUU7Z0JBQXhDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLE9BQWEsRUFBUixNQUFNLGNBQWxDLHVCQUFvQyxDQUFGO1lBQzVDLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ1osSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUNqQixPQUFPO2FBQ1I7WUFFRCxJQUFJLENBQUMsU0FBUyxpQ0FBTSxNQUFNLEtBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLElBQUcsQ0FBQztZQUNyRCxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxTQUFTLENBQUMsTUFBd0I7UUFDeEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVPLFNBQVM7UUFDZixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyw4Q0FBOEMsRUFBRSxjQUFjLEVBQUU7WUFDeEYseUJBQXlCLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ3ZDLENBQUMsQ0FBQztJQUNMLENBQUM7OztZQXZERixVQUFVOzs7WUFWRixjQUFjO1lBR3JCLGdCQUFnQjtZQUdoQixtQkFBbUI7WUFGbkIsa0JBQWtCO1lBRmxCLGtDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRvYXN0ZXJTZXJ2aWNlIH0gZnJvbSAnQGFicC9uZy50aGVtZS5zaGFyZWQnO1xuaW1wb3J0IHtcbiAgQWJwQXBwbGljYXRpb25Db25maWd1cmF0aW9uU2VydmljZSxcbiAgQWJwVGVuYW50U2VydmljZSxcbiAgQ29uZmlnU3RhdGVTZXJ2aWNlLFxuICBDdXJyZW50VGVuYW50RHRvLFxuICBTZXNzaW9uU3RhdGVTZXJ2aWNlLFxufSBmcm9tICdAYWJwL25nLmNvcmUnO1xuaW1wb3J0IHsgZmluYWxpemUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUZW5hbnRCb3hTZXJ2aWNlIHtcbiAgY3VycmVudFRlbmFudCQgPSB0aGlzLnNlc3Npb25TdGF0ZS5nZXRUZW5hbnQkKCk7XG5cbiAgbmFtZTogc3RyaW5nO1xuXG4gIGlzTW9kYWxWaXNpYmxlOiBib29sZWFuO1xuXG4gIG1vZGFsQnVzeTogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRvYXN0ZXJTZXJ2aWNlOiBUb2FzdGVyU2VydmljZSxcbiAgICBwcml2YXRlIHRlbmFudFNlcnZpY2U6IEFicFRlbmFudFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBzZXNzaW9uU3RhdGU6IFNlc3Npb25TdGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjb25maWdTdGF0ZTogQ29uZmlnU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgYXBwQ29uZmlnU2VydmljZTogQWJwQXBwbGljYXRpb25Db25maWd1cmF0aW9uU2VydmljZSxcbiAgKSB7fVxuXG4gIG9uU3dpdGNoKCkge1xuICAgIGNvbnN0IHRlbmFudCA9IHRoaXMuc2Vzc2lvblN0YXRlLmdldFRlbmFudCgpO1xuICAgIHRoaXMubmFtZSA9IHRlbmFudD8ubmFtZTtcbiAgICB0aGlzLmlzTW9kYWxWaXNpYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIHNhdmUoKSB7XG4gICAgaWYgKCF0aGlzLm5hbWUpIHtcbiAgICAgIHRoaXMuc2V0VGVuYW50KG51bGwpO1xuICAgICAgdGhpcy5pc01vZGFsVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubW9kYWxCdXN5ID0gdHJ1ZTtcbiAgICB0aGlzLnRlbmFudFNlcnZpY2VcbiAgICAgIC5maW5kVGVuYW50QnlOYW1lKHRoaXMubmFtZSwge30pXG4gICAgICAucGlwZShmaW5hbGl6ZSgoKSA9PiAodGhpcy5tb2RhbEJ1c3kgPSBmYWxzZSkpKVxuICAgICAgLnN1YnNjcmliZSgoeyBzdWNjZXNzLCB0ZW5hbnRJZDogaWQsIC4uLnRlbmFudCB9KSA9PiB7XG4gICAgICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgICAgIHRoaXMuc2hvd0Vycm9yKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRUZW5hbnQoeyAuLi50ZW5hbnQsIGlkLCBpc0F2YWlsYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy5pc01vZGFsVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHNldFRlbmFudCh0ZW5hbnQ6IEN1cnJlbnRUZW5hbnREdG8pIHtcbiAgICB0aGlzLnNlc3Npb25TdGF0ZS5zZXRUZW5hbnQodGVuYW50KTtcbiAgICB0aGlzLmFwcENvbmZpZ1NlcnZpY2UuZ2V0KCkuc3Vic2NyaWJlKHJlcyA9PiB0aGlzLmNvbmZpZ1N0YXRlLnNldFN0YXRlKHJlcykpO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG93RXJyb3IoKSB7XG4gICAgdGhpcy50b2FzdGVyU2VydmljZS5lcnJvcignQWJwVWlNdWx0aVRlbmFuY3k6OkdpdmVuVGVuYW50SXNOb3RBdmFpbGFibGUnLCAnQWJwVWk6OkVycm9yJywge1xuICAgICAgbWVzc2FnZUxvY2FsaXphdGlvblBhcmFtczogW3RoaXMubmFtZV0sXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==