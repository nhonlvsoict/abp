import { Injectable, ChangeDetectorRef, Component, Inject, Renderer2, Input, ViewChildren, ChangeDetectionStrategy, ViewEncapsulation, APP_INITIALIZER, NgModule } from '@angular/core';
import { SubscriptionService, EnvironmentService, NAVIGATE_TO_MANAGE_PROFILE, AuthService, ConfigStateService, SessionStateService, RoutesService, DomInsertionService, ReplaceableComponentsService, CONTENT_STRATEGY, CoreModule } from '@abp/ng.core';
import { fromEvent } from 'rxjs';
import { debounceTime, map } from 'rxjs/operators';
import { AuthWrapperService, TenantBoxService } from '@abp/ng.account.core';
import { slideFromBottom, collapseWithMargin, NavItemsService, PageAlertService, ThemeSharedModule } from '@abp/ng.theme.shared';
import snq from 'snq';
import { ValidationErrorComponent as ValidationErrorComponent$1, NgxValidateCoreModule, VALIDATION_ERROR_TEMPLATE, VALIDATION_TARGET_SELECTOR, VALIDATION_INVALID_CLASSES } from '@ngx-validate/core';
import { NgbCollapseModule, NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';

class LayoutService {
    constructor(subscription, cdRef) {
        this.subscription = subscription;
        this.cdRef = cdRef;
        this.isCollapsed = true;
        this.logoComponentKey = "Theme.LogoComponent" /* Logo */;
        this.routesComponentKey = "Theme.RoutesComponent" /* Routes */;
        this.navItemsComponentKey = "Theme.NavItemsComponent" /* NavItems */;
    }
    checkWindowWidth() {
        const isSmallScreen = window.innerWidth < 992;
        if (isSmallScreen && this.smallScreen === false) {
            this.isCollapsed = false;
            setTimeout(() => {
                this.isCollapsed = true;
            }, 100);
        }
        this.smallScreen = isSmallScreen;
        this.cdRef.detectChanges();
    }
    subscribeWindowSize() {
        this.checkWindowWidth();
        const resize$ = fromEvent(window, 'resize').pipe(debounceTime(150));
        this.subscription.addOne(resize$, () => this.checkWindowWidth());
    }
}
LayoutService.decorators = [
    { type: Injectable }
];
LayoutService.ctorParameters = () => [
    { type: SubscriptionService },
    { type: ChangeDetectorRef }
];

class AccountLayoutComponent {
    constructor(service) {
        this.service = service;
        this.authWrapperKey = 'Account.AuthWrapperComponent';
    }
    ngAfterViewInit() {
        this.service.subscribeWindowSize();
    }
}
// required for dynamic component
AccountLayoutComponent.type = "account" /* account */;
AccountLayoutComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-layout-account',
                template: "<nav\n  class=\"navbar navbar-expand-lg navbar-dark bg-dark shadow-sm flex-column flex-md-row mb-4\"\n  id=\"main-navbar\"\n  style=\"min-height: 4rem\"\n>\n  <div class=\"container\">\n    <abp-logo *abpReplaceableTemplate=\"{ componentKey: service.logoComponentKey }\"></abp-logo>\n    <button\n      class=\"navbar-toggler\"\n      type=\"button\"\n      [attr.aria-expanded]=\"!service.isCollapsed\"\n      (click)=\"service.isCollapsed = !service.isCollapsed\"\n    >\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div\n      class=\"navbar-collapse\"\n      [class.overflow-hidden]=\"service.smallScreen\"\n      id=\"main-navbar-collapse\"\n    >\n      <ng-container *ngTemplateOutlet=\"!service.smallScreen ? navigations : null\"></ng-container>\n\n      <div\n        *ngIf=\"service.smallScreen\"\n        [@collapseWithMargin]=\"service.isCollapsed ? 'collapsed' : 'expanded'\"\n      >\n        <ng-container *ngTemplateOutlet=\"navigations\"></ng-container>\n      </div>\n\n      <ng-template #navigations>\n        <abp-routes\n          *abpReplaceableTemplate=\"{\n            componentKey: service.routesComponentKey,\n            inputs: {\n              smallScreen: { value: service.smallScreen }\n            }\n          }\"\n          class=\"mx-auto\"\n          [smallScreen]=\"service.smallScreen\"\n        ></abp-routes>\n\n        <abp-nav-items\n          *abpReplaceableTemplate=\"{\n            componentKey: service.navItemsComponentKey\n          }\"\n        ></abp-nav-items>\n      </ng-template>\n    </div>\n  </div>\n</nav>\n\n<!-- [@slideFromBottom]=\"outlet.isActivated && outlet.activatedRoute?.routeConfig?.path\" TODO: throws ExpressionChangedAfterItHasBeenCheck when animation is active. It should be fixed -->\n<div class=\"container\">\n  <abp-page-alert-container></abp-page-alert-container>\n  <abp-auth-wrapper\n    *abpReplaceableTemplate=\"{\n      componentKey: authWrapperKey\n    }\"\n  >\n    <router-outlet #outlet=\"outlet\"></router-outlet>\n  </abp-auth-wrapper>\n</div>\n",
                providers: [LayoutService, SubscriptionService]
            },] }
];
AccountLayoutComponent.ctorParameters = () => [
    { type: LayoutService }
];

class AuthWrapperComponent {
    constructor(service) {
        this.service = service;
    }
    ngOnInit() { }
}
AuthWrapperComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-auth-wrapper',
                template: "<div class=\"row\">\n  <div class=\"mx-auto col col-md-5\">\n    <ng-container *ngIf=\"(service.isMultiTenancyEnabled$ | async) && service.isTenantBoxVisible\">\n      <abp-tenant-box\n        *abpReplaceableTemplate=\"{ componentKey: service.tenantBoxKey }\"\n      ></abp-tenant-box>\n    </ng-container>\n\n    <div class=\"abp-account-container\">\n      <div\n        *ngIf=\"service.enableLocalLogin$ | async; else disableLocalLoginTemplate\"\n        class=\"card mt-3 shadow-sm rounded\"\n      >\n        <div class=\"card-body p-5\">\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #disableLocalLoginTemplate>\n  <div class=\"alert alert-warning\">\n    <strong>{{ 'AbpAccount::InvalidLoginRequest' | abpLocalization }}</strong>\n    {{ 'AbpAccount::ThereAreNoLoginSchemesConfiguredForThisClient' | abpLocalization }}\n  </div>\n</ng-template>\n",
                providers: [AuthWrapperService]
            },] }
];
AuthWrapperComponent.ctorParameters = () => [
    { type: AuthWrapperService }
];

class TenantBoxComponent {
    constructor(service) {
        this.service = service;
    }
    ngOnInit() { }
}
TenantBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-tenant-box',
                template: "<ng-container *ngIf=\"(service.currentTenant$ | async) || {} as currentTenant\">\n  <div class=\"card shadow-sm rounded mb-3\">\n    <div class=\"card-body px-5\">\n      <div class=\"row\">\n        <div class=\"col\">\n          <span style=\"font-size: 0.8em\" class=\"text-uppercase text-muted\">{{\n            'AbpUiMultiTenancy::Tenant' | abpLocalization\n          }}</span\n          ><br />\n          <h6 class=\"m-0 d-inline-block\">\n            <i>{{ currentTenant.name || ('AbpUiMultiTenancy::NotSelected' | abpLocalization) }}</i>\n          </h6>\n        </div>\n        <div class=\"col-auto\">\n          <a\n            id=\"AbpTenantSwitchLink\"\n            href=\"javascript:void(0);\"\n            class=\"btn btn-sm mt-3 btn-outline-primary\"\n            (click)=\"service.onSwitch()\"\n            >{{ 'AbpUiMultiTenancy::Switch' | abpLocalization }}</a\n          >\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <abp-modal size=\"md\" [(visible)]=\"service.isModalVisible\" [busy]=\"service.modalBusy\">\n    <ng-template #abpHeader>\n      <h5>Switch Tenant</h5>\n    </ng-template>\n    <ng-template #abpBody>\n      <form (ngSubmit)=\"service.save()\">\n        <div class=\"mt-2\">\n          <div class=\"form-group\">\n            <label for=\"name\">{{ 'AbpUiMultiTenancy::Name' | abpLocalization }}</label>\n            <input\n              [(ngModel)]=\"service.name\"\n              type=\"text\"\n              id=\"name\"\n              name=\"tenant\"\n              class=\"form-control\"\n              autofocus\n            />\n          </div>\n          <p>{{ 'AbpUiMultiTenancy::SwitchTenantHint' | abpLocalization }}</p>\n        </div>\n      </form>\n    </ng-template>\n    <ng-template #abpFooter>\n      <button abpClose type=\"button\" class=\"btn btn-secondary\">\n        {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\n      </button>\n      <abp-button\n        type=\"abp-button\"\n        iconClass=\"fa fa-check\"\n        (click)=\"service.save()\"\n        [disabled]=\"currentTenant?.name === service.name\"\n      >\n        <span>{{ 'AbpTenantManagement::Save' | abpLocalization }}</span>\n      </abp-button>\n    </ng-template>\n  </abp-modal>\n</ng-container>\n",
                providers: [TenantBoxService]
            },] }
];
TenantBoxComponent.ctorParameters = () => [
    { type: TenantBoxService }
];

class ApplicationLayoutComponent {
    constructor(service) {
        this.service = service;
    }
    ngAfterViewInit() {
        this.service.subscribeWindowSize();
    }
}
// required for dynamic component
ApplicationLayoutComponent.type = "application" /* application */;
ApplicationLayoutComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-layout-application',
                template: "<nav\n  class=\"navbar navbar-expand-lg navbar-dark bg-dark shadow-sm flex-column flex-md-row mb-4\"\n  id=\"main-navbar\"\n  style=\"min-height: 4rem\"\n>\n  <div class=\"container\">\n    <abp-logo *abpReplaceableTemplate=\"{ componentKey: service.logoComponentKey }\"></abp-logo>\n    <button\n      class=\"navbar-toggler\"\n      type=\"button\"\n      [attr.aria-expanded]=\"!service.isCollapsed\"\n      (click)=\"service.isCollapsed = !service.isCollapsed\"\n    >\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"navbar-collapse\" [class.overflow-hidden]=\"service.smallScreen\" id=\"main-navbar-collapse\">\n      <ng-container *ngTemplateOutlet=\"!service.smallScreen ? navigations : null\"></ng-container>\n\n      <div *ngIf=\"service.smallScreen\" [@collapseWithMargin]=\"service.isCollapsed ? 'collapsed' : 'expanded'\">\n        <ng-container *ngTemplateOutlet=\"navigations\"></ng-container>\n      </div>\n\n      <ng-template #navigations>\n        <abp-routes\n          *abpReplaceableTemplate=\"{\n            componentKey: service.routesComponentKey,\n            inputs: {\n              smallScreen: { value: service.smallScreen }\n            }\n          }\"\n          class=\"mx-auto\"\n          [smallScreen]=\"service.smallScreen\"\n        ></abp-routes>\n\n        <abp-nav-items\n          *abpReplaceableTemplate=\"{\n            componentKey: service.navItemsComponentKey\n          }\"\n        ></abp-nav-items>\n      </ng-template>\n    </div>\n  </div>\n</nav>\n\n<!-- [@slideFromBottom]=\"outlet.isActivated && outlet.activatedRoute?.routeConfig?.path\" TODO: throws ExpressionChangedAfterItHasBeenCheck when animation is active. It should be fixed -->\n<div class=\"container\">\n  <abp-page-alert-container></abp-page-alert-container>\n\n  <router-outlet #outlet=\"outlet\"></router-outlet>\n</div>\n",
                animations: [slideFromBottom, collapseWithMargin],
                providers: [LayoutService, SubscriptionService]
            },] }
];
ApplicationLayoutComponent.ctorParameters = () => [
    { type: LayoutService }
];

class EmptyLayoutComponent {
}
EmptyLayoutComponent.type = "empty" /* empty */;
EmptyLayoutComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-layout-empty',
                template: `
    <router-outlet></router-outlet>
    <abp-confirmation></abp-confirmation>
  `
            },] }
];

class LogoComponent {
    constructor(environment) {
        this.environment = environment;
    }
    get appInfo() {
        return this.environment.getEnvironment().application;
    }
}
LogoComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-logo',
                template: `
    <a class="navbar-brand" routerLink="/">
      <img
        *ngIf="appInfo.logoUrl; else appName"
        [src]="appInfo.logoUrl"
        [alt]="appInfo.name"
        width="100%"
        height="auto"
      />
    </a>

    <ng-template #appName>
      {{ appInfo.name }}
    </ng-template>
  `
            },] }
];
LogoComponent.ctorParameters = () => [
    { type: EnvironmentService }
];

class CurrentUserComponent {
    constructor(navigateToManageProfile, authService, configState, sessionState) {
        this.navigateToManageProfile = navigateToManageProfile;
        this.authService = authService;
        this.configState = configState;
        this.sessionState = sessionState;
        this.currentUser$ = this.configState.getOne$('currentUser');
        this.selectedTenant$ = this.sessionState.getTenant$();
    }
    get smallScreen() {
        return window.innerWidth < 992;
    }
    navigateToLogin() {
        this.authService.navigateToLogin();
    }
    logout() {
        this.authService.logout().subscribe();
    }
}
CurrentUserComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-current-user',
                template: "<ng-template #loginBtn>\n  <a role=\"button\" class=\"nav-link pointer\" (click)=\"navigateToLogin()\">{{\n    'AbpAccount::Login' | abpLocalization\n  }}</a>\n</ng-template>\n<div\n  *ngIf=\"(currentUser$ | async)?.isAuthenticated; else loginBtn\"\n  ngbDropdown\n  class=\"dropdown\"\n  #currentUserDropdown=\"ngbDropdown\"\n  display=\"static\"\n>\n  <a\n    ngbDropdownToggle\n    class=\"nav-link\"\n    href=\"javascript:void(0)\"\n    role=\"button\"\n    id=\"dropdownMenuLink\"\n    data-toggle=\"dropdown\"\n    aria-haspopup=\"true\"\n    aria-expanded=\"false\"\n  >\n    <small *ngIf=\"(selectedTenant$ | async)?.name as tenantName\"\n      ><i>{{ tenantName }}</i\n      >\\</small\n    >\n    <strong>{{ (currentUser$ | async)?.userName }}</strong>\n  </a>\n  <div\n    class=\"dropdown-menu dropdown-menu-right border-0 shadow-sm\"\n    aria-labelledby=\"dropdownMenuLink\"\n    [class.d-block]=\"smallScreen && currentUserDropdown.isOpen()\"\n  >\n    <a class=\"dropdown-item pointer\" (click)=\"navigateToManageProfile()\"\n      ><i class=\"fa fa-cog mr-1\"></i>{{ 'AbpAccount::MyAccount' | abpLocalization }}</a\n    >\n    <a class=\"dropdown-item\" href=\"javascript:void(0)\" (click)=\"logout()\"\n      ><i class=\"fa fa-power-off mr-1\"></i>{{ 'AbpUi::Logout' | abpLocalization }}</a\n    >\n  </div>\n</div>\n"
            },] }
];
CurrentUserComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NAVIGATE_TO_MANAGE_PROFILE,] }] },
    { type: AuthService },
    { type: ConfigStateService },
    { type: SessionStateService }
];

class LanguagesComponent {
    constructor(sessionState, configState) {
        this.sessionState = sessionState;
        this.configState = configState;
        this.languages$ = this.configState.getDeep$('localization.languages');
    }
    get smallScreen() {
        return window.innerWidth < 992;
    }
    get defaultLanguage$() {
        return this.languages$.pipe(map(languages => snq(() => languages.find(lang => lang.cultureName === this.selectedLangCulture).displayName), ''));
    }
    get dropdownLanguages$() {
        return this.languages$.pipe(map(languages => snq(() => languages.filter(lang => lang.cultureName !== this.selectedLangCulture)), []));
    }
    get selectedLangCulture() {
        return this.sessionState.getLanguage();
    }
    onChangeLang(cultureName) {
        this.sessionState.setLanguage(cultureName);
    }
}
LanguagesComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-languages',
                // tslint:disable-next-line: component-max-inline-declarations
                template: `
    <div
      *ngIf="(dropdownLanguages$ | async)?.length > 0"
      class="dropdown"
      ngbDropdown
      #languageDropdown="ngbDropdown"
      display="static"
    >
      <a
        ngbDropdownToggle
        class="nav-link"
        href="javascript:void(0)"
        role="button"
        id="dropdownMenuLink"
        data-toggle="dropdown"
        aria-haspopup="true"
        aria-expanded="false"
      >
        {{ defaultLanguage$ | async }}
      </a>
      <div
        class="dropdown-menu dropdown-menu-right border-0 shadow-sm"
        aria-labelledby="dropdownMenuLink"
        [class.d-block]="smallScreen && languageDropdown.isOpen()"
      >
        <a
          *ngFor="let lang of dropdownLanguages$ | async"
          href="javascript:void(0)"
          class="dropdown-item"
          (click)="onChangeLang(lang.cultureName)"
          >{{ lang?.displayName }}</a
        >
      </div>
    </div>
  `
            },] }
];
LanguagesComponent.ctorParameters = () => [
    { type: SessionStateService },
    { type: ConfigStateService }
];

class NavItemsComponent {
    constructor(navItems) {
        this.navItems = navItems;
        this.trackByFn = (_, element) => element.id;
    }
}
NavItemsComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-nav-items',
                template: "<ul class=\"navbar-nav\">\n  <ng-container *ngFor=\"let item of navItems.items$ | async; trackBy: trackByFn\">\n    <ng-container *ngIf=\"item.visible()\">\n      <li class=\"nav-item d-flex align-items-center\" *abpPermission=\"item.requiredPolicy\">\n        <ng-container\n          *ngIf=\"item.component; else htmlTemplate\"\n          [ngComponentOutlet]=\"item.component\"\n        ></ng-container>\n\n        <ng-template #htmlTemplate>\n          <div [innerHTML]=\"item.html\" (click)=\"item.action ? item.action() : null\"></div>\n        </ng-template>\n      </li>\n    </ng-container>\n  </ng-container>\n</ul>\n"
            },] }
];
NavItemsComponent.ctorParameters = () => [
    { type: NavItemsService }
];

class RoutesComponent {
    constructor(routesService, renderer) {
        this.routesService = routesService;
        this.renderer = renderer;
        this.trackByFn = (_, item) => item.name;
    }
    isDropdown(node) {
        return !(node === null || node === void 0 ? void 0 : node.isLeaf) || this.routesService.hasChildren(node.name);
    }
    closeDropdown() {
        this.childrenContainers.forEach(({ nativeElement }) => {
            this.renderer.addClass(nativeElement, 'd-none');
            setTimeout(() => this.renderer.removeClass(nativeElement, 'd-none'), 0);
        });
    }
}
RoutesComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-routes',
                template: "<ul class=\"navbar-nav\">\n  <ng-container\n    *ngFor=\"let route of routesService.visible$ | async; trackBy: trackByFn\"\n    [ngTemplateOutlet]=\"isDropdown(route) ? dropdownLink : defaultLink\"\n    [ngTemplateOutletContext]=\"{ $implicit: route }\"\n  >\n  </ng-container>\n\n  <ng-template #defaultLink let-route>\n    <li class=\"nav-item\" *abpPermission=\"route.requiredPolicy\">\n      <a class=\"nav-link\" [routerLink]=\"[route.path]\"\n        ><i *ngIf=\"route.iconClass\" [ngClass]=\"route.iconClass\"></i>\n        {{ route.name | abpLocalization }}</a\n      >\n    </li>\n  </ng-template>\n\n  <ng-template #dropdownLink let-route>\n    <ng-container *ngIf=\"route.children?.length\">\n      <li\n        #navbarRootDropdown\n        class=\"nav-item dropdown\"\n        display=\"static\"\n        *abpPermission=\"route.requiredPolicy\"\n        (click)=\"\n          navbarRootDropdown.expand\n            ? (navbarRootDropdown.expand = false)\n            : (navbarRootDropdown.expand = true)\n        \"\n      >\n        <a\n          class=\"nav-link dropdown-toggle\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n          href=\"javascript:void(0)\"\n        >\n          <i *ngIf=\"route.iconClass\" [ngClass]=\"route.iconClass\"></i>\n          {{ route.name | abpLocalization }}\n        </a>\n        <div\n          #routeContainer\n          class=\"dropdown-menu border-0 shadow-sm\"\n          (click)=\"$event.preventDefault(); $event.stopPropagation()\"\n          [class.d-block]=\"smallScreen && navbarRootDropdown.expand\"\n        >\n          <ng-container\n            *ngTemplateOutlet=\"forTemplate; context: { $implicit: route }\"\n          ></ng-container>\n        </div>\n      </li>\n    </ng-container>\n  </ng-template>\n\n  <ng-template #forTemplate let-route>\n    <ng-container *ngFor=\"let child of route.children\">\n      <ng-template\n        [ngTemplateOutlet]=\"child.children?.length ? dropdownChild : defaultChild\"\n        [ngTemplateOutletContext]=\"{ $implicit: child }\"\n      ></ng-template>\n    </ng-container>\n  </ng-template>\n\n  <ng-template #defaultChild let-child>\n    <ng-container *ngIf=\"child.path\">\n      <div class=\"dropdown-submenu\" *abpPermission=\"child.requiredPolicy\">\n        <a class=\"dropdown-item\" [routerLink]=\"[child.path]\" (click)=\"closeDropdown()\">\n          <i *ngIf=\"child.iconClass\" [ngClass]=\"child.iconClass\"></i>\n          {{ child.name | abpLocalization }}</a\n        >\n      </div>\n    </ng-container>\n  </ng-template>\n\n  <ng-template #dropdownChild let-child>\n    <div\n      class=\"dropdown-submenu\"\n      ngbDropdown\n      #dropdownSubmenu=\"ngbDropdown\"\n      placement=\"right-top\"\n      [autoClose]=\"true\"\n      *abpPermission=\"child.requiredPolicy\"\n    >\n      <div ngbDropdownToggle [class.dropdown-toggle]=\"false\">\n        <a\n          abpEllipsis=\"210px\"\n          [abpEllipsisEnabled]=\"!smallScreen\"\n          role=\"button\"\n          class=\"btn d-block text-left dropdown-toggle\"\n        >\n          <i *ngIf=\"child.iconClass\" [ngClass]=\"child.iconClass\"></i>\n          {{ child.name | abpLocalization }}\n        </a>\n      </div>\n      <div\n        #childrenContainer\n        class=\"dropdown-menu border-0 shadow-sm\"\n        [class.d-block]=\"smallScreen && dropdownSubmenu.isOpen()\"\n      >\n        <ng-container *ngTemplateOutlet=\"forTemplate; context: { $implicit: child }\"></ng-container>\n      </div>\n    </div>\n  </ng-template>\n</ul>\n"
            },] }
];
RoutesComponent.ctorParameters = () => [
    { type: RoutesService },
    { type: Renderer2 }
];
RoutesComponent.propDecorators = {
    smallScreen: [{ type: Input }],
    childrenContainers: [{ type: ViewChildren, args: ['childrenContainer',] }]
};

class ValidationErrorComponent extends ValidationErrorComponent$1 {
    get abpErrors() {
        if (!this.errors || !this.errors.length)
            return [];
        return this.errors.map(error => {
            if (!error.message)
                return error;
            const index = error.message.indexOf('[');
            if (index > -1) {
                return Object.assign(Object.assign({}, error), { message: error.message.slice(0, index), interpoliteParams: error.message.slice(index + 1, error.message.length - 1).split(',') });
            }
            return error;
        });
    }
}
ValidationErrorComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-validation-error',
                template: `
    <div class="invalid-feedback" *ngFor="let error of abpErrors; trackBy: trackByFn">
      {{ error.message | abpLocalization: error.interpoliteParams }}
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            },] }
];

class PageAlertContainerComponent {
    constructor(service) {
        this.service = service;
    }
}
PageAlertContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-page-alert-container',
                template: "<ng-container *ngFor=\"let alert of service.alerts$ | async; let i = index\">\n  <div\n    class=\"alert alert-{{ alert.type }} fade show\"\n    [ngClass]=\"{ 'alert-dismissible fade show': alert.dismissible }\"\n    role=\"alert\"\n  >\n    <h4 class=\"alert-heading\" *ngIf=\"alert.title\">\n      {{ alert.title | abpLocalization: alert.titleLocalizationParams }}\n    </h4>\n    {{ alert.message | abpLocalization: alert.messageLocalizationParams }}\n    <button\n      *ngIf=\"alert.dismissible\"\n      type=\"button\"\n      class=\"close\"\n      data-dismiss=\"alert\"\n      aria-label=\"Close\"\n      (click)=\"service.remove(i)\"\n    >\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n</ng-container>\n",
                encapsulation: ViewEncapsulation.None
            },] }
];
PageAlertContainerComponent.ctorParameters = () => [
    { type: PageAlertService }
];

const BASIC_THEME_NAV_ITEM_PROVIDERS = [
    {
        provide: APP_INITIALIZER,
        useFactory: configureNavItems,
        deps: [NavItemsService],
        multi: true,
    },
];
function configureNavItems(navItems) {
    return () => {
        navItems.addItems([
            {
                id: "Theme.LanguagesComponent" /* Languages */,
                order: 100,
                component: LanguagesComponent,
            },
            {
                id: "Theme.CurrentUserComponent" /* CurrentUser */,
                order: 100,
                component: CurrentUserComponent,
            },
        ]);
    };
}

var styles = `
.content-header-title {
    font-size: 24px;
}
.entry-row {
    margin-bottom: 15px;
}
#main-navbar-tools a.dropdown-toggle {
    text-decoration: none;
    color: #fff;
}
.navbar .dropdown-submenu {
    position: relative;
}
.navbar .dropdown-menu {
    margin: 0;
    padding: 0;
}
.navbar .dropdown-menu a {
    font-size: .9em;
    padding: 10px 15px;
    display: block;
    min-width: 210px;
    text-align: left;
    border-radius: 0.25rem;
    min-height: 44px;
}
[dir=rtl] .navbar .dropdown-menu a {
    text-align: right!important;
}
.navbar .dropdown-submenu a::after {
    transform: rotate(-90deg);
    position: absolute;
    right: 16px;
    top: 18px;
}
[dir=rtl] .navbar .dropdown-submenu a::after {
    transform: rotate(90deg);
    left: 16px;
    right: auto;
    top: 20px;
}
.navbar .dropdown-submenu .dropdown-menu {
    top: 0;
    left: 100%;
}
.card-header .btn {
    padding: 2px 6px;
}
.card-header h5 {
    margin: 0;
}
.container > .card {
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;
}
@media screen and (min-width: 992px) {
    .navbar .dropdown:hover > .dropdown-menu {
        display: block;
    }

    .navbar .dropdown-submenu:hover > .dropdown-menu {
        display: block;
    }
}
.input-validation-error {
    border-color: #dc3545;
}
.field-validation-error {
    font-size: 0.8em;
}
.ui-table .ui-table-tbody > tr.empty-row > div.empty-row-content {
    border: 1px solid #c8c8c8;
  }
.abp-loading {
    background: rgba(0, 0, 0, 0.05);
}
.modal-backdrop {
background-color: rgba(0, 0, 0, 0.6);
}

.confirmation .confirmation-backdrop {
	 background: rgba(0, 0, 0, 0.7) !important;
}
 .confirmation .confirmation-dialog {
	 border: none;
	 border-radius: 10px;
	 background-color: #fff;
	 box-shadow: 0 0 10px -5px rgba(0, 0, 0, 0.5);
}
 .confirmation .confirmation-dialog .icon-container .icon {
	 stroke: #fff;
	 color: #fff;
}
 .confirmation .confirmation-dialog .icon-container.info .icon {
	 stroke: #2f96b4;
	 color: #2f96b4;
}
 .confirmation .confirmation-dialog .icon-container.success .icon {
	 stroke: #51a351;
	 color: #51a351;
}
 .confirmation .confirmation-dialog .icon-container.warning .icon {
	 stroke: #f89406;
	 color: #f89406;
}
 .confirmation .confirmation-dialog .icon-container.error .icon {
	 stroke: #bd362f;
	 color: #bd362f;
}
 .confirmation .confirmation-dialog .content .title {
	 color: #222;
}
 .confirmation .confirmation-dialog .content .message {
	 color: #777;
}
 .confirmation .confirmation-dialog .footer {
	 background: transparent;
}
 .confirmation .confirmation-dialog .footer .confirmation-button {
	 background-color: #eee;
	 color: #777;
}
 .confirmation .confirmation-dialog .footer .confirmation-button:hover, .confirmation .confirmation-dialog .footer .confirmation-button:focus, .confirmation .confirmation-dialog .footer .confirmation-button:active {
	 background-color: #bbb;
}
 .confirmation .confirmation-dialog .footer .confirmation-button--confirm {
	 background-color: #2f96b4;
	 color: #fff;
}
 .confirmation .confirmation-dialog .footer .confirmation-button--confirm:hover {
	 background-color: #2e819b;
}
.ui-table .pagination-wrapper {
    background-color: #f4f4f4;
    border: 1px solid #c8c8c8;
}
.bordered .datatable-body-row {
    border-top: 1px solid #eee;
    margin-top: -1px;
}
.breadcrumb {
    background-color: transparent;
    padding: 0.27rem;
}
`;

const BASIC_THEME_STYLES_PROVIDERS = [
    {
        provide: APP_INITIALIZER,
        useFactory: configureStyles,
        deps: [DomInsertionService, ReplaceableComponentsService],
        multi: true,
    },
];
function configureStyles(domInsertion, replaceableComponents) {
    return () => {
        domInsertion.insertContent(CONTENT_STRATEGY.AppendStyleToHead(styles));
        initLayouts(replaceableComponents);
    };
}
function initLayouts(replaceableComponents) {
    replaceableComponents.add({
        key: "Theme.ApplicationLayoutComponent" /* ApplicationLayout */,
        component: ApplicationLayoutComponent,
    });
    replaceableComponents.add({
        key: "Theme.AccountLayoutComponent" /* AccountLayout */,
        component: AccountLayoutComponent,
    });
    replaceableComponents.add({
        key: "Theme.EmptyLayoutComponent" /* EmptyLayout */,
        component: EmptyLayoutComponent,
    });
}

const LAYOUTS = [ApplicationLayoutComponent, AccountLayoutComponent, EmptyLayoutComponent];
class BaseThemeBasicModule {
}
BaseThemeBasicModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ...LAYOUTS,
                    ValidationErrorComponent,
                    LogoComponent,
                    NavItemsComponent,
                    RoutesComponent,
                    CurrentUserComponent,
                    LanguagesComponent,
                    PageAlertContainerComponent,
                    TenantBoxComponent,
                    AuthWrapperComponent,
                ],
                exports: [
                    ...LAYOUTS,
                    ValidationErrorComponent,
                    LogoComponent,
                    NavItemsComponent,
                    RoutesComponent,
                    CurrentUserComponent,
                    LanguagesComponent,
                    PageAlertContainerComponent,
                ],
                imports: [
                    CoreModule,
                    ThemeSharedModule,
                    NgbCollapseModule,
                    NgbDropdownModule,
                    NgxValidateCoreModule,
                ],
                entryComponents: [...LAYOUTS, ValidationErrorComponent, CurrentUserComponent, LanguagesComponent],
            },] }
];
class ThemeBasicModule {
    static forRoot() {
        return {
            ngModule: ThemeBasicModule,
            providers: [
                BASIC_THEME_NAV_ITEM_PROVIDERS,
                BASIC_THEME_STYLES_PROVIDERS,
                {
                    provide: VALIDATION_ERROR_TEMPLATE,
                    useValue: ValidationErrorComponent,
                },
                {
                    provide: VALIDATION_TARGET_SELECTOR,
                    useValue: '.form-group',
                },
                {
                    provide: VALIDATION_INVALID_CLASSES,
                    useValue: 'is-invalid',
                },
            ],
        };
    }
}
ThemeBasicModule.decorators = [
    { type: NgModule, args: [{
                exports: [BaseThemeBasicModule],
                imports: [BaseThemeBasicModule],
            },] }
];

/*
 * Public API Surface of theme-basic
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AccountLayoutComponent, ApplicationLayoutComponent, AuthWrapperComponent, BASIC_THEME_NAV_ITEM_PROVIDERS, BASIC_THEME_STYLES_PROVIDERS, BaseThemeBasicModule, CurrentUserComponent, EmptyLayoutComponent, LAYOUTS, LanguagesComponent, LogoComponent, NavItemsComponent, PageAlertContainerComponent, RoutesComponent, TenantBoxComponent, ThemeBasicModule, ValidationErrorComponent, configureNavItems, configureStyles, ApplicationLayoutComponent as ɵa, LayoutService as ɵb, AccountLayoutComponent as ɵc, EmptyLayoutComponent as ɵd, ValidationErrorComponent as ɵe, LogoComponent as ɵf, NavItemsComponent as ɵg, RoutesComponent as ɵh, CurrentUserComponent as ɵi, LanguagesComponent as ɵj, PageAlertContainerComponent as ɵk, TenantBoxComponent as ɵl, AuthWrapperComponent as ɵm, BASIC_THEME_NAV_ITEM_PROVIDERS as ɵn, configureNavItems as ɵo, BASIC_THEME_STYLES_PROVIDERS as ɵp, configureStyles as ɵq };
//# sourceMappingURL=abp-ng.theme.basic.js.map
