{"version":3,"file":"abp-ng.components-tree.js","sources":["../../../packages/components/tree/src/lib/templates/tree-node-template.directive.ts","../../../packages/components/tree/src/lib/templates/expanded-icon-template.directive.ts","../../../packages/components/tree/src/lib/components/tree.component.ts","../../../packages/components/tree/src/lib/tree.module.ts","../../../packages/components/tree/src/lib/utils/nz-tree-adapter.ts","../../../packages/components/tree/src/abp-ng.components-tree.ts"],"sourcesContent":["import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[abpTreeNodeTemplate],[abp-tree-node-template]',\n})\nexport class TreeNodeTemplateDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[abpTreeExpandedIconTemplate],[abp-tree-expanded-icon-template]',\n})\nexport class ExpandedIconTemplateDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import {\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { NzFormatEmitEvent, NzFormatBeforeDropEvent } from 'ng-zorro-antd/tree';\nimport { of } from 'rxjs';\nimport { TreeNodeTemplateDirective } from '../templates/tree-node-template.directive';\nimport { ExpandedIconTemplateDirective } from '../templates/expanded-icon-template.directive';\nimport { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';\n\nexport type DropEvent = NzFormatEmitEvent & { pos: number };\n\n@Component({\n  selector: 'abp-tree',\n  templateUrl: 'tree.component.html',\n  styleUrls: [\n    '../../../../../../node_modules/ng-zorro-antd/tree/style/index.min.css',\n    'tree.component.scss',\n  ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class TreeComponent {\n  dropPosition: number;\n\n  dropdowns = {} as { [key: string]: NgbDropdown };\n\n  @ContentChild('menu') menu: TemplateRef<any>;\n  @ContentChild(TreeNodeTemplateDirective) customNodeTemplate: TreeNodeTemplateDirective;\n  @ContentChild(ExpandedIconTemplateDirective) expandedIconTemplate: ExpandedIconTemplateDirective;\n  @Output() readonly checkedKeysChange = new EventEmitter();\n  @Output() readonly expandedKeysChange = new EventEmitter<string[]>();\n  @Output() readonly selectedNodeChange = new EventEmitter();\n  @Output() readonly dropOver = new EventEmitter<DropEvent>();\n  @Input() noAnimation = true;\n  @Input() draggable: boolean;\n  @Input() checkable: boolean;\n  @Input() checkStrictly: boolean;\n  @Input() checkedKeys = [];\n  @Input() nodes = [];\n  @Input() expandedKeys: string[] = [];\n  @Input() selectedNode: any;\n  @Input() isNodeSelected = node => this.selectedNode?.id === node.key;\n  @Input() beforeDrop = (event: NzFormatBeforeDropEvent) => {\n    this.dropPosition = event.pos;\n    return of(false);\n  };\n\n  onSelectedNodeChange(node) {\n    this.selectedNode = node.origin.entity;\n    this.selectedNodeChange.emit(node.origin.entity);\n  }\n\n  onCheckboxChange(event) {\n    this.checkedKeys = [...event.keys];\n    this.checkedKeysChange.emit(event.keys);\n  }\n\n  onExpandedKeysChange(event) {\n    this.expandedKeys = [...event.keys];\n    this.expandedKeysChange.emit(event.keys);\n  }\n\n  onDrop(event: DropEvent) {\n    event.event.stopPropagation();\n    event.event.preventDefault();\n    event.pos = this.dropPosition;\n\n    this.dropOver.emit(event);\n  }\n\n  initDropdown(key: string, dropdown: NgbDropdown) {\n    this.dropdowns[key] = dropdown;\n  }\n}\n","import { CoreModule } from '@abp/ng.core';\nimport { NgModule } from '@angular/core';\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport { NzTreeModule } from 'ng-zorro-antd/tree';\nimport { TreeComponent } from './components/tree.component';\nimport { ExpandedIconTemplateDirective } from './templates/expanded-icon-template.directive';\nimport { TreeNodeTemplateDirective } from './templates/tree-node-template.directive';\n\nconst templates = [TreeNodeTemplateDirective, ExpandedIconTemplateDirective];\n\nconst exported = [...templates, TreeComponent];\n\n@NgModule({\n  imports: [CoreModule, NzTreeModule, NgbDropdownModule, NzNoAnimationModule],\n  exports: [...exported],\n  declarations: [...exported],\n})\nexport class TreeModule {}\n","export abstract class BaseNode {\n  name?: string;\n  displayName?: string;\n\n  constructor(public id: string, public parentId: string | null) {}\n}\n\nclass TreeNode<T extends BaseNode> extends BaseNode {\n  title: string | undefined;\n  key: string;\n  icon: string | null = null;\n  children: TreeNode<T>[] = [];\n  isLeaf = true;\n  checked = false;\n  selected = false;\n  expanded = false;\n  selectable = true;\n  disabled = false;\n  disableCheckbox = false;\n  parentNode?: TreeNode<T> | null;\n\n  constructor(public entity: T, private nameResolver = ent => ent.displayName || ent.name) {\n    super(entity.id, entity.parentId);\n    this.key = entity.id;\n    this.title = nameResolver(entity);\n  }\n}\n\nexport class TreeAdapter<T extends BaseNode = BaseNode> {\n  private tree: TreeNode<T>[];\n\n  constructor(private list: T[] = []) {\n    this.tree = createTreeFromList(this.list);\n  }\n\n  getList() {\n    return this.list;\n  }\n\n  getTree() {\n    return this.tree;\n  }\n\n  handleDrop({ key, parentNode }: TreeNode<T>) {\n    const index = this.list.findIndex(({ id }) => id === key);\n    this.list[index].parentId = parentNode ? parentNode.key : null;\n    this.tree = createTreeFromList(this.list);\n  }\n\n  handleRemove({ key }: TreeNode<T>) {\n    this.updateTreeFromList(this.list.filter(item => item.id !== key));\n  }\n\n  handleUpdate({ key, children }: { key: string; children: T[] }) {\n    /**\n     * When we need to update a node with new children, first we need to remove any descendant nodes.\n     * If we remove immediate children and create a new tree, any other descendant nodes will be removed\n     * and we won't need to recursively remove sub children.\n     * Then, you simply add back the new children and create a new tree.\n     */\n    const listWithDescendantNodesRemoved = this.updateTreeFromList(\n      this.list.filter(item => item.parentId !== key),\n    );\n    this.updateTreeFromList(listWithDescendantNodesRemoved.concat(children));\n  }\n\n  updateTreeFromList(list: T[]) {\n    this.tree = createTreeFromList(list);\n    this.list = createListFromTree(this.tree);\n    return this.list;\n  }\n}\n\n// UTILITY FUNCTIONS\n\nfunction createTreeFromList<T extends BaseNode>(list: T[]): TreeNode<T>[] {\n  const map = createMapFromList(list);\n  const tree: TreeNode<T>[] = [];\n\n  list.forEach(row => {\n    const parentId = row.parentId;\n    const node = map.get(row.id);\n    if (parentId) {\n      const parent = map.get(parentId);\n      if (!parent) return;\n      parent.children.push(node);\n      parent.isLeaf = false;\n    } else {\n      tree.push(node);\n    }\n  });\n\n  return tree;\n}\n\nfunction createListFromTree<T extends BaseNode>(tree: TreeNode<T>[], list: T[] = []): T[] {\n  tree.forEach(node => {\n    list.push({ ...node.entity, parentId: node.parentId });\n    if (node.children) createListFromTree(node.children, list);\n  });\n\n  return list;\n}\n\nfunction createMapFromList<T extends BaseNode>(\n  list: T[],\n  map = new Map<string, TreeNode<T>>(),\n): Map<string, TreeNode<T>> {\n  list.forEach(row => map.set(row.id, new TreeNode(row)));\n\n  return map;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;MAKa,yBAAyB;IACpC,YAAmB,QAA0B;QAA1B,aAAQ,GAAR,QAAQ,CAAkB;KAAI;;;YAJlD,SAAS,SAAC;gBACT,QAAQ,EAAE,gDAAgD;aAC3D;;;YAJmB,WAAW;;;MCKlB,6BAA6B;IACxC,YAAmB,QAA0B;QAA1B,aAAQ,GAAR,QAAQ,CAAkB;KAAI;;;YAJlD,SAAS,SAAC;gBACT,QAAQ,EAAE,iEAAiE;aAC5E;;;YAJmB,WAAW;;;MC0BlB,aAAa;IAT1B;QAYE,cAAS,GAAG,EAAoC,CAAC;QAK9B,sBAAiB,GAAG,IAAI,YAAY,EAAE,CAAC;QACvC,uBAAkB,GAAG,IAAI,YAAY,EAAY,CAAC;QAClD,uBAAkB,GAAG,IAAI,YAAY,EAAE,CAAC;QACxC,aAAQ,GAAG,IAAI,YAAY,EAAa,CAAC;QACnD,gBAAW,GAAG,IAAI,CAAC;QAInB,gBAAW,GAAG,EAAE,CAAC;QACjB,UAAK,GAAG,EAAE,CAAC;QACX,iBAAY,GAAa,EAAE,CAAC;QAE5B,mBAAc,GAAG,IAAI,cAAI,OAAA,OAAA,IAAI,CAAC,YAAY,0CAAE,EAAE,MAAK,IAAI,CAAC,GAAG,CAAA,EAAA,CAAC;QAC5D,eAAU,GAAG,CAAC,KAA8B;YACnD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC;YAC9B,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;SAClB,CAAC;KA4BH;IA1BC,oBAAoB,CAAC,IAAI;QACvB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QACvC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KAClD;IAED,gBAAgB,CAAC,KAAK;QACpB,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KACzC;IAED,oBAAoB,CAAC,KAAK;QACxB,IAAI,CAAC,YAAY,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KAC1C;IAED,MAAM,CAAC,KAAgB;QACrB,KAAK,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC;QAC9B,KAAK,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;QAC7B,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC;QAE9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC3B;IAED,YAAY,CAAC,GAAW,EAAE,QAAqB;QAC7C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;KAChC;;;YA5DF,SAAS,SAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,8lGAAkC;gBAKlC,aAAa,EAAE,iBAAiB,CAAC,IAAI;;aACtC;;;mBAME,YAAY,SAAC,MAAM;iCACnB,YAAY,SAAC,yBAAyB;mCACtC,YAAY,SAAC,6BAA6B;gCAC1C,MAAM;iCACN,MAAM;iCACN,MAAM;uBACN,MAAM;0BACN,KAAK;wBACL,KAAK;wBACL,KAAK;4BACL,KAAK;0BACL,KAAK;oBACL,KAAK;2BACL,KAAK;2BACL,KAAK;6BACL,KAAK;yBACL,KAAK;;;ACtCR,MAAM,SAAS,GAAG,CAAC,yBAAyB,EAAE,6BAA6B,CAAC,CAAC;AAE7E,MAAM,QAAQ,GAAG,CAAC,GAAG,SAAS,EAAE,aAAa,CAAC,CAAC;MAOlC,UAAU;;;YALtB,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,UAAU,EAAE,YAAY,EAAE,iBAAiB,EAAE,mBAAmB,CAAC;gBAC3E,OAAO,EAAE,CAAC,GAAG,QAAQ,CAAC;gBACtB,YAAY,EAAE,CAAC,GAAG,QAAQ,CAAC;aAC5B;;;MCjBqB,QAAQ;IAI5B,YAAmB,EAAU,EAAS,QAAuB;QAA1C,OAAE,GAAF,EAAE,CAAQ;QAAS,aAAQ,GAAR,QAAQ,CAAe;KAAI;CAClE;AAED,MAAM,QAA6B,SAAQ,QAAQ;IAcjD,YAAmB,MAAS,EAAU,eAAe,GAAG,IAAI,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,IAAI;QACrF,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;QADjB,WAAM,GAAN,MAAM,CAAG;QAAU,iBAAY,GAAZ,YAAY,CAAqC;QAXvF,SAAI,GAAkB,IAAI,CAAC;QAC3B,aAAQ,GAAkB,EAAE,CAAC;QAC7B,WAAM,GAAG,IAAI,CAAC;QACd,YAAO,GAAG,KAAK,CAAC;QAChB,aAAQ,GAAG,KAAK,CAAC;QACjB,aAAQ,GAAG,KAAK,CAAC;QACjB,eAAU,GAAG,IAAI,CAAC;QAClB,aAAQ,GAAG,KAAK,CAAC;QACjB,oBAAe,GAAG,KAAK,CAAC;QAKtB,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,EAAE,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;KACnC;CACF;MAEY,WAAW;IAGtB,YAAoB,OAAY,EAAE;QAAd,SAAI,GAAJ,IAAI,CAAU;QAChC,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC3C;IAED,OAAO;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;IAED,OAAO;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;IAED,UAAU,CAAC,EAAE,GAAG,EAAE,UAAU,EAAe;QACzC,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC;QAC1D,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,GAAG,UAAU,GAAG,UAAU,CAAC,GAAG,GAAG,IAAI,CAAC;QAC/D,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC3C;IAED,YAAY,CAAC,EAAE,GAAG,EAAe;QAC/B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;KACpE;IAED,YAAY,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAkC;;;;;;;QAO5D,MAAM,8BAA8B,GAAG,IAAI,CAAC,kBAAkB,CAC5D,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,GAAG,CAAC,CAChD,CAAC;QACF,IAAI,CAAC,kBAAkB,CAAC,8BAA8B,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC1E;IAED,kBAAkB,CAAC,IAAS;QAC1B,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;CACF;AAED;AAEA,SAAS,kBAAkB,CAAqB,IAAS;IACvD,MAAM,GAAG,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;IACpC,MAAM,IAAI,GAAkB,EAAE,CAAC;IAE/B,IAAI,CAAC,OAAO,CAAC,GAAG;QACd,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;QAC9B,MAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC7B,IAAI,QAAQ,EAAE;YACZ,MAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACjC,IAAI,CAAC,MAAM;gBAAE,OAAO;YACpB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;SACvB;aAAM;YACL,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACjB;KACF,CAAC,CAAC;IAEH,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,kBAAkB,CAAqB,IAAmB,EAAE,OAAY,EAAE;IACjF,IAAI,CAAC,OAAO,CAAC,IAAI;QACf,IAAI,CAAC,IAAI,iCAAM,IAAI,CAAC,MAAM,KAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAG,CAAC;QACvD,IAAI,IAAI,CAAC,QAAQ;YAAE,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;KAC5D,CAAC,CAAC;IAEH,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,iBAAiB,CACxB,IAAS,EACT,MAAM,IAAI,GAAG,EAAuB;IAEpC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAExD,OAAO,GAAG,CAAC;AACb;;AC/GA;;;;;;"}