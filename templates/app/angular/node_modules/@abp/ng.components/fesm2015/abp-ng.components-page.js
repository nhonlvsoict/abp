import { Component, ViewEncapsulation, Input, ContentChild, InjectionToken, Directive, TemplateRef, ViewContainerRef, Optional, Inject, Injector, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { UiExtensionsModule } from '@abp/ng.theme.shared/extensions';
import { ThemeSharedModule } from '@abp/ng.theme.shared';
import { CoreModule } from '@abp/ng.core';
import { Observable, of } from 'rxjs';

var PageParts;
(function (PageParts) {
    PageParts["title"] = "PageTitleContainerComponent";
    PageParts["breadcrumb"] = "PageBreadcrumbContainerComponent";
    PageParts["toolbar"] = "PageToolbarContainerComponent";
})(PageParts || (PageParts = {}));
class PageTitleContainerComponent {
}
PageTitleContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-page-title-container',
                template: `
    <ng-content></ng-content>
  `,
                encapsulation: ViewEncapsulation.None
            },] }
];
class PageBreadcrumbContainerComponent {
}
PageBreadcrumbContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-page-breadcrumb-container',
                template: `
    <ng-content></ng-content>
  `,
                encapsulation: ViewEncapsulation.None
            },] }
];
class PageToolbarContainerComponent {
}
PageToolbarContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-page-toolbar-container',
                template: `
    <ng-content></ng-content>
  `,
                encapsulation: ViewEncapsulation.None
            },] }
];

class PageComponent {
    constructor() {
        this.toolbarVisible = false;
        this.breadcrumbVisible = true;
        this.pageParts = {
            title: PageParts.title,
            breadcrumb: PageParts.breadcrumb,
            toolbar: PageParts.toolbar,
        };
    }
    set toolbarData(val) {
        this._toolbarData = val;
        this.toolbarVisible = true;
    }
    get toolbarData() {
        return this._toolbarData;
    }
    get shouldRenderRow() {
        return !!(this.title ||
            this.toolbarVisible ||
            this.breadcrumbVisible ||
            this.customTitle ||
            this.customBreadcrumb ||
            this.customToolbar);
    }
}
PageComponent.decorators = [
    { type: Component, args: [{
                selector: 'abp-page',
                template: "<div class=\"row entry-row\" *ngIf=\"shouldRenderRow\">\n  <ng-container *ngIf=\"customTitle; else defaultTitleTemplate\">\n    <ng-content select=\"abp-page-title-container\"></ng-content>\n  </ng-container>\n\n  <ng-container *ngIf=\"customBreadcrumb; else defaultBreadcrumbTemplate\">\n    <ng-content select=\"abp-page-breadcrumb-container\"></ng-content>\n  </ng-container>\n\n  <ng-container *ngIf=\"customToolbar; else defaultPageToolbarTemplate\">\n    <ng-content select=\"abp-page-toolbar-container\"></ng-content>\n  </ng-container>\n</div>\n\n<ng-content></ng-content>\n\n<ng-template #defaultTitleTemplate>\n  <ng-container *ngIf=\"title\">\n    <div class=\"col-auto\" *abpPagePart=\"pageParts.title\">\n      <h1 class=\"content-header-title\">\n        {{ title }}\n      </h1>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #defaultBreadcrumbTemplate>\n  <ng-container *ngIf=\"breadcrumbVisible\">\n    <div class=\"col-lg-auto pl-lg-0\" *abpPagePart=\"pageParts.breadcrumb\">\n      <abp-breadcrumb></abp-breadcrumb>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #defaultPageToolbarTemplate>\n  <ng-container *ngIf=\"toolbarVisible\">\n    <div class=\"col\" *abpPagePart=\"pageParts.toolbar; context: toolbarData\">\n      <abp-page-toolbar [record]=\"toolbarData\"></abp-page-toolbar>\n    </div>\n  </ng-container>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None
            },] }
];
PageComponent.propDecorators = {
    title: [{ type: Input }],
    toolbarData: [{ type: Input, args: ['toolbar',] }],
    breadcrumbVisible: [{ type: Input, args: ['breadcrumb',] }],
    customTitle: [{ type: ContentChild, args: [PageTitleContainerComponent,] }],
    customBreadcrumb: [{ type: ContentChild, args: [PageBreadcrumbContainerComponent,] }],
    customToolbar: [{ type: ContentChild, args: [PageToolbarContainerComponent,] }]
};

const PAGE_RENDER_STRATEGY = new InjectionToken('PAGE_RENDER_STRATEGY');
class PagePartDirective {
    constructor(templateRef, viewContainer, renderLogic, injector) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.renderLogic = renderLogic;
        this.injector = injector;
        this.hasRendered = false;
        this.render = (shouldRender) => {
            if (shouldRender && !this.hasRendered) {
                this.viewContainer.createEmbeddedView(this.templateRef);
                this.hasRendered = true;
            }
            else if (!shouldRender && this.hasRendered) {
                this.viewContainer.clear();
                this.hasRendered = false;
            }
        };
    }
    set abpPagePart(type) {
        this.type = type;
        this.createRenderStream(type);
    }
    ngOnChanges({ context }) {
        var _a;
        if ((_a = this.renderLogic) === null || _a === void 0 ? void 0 : _a.onContextUpdate) {
            this.renderLogic.onContextUpdate(context);
        }
    }
    ngOnInit() {
        var _a;
        if ((_a = this.renderLogic) === null || _a === void 0 ? void 0 : _a.onInit) {
            this.renderLogic.onInit(this.type, this.injector, this.context);
        }
    }
    ngOnDestroy() {
        var _a;
        this.clearSubscription();
        if ((_a = this.renderLogic) === null || _a === void 0 ? void 0 : _a.onDestroy) {
            this.renderLogic.onDestroy(this.type, this.injector, this.context);
        }
    }
    shouldRender(type) {
        if (this.renderLogic) {
            const willRender = this.renderLogic.shouldRender(type);
            return willRender instanceof Observable ? willRender : of(willRender);
        }
        return of(true);
    }
    createRenderStream(type) {
        this.clearSubscription();
        this.subscription = this.shouldRender(type).subscribe(this.render);
    }
    clearSubscription() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
PagePartDirective.decorators = [
    { type: Directive, args: [{ selector: '[abpPagePart]' },] }
];
PagePartDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [PAGE_RENDER_STRATEGY,] }] },
    { type: Injector }
];
PagePartDirective.propDecorators = {
    context: [{ type: Input, args: ['abpPagePartContext',] }],
    abpPagePart: [{ type: Input }]
};

const exportedDeclarations = [
    PageComponent,
    PageTitleContainerComponent,
    PageBreadcrumbContainerComponent,
    PageToolbarContainerComponent,
    PagePartDirective,
];
class PageModule {
}
PageModule.decorators = [
    { type: NgModule, args: [{
                declarations: [...exportedDeclarations],
                imports: [CommonModule, UiExtensionsModule, CoreModule, ThemeSharedModule],
                exports: [...exportedDeclarations],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { PAGE_RENDER_STRATEGY, PageBreadcrumbContainerComponent, PageComponent, PageModule, PagePartDirective, PageParts, PageTitleContainerComponent, PageToolbarContainerComponent };
//# sourceMappingURL=abp-ng.components-page.js.map
