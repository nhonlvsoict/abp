import { Directive, TemplateRef, ViewContainerRef, Input, InjectionToken, Optional, Inject, Injector, } from '@angular/core';
import { Observable, of } from 'rxjs';
export const PAGE_RENDER_STRATEGY = new InjectionToken('PAGE_RENDER_STRATEGY');
export class PagePartDirective {
    constructor(templateRef, viewContainer, renderLogic, injector) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.renderLogic = renderLogic;
        this.injector = injector;
        this.hasRendered = false;
        this.render = (shouldRender) => {
            if (shouldRender && !this.hasRendered) {
                this.viewContainer.createEmbeddedView(this.templateRef);
                this.hasRendered = true;
            }
            else if (!shouldRender && this.hasRendered) {
                this.viewContainer.clear();
                this.hasRendered = false;
            }
        };
    }
    set abpPagePart(type) {
        this.type = type;
        this.createRenderStream(type);
    }
    ngOnChanges({ context }) {
        var _a;
        if ((_a = this.renderLogic) === null || _a === void 0 ? void 0 : _a.onContextUpdate) {
            this.renderLogic.onContextUpdate(context);
        }
    }
    ngOnInit() {
        var _a;
        if ((_a = this.renderLogic) === null || _a === void 0 ? void 0 : _a.onInit) {
            this.renderLogic.onInit(this.type, this.injector, this.context);
        }
    }
    ngOnDestroy() {
        var _a;
        this.clearSubscription();
        if ((_a = this.renderLogic) === null || _a === void 0 ? void 0 : _a.onDestroy) {
            this.renderLogic.onDestroy(this.type, this.injector, this.context);
        }
    }
    shouldRender(type) {
        if (this.renderLogic) {
            const willRender = this.renderLogic.shouldRender(type);
            return willRender instanceof Observable ? willRender : of(willRender);
        }
        return of(true);
    }
    createRenderStream(type) {
        this.clearSubscription();
        this.subscription = this.shouldRender(type).subscribe(this.render);
    }
    clearSubscription() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
PagePartDirective.decorators = [
    { type: Directive, args: [{ selector: '[abpPagePart]' },] }
];
PagePartDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [PAGE_RENDER_STRATEGY,] }] },
    { type: Injector }
];
PagePartDirective.propDecorators = {
    context: [{ type: Input, args: ['abpPagePartContext',] }],
    abpPagePart: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1wYXJ0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvbXBvbmVudHMvcGFnZS9zcmMvcGFnZS1wYXJ0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFdBQVcsRUFDWCxnQkFBZ0IsRUFDaEIsS0FBSyxFQUNMLGNBQWMsRUFDZCxRQUFRLEVBQ1IsTUFBTSxFQUdOLFFBQVEsR0FJVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsVUFBVSxFQUFnQixFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFTcEQsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxjQUFjLENBQXFCLHNCQUFzQixDQUFDLENBQUM7QUFHbkcsTUFBTSxPQUFPLGlCQUFpQjtJQXFCNUIsWUFDVSxXQUE2QixFQUM3QixhQUErQixFQUNXLFdBQStCLEVBQ3pFLFFBQWtCO1FBSGxCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtRQUM3QixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDVyxnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7UUFDekUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQXhCNUIsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFVcEIsV0FBTSxHQUFHLENBQUMsWUFBcUIsRUFBRSxFQUFFO1lBQ2pDLElBQUksWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDckMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3hELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO2FBQ3pCO2lCQUFNLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDNUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7YUFDMUI7UUFDSCxDQUFDLENBQUM7SUFPQyxDQUFDO0lBcEJKLElBQWEsV0FBVyxDQUFDLElBQVk7UUFDbkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFtQkQsV0FBVyxDQUFDLEVBQUUsT0FBTyxFQUFpQjs7UUFDcEMsVUFBSSxJQUFJLENBQUMsV0FBVywwQ0FBRSxlQUFlLEVBQUU7WUFDckMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDM0M7SUFDSCxDQUFDO0lBRUQsUUFBUTs7UUFDTixVQUFJLElBQUksQ0FBQyxXQUFXLDBDQUFFLE1BQU0sRUFBRTtZQUM1QixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2pFO0lBQ0gsQ0FBQztJQUVELFdBQVc7O1FBQ1QsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFekIsVUFBSSxJQUFJLENBQUMsV0FBVywwQ0FBRSxTQUFTLEVBQUU7WUFDL0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNwRTtJQUNILENBQUM7SUFFRCxZQUFZLENBQUMsSUFBWTtRQUN2QixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkQsT0FBTyxVQUFVLFlBQVksVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN2RTtRQUNELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFUyxrQkFBa0IsQ0FBQyxJQUFZO1FBQ3ZDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBRXpCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFUyxpQkFBaUI7UUFDekIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDOzs7WUFuRUYsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRTs7O1lBeEJ0QyxXQUFXO1lBQ1gsZ0JBQWdCOzRDQWdEYixRQUFRLFlBQUksTUFBTSxTQUFDLG9CQUFvQjtZQXpDMUMsUUFBUTs7O3NCQXNCUCxLQUFLLFNBQUMsb0JBQW9COzBCQUMxQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NvbnRhaW5lclJlZixcbiAgSW5wdXQsXG4gIEluamVjdGlvblRva2VuLFxuICBPcHRpb25hbCxcbiAgSW5qZWN0LFxuICBPbkluaXQsXG4gIE9uRGVzdHJveSxcbiAgSW5qZWN0b3IsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiwgb2YgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBQYWdlUmVuZGVyU3RyYXRlZ3kge1xuICBzaG91bGRSZW5kZXIodHlwZT86IHN0cmluZyk6IGJvb2xlYW4gfCBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICBvbkluaXQ/KHR5cGU/OiBzdHJpbmcsIGluamVjdG9yPzogSW5qZWN0b3IsIGNvbnRleHQ/OiBhbnkpOiB2b2lkO1xuICBvbkRlc3Ryb3k/KHR5cGU/OiBzdHJpbmcsIGluamVjdG9yPzogSW5qZWN0b3IsIGNvbnRleHQ/OiBhbnkpOiB2b2lkO1xuICBvbkNvbnRleHRVcGRhdGU/KGNoYW5nZT86IFNpbXBsZUNoYW5nZSk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBQQUdFX1JFTkRFUl9TVFJBVEVHWSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxQYWdlUmVuZGVyU3RyYXRlZ3k+KCdQQUdFX1JFTkRFUl9TVFJBVEVHWScpO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbYWJwUGFnZVBhcnRdJyB9KVxuZXhwb3J0IGNsYXNzIFBhZ2VQYXJ0RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcyB7XG4gIGhhc1JlbmRlcmVkID0gZmFsc2U7XG4gIHR5cGU6IHN0cmluZztcbiAgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgQElucHV0KCdhYnBQYWdlUGFydENvbnRleHQnKSBjb250ZXh0OiBhbnk7XG4gIEBJbnB1dCgpIHNldCBhYnBQYWdlUGFydCh0eXBlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuY3JlYXRlUmVuZGVyU3RyZWFtKHR5cGUpO1xuICB9XG5cbiAgcmVuZGVyID0gKHNob3VsZFJlbmRlcjogYm9vbGVhbikgPT4ge1xuICAgIGlmIChzaG91bGRSZW5kZXIgJiYgIXRoaXMuaGFzUmVuZGVyZWQpIHtcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZik7XG4gICAgICB0aGlzLmhhc1JlbmRlcmVkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKCFzaG91bGRSZW5kZXIgJiYgdGhpcy5oYXNSZW5kZXJlZCkge1xuICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgICB0aGlzLmhhc1JlbmRlcmVkID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoUEFHRV9SRU5ERVJfU1RSQVRFR1kpIHByaXZhdGUgcmVuZGVyTG9naWM6IFBhZ2VSZW5kZXJTdHJhdGVneSxcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcbiAgKSB7fVxuXG4gIG5nT25DaGFuZ2VzKHsgY29udGV4dCB9OiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKHRoaXMucmVuZGVyTG9naWM/Lm9uQ29udGV4dFVwZGF0ZSkge1xuICAgICAgdGhpcy5yZW5kZXJMb2dpYy5vbkNvbnRleHRVcGRhdGUoY29udGV4dCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyTG9naWM/Lm9uSW5pdCkge1xuICAgICAgdGhpcy5yZW5kZXJMb2dpYy5vbkluaXQodGhpcy50eXBlLCB0aGlzLmluamVjdG9yLCB0aGlzLmNvbnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuY2xlYXJTdWJzY3JpcHRpb24oKTtcblxuICAgIGlmICh0aGlzLnJlbmRlckxvZ2ljPy5vbkRlc3Ryb3kpIHtcbiAgICAgIHRoaXMucmVuZGVyTG9naWMub25EZXN0cm95KHRoaXMudHlwZSwgdGhpcy5pbmplY3RvciwgdGhpcy5jb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICBzaG91bGRSZW5kZXIodHlwZTogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyTG9naWMpIHtcbiAgICAgIGNvbnN0IHdpbGxSZW5kZXIgPSB0aGlzLnJlbmRlckxvZ2ljLnNob3VsZFJlbmRlcih0eXBlKTtcbiAgICAgIHJldHVybiB3aWxsUmVuZGVyIGluc3RhbmNlb2YgT2JzZXJ2YWJsZSA/IHdpbGxSZW5kZXIgOiBvZih3aWxsUmVuZGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG9mKHRydWUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZVJlbmRlclN0cmVhbSh0eXBlOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNsZWFyU3Vic2NyaXB0aW9uKCk7XG5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMuc2hvdWxkUmVuZGVyKHR5cGUpLnN1YnNjcmliZSh0aGlzLnJlbmRlcik7XG4gIH1cblxuICBwcm90ZWN0ZWQgY2xlYXJTdWJzY3JpcHRpb24oKSB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19