import { __decorate } from "tslib";
import { Action, Selector, State } from '@ngxs/store';
import { tap } from 'rxjs/operators';
import { CreateTenant, DeleteTenant, GetTenantById, GetTenants, UpdateTenant, } from '../actions/tenant-management.actions';
import { Injectable } from '@angular/core';
import { TenantService } from '../proxy/tenant.service';
let TenantManagementState = class TenantManagementState {
    constructor(service) {
        this.service = service;
    }
    static get({ result }) {
        return result.items || [];
    }
    static getTenantsTotalCount({ result }) {
        return result.totalCount;
    }
    get({ patchState }, { payload }) {
        return this.service.getList(payload).pipe(tap(result => patchState({
            result,
        })));
    }
    getById({ patchState }, { payload }) {
        return this.service.get(payload).pipe(tap(selectedItem => patchState({
            selectedItem,
        })));
    }
    delete(_, { payload }) {
        return this.service.delete(payload);
    }
    add(_, { payload }) {
        return this.service.create(payload);
    }
    update({ getState }, { payload }) {
        return this.service.update(payload.id, Object.assign(Object.assign({}, getState().selectedItem), payload));
    }
};
TenantManagementState.decorators = [
    { type: Injectable }
];
TenantManagementState.ctorParameters = () => [
    { type: TenantService }
];
__decorate([
    Action(GetTenants)
], TenantManagementState.prototype, "get", null);
__decorate([
    Action(GetTenantById)
], TenantManagementState.prototype, "getById", null);
__decorate([
    Action(DeleteTenant)
], TenantManagementState.prototype, "delete", null);
__decorate([
    Action(CreateTenant)
], TenantManagementState.prototype, "add", null);
__decorate([
    Action(UpdateTenant)
], TenantManagementState.prototype, "update", null);
__decorate([
    Selector()
], TenantManagementState, "get", null);
__decorate([
    Selector()
], TenantManagementState, "getTenantsTotalCount", null);
TenantManagementState = __decorate([
    State({
        name: 'TenantManagementState',
        defaults: { result: {}, selectedItem: {} },
    })
], TenantManagementState);
export { TenantManagementState };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuYW50LW1hbmFnZW1lbnQuc3RhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy90ZW5hbnQtbWFuYWdlbWVudC9zcmMvbGliL3N0YXRlcy90ZW5hbnQtbWFuYWdlbWVudC5zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFnQixNQUFNLGFBQWEsQ0FBQztBQUNwRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUNMLFlBQVksRUFDWixZQUFZLEVBQ1osYUFBYSxFQUNiLFVBQVUsRUFDVixZQUFZLEdBQ2IsTUFBTSxzQ0FBc0MsQ0FBQztBQUU5QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztJQVEzQyxxQkFBcUIsU0FBckIscUJBQXFCO0lBV2hDLFlBQW9CLE9BQXNCO1FBQXRCLFlBQU8sR0FBUCxPQUFPLENBQWU7SUFBRyxDQUFDO0lBVDlDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLEVBQTBCO1FBQzNDLE9BQU8sTUFBTSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUdELE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLE1BQU0sRUFBMEI7UUFDNUQsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDO0lBQzNCLENBQUM7SUFLRCxHQUFHLENBQUMsRUFBRSxVQUFVLEVBQXdDLEVBQUUsRUFBRSxPQUFPLEVBQWM7UUFDL0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ3ZDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUNYLFVBQVUsQ0FBQztZQUNULE1BQU07U0FDUCxDQUFDLENBQ0gsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUdELE9BQU8sQ0FBQyxFQUFFLFVBQVUsRUFBd0MsRUFBRSxFQUFFLE9BQU8sRUFBaUI7UUFDdEYsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ25DLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUNqQixVQUFVLENBQUM7WUFDVCxZQUFZO1NBQ2IsQ0FBQyxDQUNILENBQ0YsQ0FBQztJQUNKLENBQUM7SUFHRCxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFnQjtRQUNqQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFHRCxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFnQjtRQUM5QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFHRCxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQXdDLEVBQUUsRUFBRSxPQUFPLEVBQWdCO1FBQ2xGLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsa0NBQU8sUUFBUSxFQUFFLENBQUMsWUFBWSxHQUFLLE9BQU8sRUFBRyxDQUFDO0lBQ3JGLENBQUM7Q0FDRixDQUFBOztZQWxEQSxVQUFVOzs7WUFQRixhQUFhOztBQXNCcEI7SUFEQyxNQUFNLENBQUMsVUFBVSxDQUFDO2dEQVNsQjtBQUdEO0lBREMsTUFBTSxDQUFDLGFBQWEsQ0FBQztvREFTckI7QUFHRDtJQURDLE1BQU0sQ0FBQyxZQUFZLENBQUM7bURBR3BCO0FBR0Q7SUFEQyxNQUFNLENBQUMsWUFBWSxDQUFDO2dEQUdwQjtBQUdEO0lBREMsTUFBTSxDQUFDLFlBQVksQ0FBQzttREFHcEI7QUE5Q0Q7SUFEQyxRQUFRLEVBQUU7c0NBR1Y7QUFHRDtJQURDLFFBQVEsRUFBRTt1REFHVjtBQVRVLHFCQUFxQjtJQUxqQyxLQUFLLENBQXlCO1FBQzdCLElBQUksRUFBRSx1QkFBdUI7UUFDN0IsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUE0QjtLQUNyRSxDQUFDO0dBRVcscUJBQXFCLENBaURqQztTQWpEWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBQlAsIFBhZ2VkUmVzdWx0RHRvIH0gZnJvbSAnQGFicC9uZy5jb3JlJztcbmltcG9ydCB7IEFjdGlvbiwgU2VsZWN0b3IsIFN0YXRlLCBTdGF0ZUNvbnRleHQgfSBmcm9tICdAbmd4cy9zdG9yZSc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuICBDcmVhdGVUZW5hbnQsXG4gIERlbGV0ZVRlbmFudCxcbiAgR2V0VGVuYW50QnlJZCxcbiAgR2V0VGVuYW50cyxcbiAgVXBkYXRlVGVuYW50LFxufSBmcm9tICcuLi9hY3Rpb25zL3RlbmFudC1tYW5hZ2VtZW50LmFjdGlvbnMnO1xuaW1wb3J0IHsgVGVuYW50TWFuYWdlbWVudCB9IGZyb20gJy4uL21vZGVscy90ZW5hbnQtbWFuYWdlbWVudCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUZW5hbnRTZXJ2aWNlIH0gZnJvbSAnLi4vcHJveHkvdGVuYW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgVGVuYW50RHRvIH0gZnJvbSAnLi4vcHJveHkvbW9kZWxzJztcblxuQFN0YXRlPFRlbmFudE1hbmFnZW1lbnQuU3RhdGU+KHtcbiAgbmFtZTogJ1RlbmFudE1hbmFnZW1lbnRTdGF0ZScsXG4gIGRlZmF1bHRzOiB7IHJlc3VsdDoge30sIHNlbGVjdGVkSXRlbToge30gfSBhcyBUZW5hbnRNYW5hZ2VtZW50LlN0YXRlLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUZW5hbnRNYW5hZ2VtZW50U3RhdGUge1xuICBAU2VsZWN0b3IoKVxuICBzdGF0aWMgZ2V0KHsgcmVzdWx0IH06IFRlbmFudE1hbmFnZW1lbnQuU3RhdGUpOiBUZW5hbnREdG9bXSB7XG4gICAgcmV0dXJuIHJlc3VsdC5pdGVtcyB8fCBbXTtcbiAgfVxuXG4gIEBTZWxlY3RvcigpXG4gIHN0YXRpYyBnZXRUZW5hbnRzVG90YWxDb3VudCh7IHJlc3VsdCB9OiBUZW5hbnRNYW5hZ2VtZW50LlN0YXRlKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcmVzdWx0LnRvdGFsQ291bnQ7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNlcnZpY2U6IFRlbmFudFNlcnZpY2UpIHt9XG5cbiAgQEFjdGlvbihHZXRUZW5hbnRzKVxuICBnZXQoeyBwYXRjaFN0YXRlIH06IFN0YXRlQ29udGV4dDxUZW5hbnRNYW5hZ2VtZW50LlN0YXRlPiwgeyBwYXlsb2FkIH06IEdldFRlbmFudHMpIHtcbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmdldExpc3QocGF5bG9hZCkucGlwZShcbiAgICAgIHRhcChyZXN1bHQgPT5cbiAgICAgICAgcGF0Y2hTdGF0ZSh7XG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICB9KSxcbiAgICAgICksXG4gICAgKTtcbiAgfVxuXG4gIEBBY3Rpb24oR2V0VGVuYW50QnlJZClcbiAgZ2V0QnlJZCh7IHBhdGNoU3RhdGUgfTogU3RhdGVDb250ZXh0PFRlbmFudE1hbmFnZW1lbnQuU3RhdGU+LCB7IHBheWxvYWQgfTogR2V0VGVuYW50QnlJZCkge1xuICAgIHJldHVybiB0aGlzLnNlcnZpY2UuZ2V0KHBheWxvYWQpLnBpcGUoXG4gICAgICB0YXAoc2VsZWN0ZWRJdGVtID0+XG4gICAgICAgIHBhdGNoU3RhdGUoe1xuICAgICAgICAgIHNlbGVjdGVkSXRlbSxcbiAgICAgICAgfSksXG4gICAgICApLFxuICAgICk7XG4gIH1cblxuICBAQWN0aW9uKERlbGV0ZVRlbmFudClcbiAgZGVsZXRlKF8sIHsgcGF5bG9hZCB9OiBEZWxldGVUZW5hbnQpIHtcbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmRlbGV0ZShwYXlsb2FkKTtcbiAgfVxuXG4gIEBBY3Rpb24oQ3JlYXRlVGVuYW50KVxuICBhZGQoXywgeyBwYXlsb2FkIH06IENyZWF0ZVRlbmFudCkge1xuICAgIHJldHVybiB0aGlzLnNlcnZpY2UuY3JlYXRlKHBheWxvYWQpO1xuICB9XG5cbiAgQEFjdGlvbihVcGRhdGVUZW5hbnQpXG4gIHVwZGF0ZSh7IGdldFN0YXRlIH06IFN0YXRlQ29udGV4dDxUZW5hbnRNYW5hZ2VtZW50LlN0YXRlPiwgeyBwYXlsb2FkIH06IFVwZGF0ZVRlbmFudCkge1xuICAgIHJldHVybiB0aGlzLnNlcnZpY2UudXBkYXRlKHBheWxvYWQuaWQsIHsgLi4uZ2V0U3RhdGUoKS5zZWxlY3RlZEl0ZW0sIC4uLnBheWxvYWQgfSk7XG4gIH1cbn1cbiJdfQ==