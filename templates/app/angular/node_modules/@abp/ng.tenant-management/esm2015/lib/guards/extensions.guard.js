import { ConfigStateService } from '@abp/ng.core';
import { ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps, } from '@abp/ng.theme.shared/extensions';
import { Injectable, Injector } from '@angular/core';
import { map, mapTo, tap } from 'rxjs/operators';
import { DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS, DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS, DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS, DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS, DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS, TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, } from '../tokens/extensions.token';
export class TenantManagementExtensionsGuard {
    constructor(injector) {
        this.injector = injector;
    }
    canActivate() {
        const extensions = this.injector.get(ExtensionsService);
        const actionContributors = this.injector.get(TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, null) || {};
        const toolbarContributors = this.injector.get(TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};
        const propContributors = this.injector.get(TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, null) || {};
        const createFormContributors = this.injector.get(TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};
        const editFormContributors = this.injector.get(TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};
        const configState = this.injector.get(ConfigStateService);
        return getObjectExtensionEntitiesFromStore(configState, 'TenantManagement').pipe(map(entities => ({
            ["TenantManagement.TenantsComponent" /* Tenants */]: entities.Tenant,
        })), mapEntitiesToContributors(configState, 'TenantManagement'), tap(objectExtensionContributors => {
            mergeWithDefaultActions(extensions.entityActions, DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS, actionContributors);
            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS, toolbarContributors);
            mergeWithDefaultProps(extensions.entityProps, DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
            mergeWithDefaultProps(extensions.createFormProps, DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);
            mergeWithDefaultProps(extensions.editFormProps, DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);
        }), mapTo(true));
    }
}
TenantManagementExtensionsGuard.decorators = [
    { type: Injectable }
];
TenantManagementExtensionsGuard.ctorParameters = () => [
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9ucy5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RlbmFudC1tYW5hZ2VtZW50L3NyYy9saWIvZ3VhcmRzL2V4dGVuc2lvbnMuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2xELE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsbUNBQW1DLEVBQ25DLHlCQUF5QixFQUN6Qix1QkFBdUIsRUFDdkIscUJBQXFCLEdBQ3RCLE1BQU0saUNBQWlDLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHckQsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFTakQsT0FBTyxFQUNMLDJDQUEyQyxFQUMzQyx5Q0FBeUMsRUFDekMsd0NBQXdDLEVBQ3hDLHNDQUFzQyxFQUN0Qyx5Q0FBeUMsRUFDekMsK0NBQStDLEVBQy9DLDZDQUE2QyxFQUM3Qyw0Q0FBNEMsRUFDNUMsMENBQTBDLEVBQzFDLDZDQUE2QyxHQUM5QyxNQUFNLDRCQUE0QixDQUFDO0FBR3BDLE1BQU0sT0FBTywrQkFBK0I7SUFDMUMsWUFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUFHLENBQUM7SUFFMUMsV0FBVztRQUNULE1BQU0sVUFBVSxHQUFzQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzNFLE1BQU0sa0JBQWtCLEdBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLDRDQUE0QyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM5RSxNQUFNLG1CQUFtQixHQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDL0UsTUFBTSxnQkFBZ0IsR0FDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsMENBQTBDLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzVFLE1BQU0sc0JBQXNCLEdBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLCtDQUErQyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNqRixNQUFNLG9CQUFvQixHQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFL0UsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMxRCxPQUFPLG1DQUFtQyxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLElBQUksQ0FDOUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNmLG1EQUFxQyxFQUFFLFFBQVEsQ0FBQyxNQUFNO1NBQ3ZELENBQUMsQ0FBQyxFQUNILHlCQUF5QixDQUFDLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxFQUMxRCxHQUFHLENBQUMsMkJBQTJCLENBQUMsRUFBRTtZQUNoQyx1QkFBdUIsQ0FDckIsVUFBVSxDQUFDLGFBQWEsRUFDeEIsd0NBQXdDLEVBQ3hDLGtCQUFrQixDQUNuQixDQUFDO1lBQ0YsdUJBQXVCLENBQ3JCLFVBQVUsQ0FBQyxjQUFjLEVBQ3pCLHlDQUF5QyxFQUN6QyxtQkFBbUIsQ0FDcEIsQ0FBQztZQUNGLHFCQUFxQixDQUNuQixVQUFVLENBQUMsV0FBVyxFQUN0QixzQ0FBc0MsRUFDdEMsMkJBQTJCLENBQUMsSUFBSSxFQUNoQyxnQkFBZ0IsQ0FDakIsQ0FBQztZQUNGLHFCQUFxQixDQUNuQixVQUFVLENBQUMsZUFBZSxFQUMxQiwyQ0FBMkMsRUFDM0MsMkJBQTJCLENBQUMsVUFBVSxFQUN0QyxzQkFBc0IsQ0FDdkIsQ0FBQztZQUNGLHFCQUFxQixDQUNuQixVQUFVLENBQUMsYUFBYSxFQUN4Qix5Q0FBeUMsRUFDekMsMkJBQTJCLENBQUMsUUFBUSxFQUNwQyxvQkFBb0IsQ0FDckIsQ0FBQztRQUNKLENBQUMsQ0FBQyxFQUNGLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FDWixDQUFDO0lBQ0osQ0FBQzs7O1lBdkRGLFVBQVU7OztZQXpCVSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZmlnU3RhdGVTZXJ2aWNlIH0gZnJvbSAnQGFicC9uZy5jb3JlJztcbmltcG9ydCB7XG4gIEV4dGVuc2lvbnNTZXJ2aWNlLFxuICBnZXRPYmplY3RFeHRlbnNpb25FbnRpdGllc0Zyb21TdG9yZSxcbiAgbWFwRW50aXRpZXNUb0NvbnRyaWJ1dG9ycyxcbiAgbWVyZ2VXaXRoRGVmYXVsdEFjdGlvbnMsXG4gIG1lcmdlV2l0aERlZmF1bHRQcm9wcyxcbn0gZnJvbSAnQGFicC9uZy50aGVtZS5zaGFyZWQvZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FuQWN0aXZhdGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBtYXBUbywgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgZVRlbmFudE1hbmFnZW1lbnRDb21wb25lbnRzIH0gZnJvbSAnLi4vZW51bXMvY29tcG9uZW50cyc7XG5pbXBvcnQge1xuICBUZW5hbnRNYW5hZ2VtZW50Q3JlYXRlRm9ybVByb3BDb250cmlidXRvcnMsXG4gIFRlbmFudE1hbmFnZW1lbnRFZGl0Rm9ybVByb3BDb250cmlidXRvcnMsXG4gIFRlbmFudE1hbmFnZW1lbnRFbnRpdHlBY3Rpb25Db250cmlidXRvcnMsXG4gIFRlbmFudE1hbmFnZW1lbnRFbnRpdHlQcm9wQ29udHJpYnV0b3JzLFxuICBUZW5hbnRNYW5hZ2VtZW50VG9vbGJhckFjdGlvbkNvbnRyaWJ1dG9ycyxcbn0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy1vcHRpb25zJztcbmltcG9ydCB7XG4gIERFRkFVTFRfVEVOQU5UX01BTkFHRU1FTlRfQ1JFQVRFX0ZPUk1fUFJPUFMsXG4gIERFRkFVTFRfVEVOQU5UX01BTkFHRU1FTlRfRURJVF9GT1JNX1BST1BTLFxuICBERUZBVUxUX1RFTkFOVF9NQU5BR0VNRU5UX0VOVElUWV9BQ1RJT05TLFxuICBERUZBVUxUX1RFTkFOVF9NQU5BR0VNRU5UX0VOVElUWV9QUk9QUyxcbiAgREVGQVVMVF9URU5BTlRfTUFOQUdFTUVOVF9UT09MQkFSX0FDVElPTlMsXG4gIFRFTkFOVF9NQU5BR0VNRU5UX0NSRUFURV9GT1JNX1BST1BfQ09OVFJJQlVUT1JTLFxuICBURU5BTlRfTUFOQUdFTUVOVF9FRElUX0ZPUk1fUFJPUF9DT05UUklCVVRPUlMsXG4gIFRFTkFOVF9NQU5BR0VNRU5UX0VOVElUWV9BQ1RJT05fQ09OVFJJQlVUT1JTLFxuICBURU5BTlRfTUFOQUdFTUVOVF9FTlRJVFlfUFJPUF9DT05UUklCVVRPUlMsXG4gIFRFTkFOVF9NQU5BR0VNRU5UX1RPT0xCQVJfQUNUSU9OX0NPTlRSSUJVVE9SUyxcbn0gZnJvbSAnLi4vdG9rZW5zL2V4dGVuc2lvbnMudG9rZW4nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGVuYW50TWFuYWdlbWVudEV4dGVuc2lvbnNHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHt9XG5cbiAgY2FuQWN0aXZhdGUoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgY29uc3QgZXh0ZW5zaW9uczogRXh0ZW5zaW9uc1NlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChFeHRlbnNpb25zU2VydmljZSk7XG4gICAgY29uc3QgYWN0aW9uQ29udHJpYnV0b3JzOiBUZW5hbnRNYW5hZ2VtZW50RW50aXR5QWN0aW9uQ29udHJpYnV0b3JzID1cbiAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KFRFTkFOVF9NQU5BR0VNRU5UX0VOVElUWV9BQ1RJT05fQ09OVFJJQlVUT1JTLCBudWxsKSB8fCB7fTtcbiAgICBjb25zdCB0b29sYmFyQ29udHJpYnV0b3JzOiBUZW5hbnRNYW5hZ2VtZW50VG9vbGJhckFjdGlvbkNvbnRyaWJ1dG9ycyA9XG4gICAgICB0aGlzLmluamVjdG9yLmdldChURU5BTlRfTUFOQUdFTUVOVF9UT09MQkFSX0FDVElPTl9DT05UUklCVVRPUlMsIG51bGwpIHx8IHt9O1xuICAgIGNvbnN0IHByb3BDb250cmlidXRvcnM6IFRlbmFudE1hbmFnZW1lbnRFbnRpdHlQcm9wQ29udHJpYnV0b3JzID1cbiAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KFRFTkFOVF9NQU5BR0VNRU5UX0VOVElUWV9QUk9QX0NPTlRSSUJVVE9SUywgbnVsbCkgfHwge307XG4gICAgY29uc3QgY3JlYXRlRm9ybUNvbnRyaWJ1dG9yczogVGVuYW50TWFuYWdlbWVudENyZWF0ZUZvcm1Qcm9wQ29udHJpYnV0b3JzID1cbiAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KFRFTkFOVF9NQU5BR0VNRU5UX0NSRUFURV9GT1JNX1BST1BfQ09OVFJJQlVUT1JTLCBudWxsKSB8fCB7fTtcbiAgICBjb25zdCBlZGl0Rm9ybUNvbnRyaWJ1dG9yczogVGVuYW50TWFuYWdlbWVudEVkaXRGb3JtUHJvcENvbnRyaWJ1dG9ycyA9XG4gICAgICB0aGlzLmluamVjdG9yLmdldChURU5BTlRfTUFOQUdFTUVOVF9FRElUX0ZPUk1fUFJPUF9DT05UUklCVVRPUlMsIG51bGwpIHx8IHt9O1xuXG4gICAgY29uc3QgY29uZmlnU3RhdGUgPSB0aGlzLmluamVjdG9yLmdldChDb25maWdTdGF0ZVNlcnZpY2UpO1xuICAgIHJldHVybiBnZXRPYmplY3RFeHRlbnNpb25FbnRpdGllc0Zyb21TdG9yZShjb25maWdTdGF0ZSwgJ1RlbmFudE1hbmFnZW1lbnQnKS5waXBlKFxuICAgICAgbWFwKGVudGl0aWVzID0+ICh7XG4gICAgICAgIFtlVGVuYW50TWFuYWdlbWVudENvbXBvbmVudHMuVGVuYW50c106IGVudGl0aWVzLlRlbmFudCxcbiAgICAgIH0pKSxcbiAgICAgIG1hcEVudGl0aWVzVG9Db250cmlidXRvcnMoY29uZmlnU3RhdGUsICdUZW5hbnRNYW5hZ2VtZW50JyksXG4gICAgICB0YXAob2JqZWN0RXh0ZW5zaW9uQ29udHJpYnV0b3JzID0+IHtcbiAgICAgICAgbWVyZ2VXaXRoRGVmYXVsdEFjdGlvbnMoXG4gICAgICAgICAgZXh0ZW5zaW9ucy5lbnRpdHlBY3Rpb25zLFxuICAgICAgICAgIERFRkFVTFRfVEVOQU5UX01BTkFHRU1FTlRfRU5USVRZX0FDVElPTlMsXG4gICAgICAgICAgYWN0aW9uQ29udHJpYnV0b3JzLFxuICAgICAgICApO1xuICAgICAgICBtZXJnZVdpdGhEZWZhdWx0QWN0aW9ucyhcbiAgICAgICAgICBleHRlbnNpb25zLnRvb2xiYXJBY3Rpb25zLFxuICAgICAgICAgIERFRkFVTFRfVEVOQU5UX01BTkFHRU1FTlRfVE9PTEJBUl9BQ1RJT05TLFxuICAgICAgICAgIHRvb2xiYXJDb250cmlidXRvcnMsXG4gICAgICAgICk7XG4gICAgICAgIG1lcmdlV2l0aERlZmF1bHRQcm9wcyhcbiAgICAgICAgICBleHRlbnNpb25zLmVudGl0eVByb3BzLFxuICAgICAgICAgIERFRkFVTFRfVEVOQU5UX01BTkFHRU1FTlRfRU5USVRZX1BST1BTLFxuICAgICAgICAgIG9iamVjdEV4dGVuc2lvbkNvbnRyaWJ1dG9ycy5wcm9wLFxuICAgICAgICAgIHByb3BDb250cmlidXRvcnMsXG4gICAgICAgICk7XG4gICAgICAgIG1lcmdlV2l0aERlZmF1bHRQcm9wcyhcbiAgICAgICAgICBleHRlbnNpb25zLmNyZWF0ZUZvcm1Qcm9wcyxcbiAgICAgICAgICBERUZBVUxUX1RFTkFOVF9NQU5BR0VNRU5UX0NSRUFURV9GT1JNX1BST1BTLFxuICAgICAgICAgIG9iamVjdEV4dGVuc2lvbkNvbnRyaWJ1dG9ycy5jcmVhdGVGb3JtLFxuICAgICAgICAgIGNyZWF0ZUZvcm1Db250cmlidXRvcnMsXG4gICAgICAgICk7XG4gICAgICAgIG1lcmdlV2l0aERlZmF1bHRQcm9wcyhcbiAgICAgICAgICBleHRlbnNpb25zLmVkaXRGb3JtUHJvcHMsXG4gICAgICAgICAgREVGQVVMVF9URU5BTlRfTUFOQUdFTUVOVF9FRElUX0ZPUk1fUFJPUFMsXG4gICAgICAgICAgb2JqZWN0RXh0ZW5zaW9uQ29udHJpYnV0b3JzLmVkaXRGb3JtLFxuICAgICAgICAgIGVkaXRGb3JtQ29udHJpYnV0b3JzLFxuICAgICAgICApO1xuICAgICAgfSksXG4gICAgICBtYXBUbyh0cnVlKSxcbiAgICApO1xuICB9XG59XG4iXX0=