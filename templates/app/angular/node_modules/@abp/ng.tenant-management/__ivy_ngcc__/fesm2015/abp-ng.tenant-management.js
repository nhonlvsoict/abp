import { __decorate } from 'tslib';
import * as i1 from '@abp/ng.core';
import { RestService, ListService, ConfigStateService, DynamicLayoutComponent, AuthGuard, PermissionGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import { Confirmation, ConfirmationService, getPasswordValidators, ThemeSharedModule } from '@abp/ng.theme.shared';
import * as i0 from '@angular/core';
import { Injectable, Component, Injector, ViewChild, InjectionToken, NgModule } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import * as i1$1 from '@ngxs/store';
import { Action, Selector, State, Store, Select, NgxsModule } from '@ngxs/store';
import { tap, pluck, take, finalize, map, mapTo } from 'rxjs/operators';
import { FormPropData, generateFormFromProps, EXTENSIONS_IDENTIFIER, EntityAction, EntityProp, FormProp, ToolbarAction, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps, UiExtensionsModule } from '@abp/ng.theme.shared/extensions';
import { FeatureManagementModule } from '@abp/ng.feature-management';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import { NgxValidateCoreModule } from '@ngx-validate/core';
import { RouterModule } from '@angular/router';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@abp/ng.core';
import * as ɵngcc2 from '@abp/ng.theme.shared';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '@ngxs/store';
import * as ɵngcc5 from '@abp/ng.theme.shared/extensions';
import * as ɵngcc6 from '@angular/common';
import * as ɵngcc7 from '@ngx-validate/core';
import * as ɵngcc8 from '@abp/ng.feature-management';
import * as ɵngcc9 from '@angular/router';

const _c0 = ["tenantModalTemplate"];
function TenantsComponent_ng_template_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h3");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r1.selectedModalContent.title));
} }
function TenantsComponent_ng_template_21_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function TenantsComponent_ng_template_21_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TenantsComponent_ng_template_21_ng_container_0_Template, 1, 0, "ng-container", 18);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r3.selectedModalContent == null ? null : ctx_r3.selectedModalContent.template);
} }
function TenantsComponent_ng_template_23_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "abp-button", 20);
    ɵngcc0.ɵɵlistener("click", function TenantsComponent_ng_template_23_Template_abp_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.save(); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "abpLocalization");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, "AbpTenantManagement::Cancel"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r5.isDisabledSaveButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 5, "AbpTenantManagement::Save"));
} }
function TenantsComponent_ng_template_25_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "form", 21);
    ɵngcc0.ɵɵlistener("ngSubmit", function TenantsComponent_ng_template_25_Template_form_ngSubmit_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.save(); });
    ɵngcc0.ɵɵelement(1, "abp-extensible-form", 22);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("formGroup", ctx_r7.tenantForm);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("selectedRecord", ctx_r7.selected);
} }
function TenantsComponent_abp_feature_management_27_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "abp-feature-management", 23);
    ɵngcc0.ɵɵlistener("visibleChange", function TenantsComponent_abp_feature_management_27_Template_abp_feature_management_visibleChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.visibleFeatures = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("visible", ctx_r8.visibleFeatures)("providerKey", ctx_r8.providerKey);
} }
const _c1 = function () { return { value: "T" }; };
const _c2 = function (a0) { return { value: a0 }; };
const _c3 = function (a0) { return { value: a0, twoWay: true }; };
const _c4 = function (a0, a1, a2) { return { providerName: a0, providerKey: a1, visible: a2 }; };
const _c5 = function (a0) { return { visibleChange: a0 }; };
const _c6 = function (a0, a1, a2) { return { inputs: a0, outputs: a1, componentKey: a2 }; };
class GetTenants {
    constructor(payload) {
        this.payload = payload;
    }
}
GetTenants.type = '[TenantManagement] Get Tenant';
class GetTenantById {
    constructor(payload) {
        this.payload = payload;
    }
}
GetTenantById.type = '[TenantManagement] Get Tenant By Id';
class CreateTenant {
    constructor(payload) {
        this.payload = payload;
    }
}
CreateTenant.type = '[TenantManagement] Create Tenant';
class UpdateTenant {
    constructor(payload) {
        this.payload = payload;
    }
}
UpdateTenant.type = '[TenantManagement] Update Tenant';
class DeleteTenant {
    constructor(payload) {
        this.payload = payload;
    }
}
DeleteTenant.type = '[TenantManagement] Delete Tenant';

class TenantService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'AbpTenantManagement';
        this.create = (input) => this.restService.request({
            method: 'POST',
            url: '/api/multi-tenancy/tenants',
            body: input,
        }, { apiName: this.apiName });
        this.delete = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/multi-tenancy/tenants/${id}`,
        }, { apiName: this.apiName });
        this.deleteDefaultConnectionString = (id) => this.restService.request({
            method: 'DELETE',
            url: `/api/multi-tenancy/tenants/${id}/default-connection-string`,
        }, { apiName: this.apiName });
        this.get = (id) => this.restService.request({
            method: 'GET',
            url: `/api/multi-tenancy/tenants/${id}`,
        }, { apiName: this.apiName });
        this.getDefaultConnectionString = (id) => this.restService.request({
            method: 'GET',
            responseType: 'text',
            url: `/api/multi-tenancy/tenants/${id}/default-connection-string`,
        }, { apiName: this.apiName });
        this.getList = (input) => this.restService.request({
            method: 'GET',
            url: '/api/multi-tenancy/tenants',
            params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
        }, { apiName: this.apiName });
        this.update = (id, input) => this.restService.request({
            method: 'PUT',
            url: `/api/multi-tenancy/tenants/${id}`,
            body: input,
        }, { apiName: this.apiName });
        this.updateDefaultConnectionString = (id, defaultConnectionString) => this.restService.request({
            method: 'PUT',
            url: `/api/multi-tenancy/tenants/${id}/default-connection-string`,
            params: { defaultConnectionString },
        }, { apiName: this.apiName });
    }
}
TenantService.ɵfac = function TenantService_Factory(t) { return new (t || TenantService)(ɵngcc0.ɵɵinject(ɵngcc1.RestService)); };
TenantService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TenantService_Factory() { return new TenantService(i0.ɵɵinject(i1.RestService)); }, token: TenantService, providedIn: "root" });
TenantService.ctorParameters = () => [
    { type: RestService }
];

let TenantManagementState = class TenantManagementState {
    constructor(service) {
        this.service = service;
    }
    static get({ result }) {
        return result.items || [];
    }
    static getTenantsTotalCount({ result }) {
        return result.totalCount;
    }
    get({ patchState }, { payload }) {
        return this.service.getList(payload).pipe(tap(result => patchState({
            result,
        })));
    }
    getById({ patchState }, { payload }) {
        return this.service.get(payload).pipe(tap(selectedItem => patchState({
            selectedItem,
        })));
    }
    delete(_, { payload }) {
        return this.service.delete(payload);
    }
    add(_, { payload }) {
        return this.service.create(payload);
    }
    update({ getState }, { payload }) {
        return this.service.update(payload.id, Object.assign(Object.assign({}, getState().selectedItem), payload));
    }
};
TenantManagementState.ɵfac = function TenantManagementState_Factory(t) { return new (t || TenantManagementState)(ɵngcc0.ɵɵinject(TenantService)); };
TenantManagementState.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TenantManagementState, factory: function (t) { return TenantManagementState.ɵfac(t); } });
TenantManagementState.ctorParameters = () => [
    { type: TenantService }
];
__decorate([
    Action(GetTenants)
], TenantManagementState.prototype, "get", null);
__decorate([
    Action(GetTenantById)
], TenantManagementState.prototype, "getById", null);
__decorate([
    Action(DeleteTenant)
], TenantManagementState.prototype, "delete", null);
__decorate([
    Action(CreateTenant)
], TenantManagementState.prototype, "add", null);
__decorate([
    Action(UpdateTenant)
], TenantManagementState.prototype, "update", null);
__decorate([
    Selector()
], TenantManagementState, "get", null);
__decorate([
    Selector()
], TenantManagementState, "getTenantsTotalCount", null);
TenantManagementState = __decorate([
    State({
        name: 'TenantManagementState',
        defaults: { result: {}, selectedItem: {} },
    })
], TenantManagementState);

const ɵ0$4 = "TenantManagement.TenantsComponent" /* Tenants */;
class TenantsComponent {
    constructor(list, injector, confirmationService, tenantService, fb, store) {
        this.list = list;
        this.injector = injector;
        this.confirmationService = confirmationService;
        this.tenantService = tenantService;
        this.fb = fb;
        this.store = store;
        this.selectedModalContent = {};
        this.visibleFeatures = false;
        this.modalBusy = false;
        this.featureManagementKey = "FeatureManagement.FeatureManagementComponent" /* FeatureManagement */;
        this.onVisibleFeaturesChange = (value) => {
            this.visibleFeatures = value;
        };
    }
    get hasSelectedTenant() {
        return Boolean(this.selected.id);
    }
    get useSharedDatabase() {
        return this.defaultConnectionStringForm.get('useSharedDatabase').value;
    }
    get connectionString() {
        return this.defaultConnectionStringForm.get('defaultConnectionString').value;
    }
    get isDisabledSaveButton() {
        if (!this.selectedModalContent)
            return false;
        if (this.selectedModalContent.type === 'saveConnStr' &&
            this.defaultConnectionStringForm &&
            this.defaultConnectionStringForm.invalid) {
            return true;
        }
        else if (this.selectedModalContent.type === 'saveTenant' &&
            this.tenantForm &&
            this.tenantForm.invalid) {
            return true;
        }
        else {
            return false;
        }
    }
    ngOnInit() {
        this.hookToQuery();
    }
    createTenantForm() {
        const data = new FormPropData(this.injector, this.selected);
        this.tenantForm = generateFormFromProps(data);
    }
    createDefaultConnectionStringForm() {
        this.defaultConnectionStringForm = this.fb.group({
            useSharedDatabase: this._useSharedDatabase,
            defaultConnectionString: [this.defaultConnectionString || ''],
        });
    }
    openModal(title, template, type) {
        this.selectedModalContent = {
            title,
            template,
            type,
        };
        this.isModalVisible = true;
    }
    addTenant() {
        this.selected = {};
        this.createTenantForm();
        this.openModal('AbpTenantManagement::NewTenant', this.tenantModalTemplate, 'saveTenant');
    }
    editTenant(id) {
        this.store
            .dispatch(new GetTenantById(id))
            .pipe(pluck('TenantManagementState', 'selectedItem'))
            .subscribe(selected => {
            this.selected = selected;
            this.createTenantForm();
            this.openModal('AbpTenantManagement::Edit', this.tenantModalTemplate, 'saveTenant');
        });
    }
    save() {
        const { type } = this.selectedModalContent;
        if (!type)
            return;
        if (type === 'saveTenant')
            this.saveTenant();
        else if (type === 'saveConnStr')
            this.saveConnectionString();
    }
    saveConnectionString() {
        if (this.modalBusy)
            return;
        this.modalBusy = true;
        if (this.useSharedDatabase || (!this.useSharedDatabase && !this.connectionString)) {
            this.tenantService
                .deleteDefaultConnectionString(this.selected.id)
                .pipe(take(1), finalize(() => (this.modalBusy = false)))
                .subscribe(() => {
                this.isModalVisible = false;
            });
        }
        else {
            this.tenantService
                .updateDefaultConnectionString(this.selected.id, this.connectionString)
                .pipe(take(1), finalize(() => (this.modalBusy = false)))
                .subscribe(() => {
                this.isModalVisible = false;
            });
        }
    }
    saveTenant() {
        if (!this.tenantForm.valid || this.modalBusy)
            return;
        this.modalBusy = true;
        this.store
            .dispatch(this.selected.id
            ? new UpdateTenant(Object.assign(Object.assign(Object.assign({}, this.selected), this.tenantForm.value), { id: this.selected.id }))
            : new CreateTenant(this.tenantForm.value))
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.isModalVisible = false;
            this.list.get();
        });
    }
    delete(id, name) {
        this.confirmationService
            .warn('AbpTenantManagement::TenantDeletionConfirmationMessage', 'AbpTenantManagement::AreYouSure', {
            messageLocalizationParams: [name],
        })
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.store.dispatch(new DeleteTenant(id)).subscribe(() => this.list.get());
            }
        });
    }
    hookToQuery() {
        this.list.hookToQuery(query => this.store.dispatch(new GetTenants(query))).subscribe();
    }
    onSharedDatabaseChange(value) {
        if (!value) {
            setTimeout(() => {
                const defaultConnectionString = document.getElementById('defaultConnectionString');
                if (defaultConnectionString) {
                    defaultConnectionString.focus();
                }
            }, 0);
        }
    }
    openFeaturesModal(providerKey) {
        this.providerKey = providerKey;
        setTimeout(() => {
            this.visibleFeatures = true;
        }, 0);
    }
    sort(data) {
        const { prop, dir } = data.sorts[0];
        this.list.sortKey = prop;
        this.list.sortOrder = dir;
    }
}
TenantsComponent.ɵfac = function TenantsComponent_Factory(t) { return new (t || TenantsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ListService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ConfirmationService), ɵngcc0.ɵɵdirectiveInject(TenantService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Store)); };
TenantsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TenantsComponent, selectors: [["abp-tenants"]], viewQuery: function TenantsComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tenantModalTemplate = _t.first);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([
            ListService,
            {
                provide: EXTENSIONS_IDENTIFIER,
                useValue: ɵ0$4
            },
        ])], decls: 28, vars: 35, consts: [["id", "wrapper", 1, "card"], [1, "card-header"], [1, "row"], [1, "col", "col-md-6"], [1, "card-title"], [1, "text-right", "col", "col-md-6"], [3, "record"], [1, "card-body"], ["id", "data-tables-table-filter", 1, "data-tables-filter"], [1, "input-group"], ["type", "search", 1, "form-control", 3, "placeholder", "ngModel", "ngModelChange"], [3, "data", "recordsTotal", "list"], ["size", "md", 3, "visible", "busy", "visibleChange"], ["abpHeader", ""], ["abpBody", ""], ["abpFooter", ""], ["tenantModalTemplate", ""], ["providerName", "T", 3, "visible", "providerKey", "visibleChange", 4, "abpReplaceableTemplate"], [4, "ngTemplateOutlet"], ["abpClose", "", "type", "button", 1, "btn", "btn-secondary"], ["iconClass", "fa fa-check", 3, "disabled", "click"], ["validateOnSubmit", "", 3, "formGroup", "ngSubmit"], [3, "selectedRecord"], ["providerName", "T", 3, "visible", "providerKey", "visibleChange"]], template: function TenantsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "h5", 4);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵpipe(6, "abpLocalization");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵelement(8, "abp-page-toolbar", 6);
        ɵngcc0.ɵɵpipe(9, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 7);
        ɵngcc0.ɵɵelementStart(11, "div", 8);
        ɵngcc0.ɵɵelementStart(12, "div", 9);
        ɵngcc0.ɵɵelementStart(13, "input", 10);
        ɵngcc0.ɵɵlistener("ngModelChange", function TenantsComponent_Template_input_ngModelChange_13_listener($event) { return ctx.list.filter = $event; });
        ɵngcc0.ɵɵpipe(14, "abpLocalization");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(15, "abp-extensible-table", 11);
        ɵngcc0.ɵɵpipe(16, "async");
        ɵngcc0.ɵɵpipe(17, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "abp-modal", 12);
        ɵngcc0.ɵɵlistener("visibleChange", function TenantsComponent_Template_abp_modal_visibleChange_18_listener($event) { return ctx.isModalVisible = $event; });
        ɵngcc0.ɵɵtemplate(19, TenantsComponent_ng_template_19_Template, 3, 3, "ng-template", null, 13, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(21, TenantsComponent_ng_template_21_Template, 1, 1, "ng-template", null, 14, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(23, TenantsComponent_ng_template_23_Template, 6, 7, "ng-template", null, 15, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(25, TenantsComponent_ng_template_25_Template, 2, 2, "ng-template", null, 16, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(27, TenantsComponent_abp_feature_management_27_Template, 1, 2, "abp-feature-management", 17);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 10, "AbpTenantManagement::Tenants"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("record", ɵngcc0.ɵɵpipeBind1(9, 12, ctx.data$));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(14, 14, "AbpUi::PagerSearch"))("ngModel", ctx.list.filter);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("data", ɵngcc0.ɵɵpipeBind1(16, 16, ctx.data$))("recordsTotal", ɵngcc0.ɵɵpipeBind1(17, 18, ctx.totalCount$))("list", ctx.list);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("visible", ctx.isModalVisible)("busy", ctx.modalBusy);
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵproperty("abpReplaceableTemplate", ɵngcc0.ɵɵpureFunction3(31, _c6, ɵngcc0.ɵɵpureFunction3(25, _c4, ɵngcc0.ɵɵpureFunction0(20, _c1), ɵngcc0.ɵɵpureFunction1(21, _c2, ctx.providerKey), ɵngcc0.ɵɵpureFunction1(23, _c3, ctx.visibleFeatures)), ɵngcc0.ɵɵpureFunction1(29, _c5, ctx.onVisibleFeaturesChange), ctx.featureManagementKey));
    } }, directives: [ɵngcc5.PageToolbarComponent, ɵngcc3.DefaultValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.NgModel, ɵngcc5.ExtensibleTableComponent, ɵngcc2.ModalComponent, ɵngcc1.ReplaceableTemplateDirective, ɵngcc6.NgTemplateOutlet, ɵngcc2.ModalCloseDirective, ɵngcc2.ButtonComponent, ɵngcc3.ɵNgNoValidate, ɵngcc3.NgControlStatusGroup, ɵngcc1.FormSubmitDirective, ɵngcc7.ValidationGroupDirective, ɵngcc3.FormGroupDirective, ɵngcc5.ExtensibleFormComponent, ɵngcc8.FeatureManagementComponent], pipes: [ɵngcc1.LocalizationPipe, ɵngcc6.AsyncPipe], encapsulation: 2 });
TenantsComponent.ctorParameters = () => [
    { type: ListService },
    { type: Injector },
    { type: ConfirmationService },
    { type: TenantService },
    { type: FormBuilder },
    { type: Store }
];
TenantsComponent.propDecorators = {
    tenantModalTemplate: [{ type: ViewChild, args: ['tenantModalTemplate',] }]
};
__decorate([
    Select(TenantManagementState.get)
], TenantsComponent.prototype, "data$", void 0);
__decorate([
    Select(TenantManagementState.getTenantsTotalCount)
], TenantsComponent.prototype, "totalCount$", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TenantService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.RestService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TenantManagementState, [{
        type: Injectable
    }], function () { return [{ type: TenantService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TenantsComponent, [{
        type: Component,
        args: [{
                selector: 'abp-tenants',
                template: "<div id=\"wrapper\" class=\"card\">\n  <div class=\"card-header\">\n    <div class=\"row\">\n      <div class=\"col col-md-6\">\n        <h5 class=\"card-title\">{{ 'AbpTenantManagement::Tenants' | abpLocalization }}</h5>\n      </div>\n      <div class=\"text-right col col-md-6\">\n        <abp-page-toolbar [record]=\"data$ | async\"></abp-page-toolbar>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card-body\">\n    <div id=\"data-tables-table-filter\" class=\"data-tables-filter\">\n      <div class=\"input-group\">\n        <input\n          type=\"search\"\n          class=\"form-control\"\n          [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\n          [(ngModel)]=\"list.filter\"\n        />\n      </div>\n    </div>\n\n    <abp-extensible-table\n      [data]=\"data$ | async\"\n      [recordsTotal]=\"totalCount$ | async\"\n      [list]=\"list\"\n    ></abp-extensible-table>\n  </div>\n</div>\n\n<abp-modal size=\"md\" [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\n  <ng-template #abpHeader>\n    <h3>{{ selectedModalContent.title | abpLocalization }}</h3>\n  </ng-template>\n\n  <ng-template #abpBody>\n    <ng-container *ngTemplateOutlet=\"selectedModalContent?.template\"></ng-container>\n  </ng-template>\n\n  <ng-template #abpFooter>\n    <button abpClose type=\"button\" class=\"btn btn-secondary\">\n      {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\n    </button>\n    <abp-button iconClass=\"fa fa-check\" (click)=\"save()\" [disabled]=\"isDisabledSaveButton\">{{\n      'AbpTenantManagement::Save' | abpLocalization\n    }}</abp-button>\n  </ng-template>\n</abp-modal>\n\n<ng-template #tenantModalTemplate>\n  <form [formGroup]=\"tenantForm\" (ngSubmit)=\"save()\" validateOnSubmit>\n    <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\n  </form>\n</ng-template>\n\n<abp-feature-management\n  *abpReplaceableTemplate=\"{\n    inputs: {\n      providerName: { value: 'T' },\n      providerKey: { value: providerKey },\n      visible: { value: visibleFeatures, twoWay: true }\n    },\n    outputs: { visibleChange: onVisibleFeaturesChange },\n    componentKey: featureManagementKey\n  }\"\n  [(visible)]=\"visibleFeatures\"\n  providerName=\"T\"\n  [providerKey]=\"providerKey\"\n>\n</abp-feature-management>\n",
                providers: [
                    ListService,
                    {
                        provide: EXTENSIONS_IDENTIFIER,
                        useValue: ɵ0$4
                    },
                ]
            }]
    }], function () { return [{ type: ɵngcc1.ListService }, { type: ɵngcc0.Injector }, { type: ɵngcc2.ConfirmationService }, { type: TenantService }, { type: ɵngcc3.FormBuilder }, { type: ɵngcc4.Store }]; }, { tenantModalTemplate: [{
            type: ViewChild,
            args: ['tenantModalTemplate']
        }] }); })();

const ɵ0$3 = data => {
    const component = data.getInjected(TenantsComponent);
    component.editTenant(data.record.id);
}, ɵ1$2 = data => {
    const component = data.getInjected(TenantsComponent);
    component.openFeaturesModal(data.record.id);
}, ɵ2$1 = data => {
    const component = data.getInjected(TenantsComponent);
    component.delete(data.record.id, data.record.name);
};
const DEFAULT_TENANTS_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpTenantManagement::Edit',
        action: ɵ0$3,
        permission: 'AbpTenantManagement.Tenants.Update',
    },
    {
        text: 'AbpTenantManagement::Permission:ManageFeatures',
        action: ɵ1$2,
        permission: 'AbpTenantManagement.Tenants.ManageFeatures',
    },
    {
        text: 'AbpTenantManagement::Delete',
        action: ɵ2$1,
        permission: 'AbpTenantManagement.Tenants.Delete',
    },
]);

const DEFAULT_TENANTS_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        displayName: 'AbpTenantManagement::TenantName',
        sortable: true,
    },
]);

const ɵ0$2 = () => [Validators.required, Validators.maxLength(256)], ɵ1$1 = () => [Validators.required, Validators.maxLength(256), Validators.email], ɵ2 = data => [Validators.required, ...getPasswordValidators({ get: data.getInjected })];
const DEFAULT_TENANTS_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* String */,
        name: 'name',
        id: 'name',
        displayName: 'AbpTenantManagement::TenantName',
        validators: ɵ0$2,
    },
    {
        type: "email" /* Email */,
        name: 'adminEmailAddress',
        displayName: 'AbpTenantManagement::DisplayName:AdminEmailAddress',
        id: 'admin-email-address',
        validators: ɵ1$1,
    },
    {
        type: "password" /* Password */,
        name: 'adminPassword',
        displayName: 'AbpTenantManagement::DisplayName:AdminPassword',
        id: 'admin-password',
        autocomplete: 'new-password',
        validators: ɵ2,
    },
]);
const DEFAULT_TENANTS_EDIT_FORM_PROPS = DEFAULT_TENANTS_CREATE_FORM_PROPS.slice(0, 1);

const ɵ0$1 = data => {
    const component = data.getInjected(TenantsComponent);
    component.openFeaturesModal(null);
}, ɵ1 = data => {
    const component = data.getInjected(TenantsComponent);
    component.addTenant();
};
const DEFAULT_TENANTS_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'AbpTenantManagement::ManageHostFeatures',
        action: ɵ0$1,
        permission: 'FeatureManagement.ManageHostFeatures',
        icon: 'fa fa-cog',
    },
    {
        text: 'AbpTenantManagement::NewTenant',
        action: ɵ1,
        permission: 'AbpTenantManagement.Tenants.Create',
        icon: 'fa fa-plus',
    },
]);

const DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS = {
    ["TenantManagement.TenantsComponent" /* Tenants */]: DEFAULT_TENANTS_ENTITY_ACTIONS,
};
const DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS = {
    ["TenantManagement.TenantsComponent" /* Tenants */]: DEFAULT_TENANTS_TOOLBAR_ACTIONS,
};
const DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS = {
    ["TenantManagement.TenantsComponent" /* Tenants */]: DEFAULT_TENANTS_ENTITY_PROPS,
};
const DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS = {
    ["TenantManagement.TenantsComponent" /* Tenants */]: DEFAULT_TENANTS_CREATE_FORM_PROPS,
};
const DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS = {
    ["TenantManagement.TenantsComponent" /* Tenants */]: DEFAULT_TENANTS_EDIT_FORM_PROPS,
};
const TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS');
const TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS');
const TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS');
const TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS');
const TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS');

class TenantManagementExtensionsGuard {
    constructor(injector) {
        this.injector = injector;
    }
    canActivate() {
        const extensions = this.injector.get(ExtensionsService);
        const actionContributors = this.injector.get(TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, null) || {};
        const toolbarContributors = this.injector.get(TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};
        const propContributors = this.injector.get(TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, null) || {};
        const createFormContributors = this.injector.get(TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};
        const editFormContributors = this.injector.get(TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};
        const configState = this.injector.get(ConfigStateService);
        return getObjectExtensionEntitiesFromStore(configState, 'TenantManagement').pipe(map(entities => ({
            ["TenantManagement.TenantsComponent" /* Tenants */]: entities.Tenant,
        })), mapEntitiesToContributors(configState, 'TenantManagement'), tap(objectExtensionContributors => {
            mergeWithDefaultActions(extensions.entityActions, DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS, actionContributors);
            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS, toolbarContributors);
            mergeWithDefaultProps(extensions.entityProps, DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
            mergeWithDefaultProps(extensions.createFormProps, DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);
            mergeWithDefaultProps(extensions.editFormProps, DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);
        }), mapTo(true));
    }
}
TenantManagementExtensionsGuard.ɵfac = function TenantManagementExtensionsGuard_Factory(t) { return new (t || TenantManagementExtensionsGuard)(ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
TenantManagementExtensionsGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TenantManagementExtensionsGuard, factory: TenantManagementExtensionsGuard.ɵfac });
TenantManagementExtensionsGuard.ctorParameters = () => [
    { type: Injector }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TenantManagementExtensionsGuard, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Injector }]; }, null); })();

class TenantManagementStateService {
    constructor(store) {
        this.store = store;
    }
    get() {
        return this.store.selectSnapshot(TenantManagementState.get);
    }
    getTenantsTotalCount() {
        return this.store.selectSnapshot(TenantManagementState.getTenantsTotalCount);
    }
    dispatchGetTenants(...args) {
        return this.store.dispatch(new GetTenants(...args));
    }
    dispatchGetTenantById(...args) {
        return this.store.dispatch(new GetTenantById(...args));
    }
    dispatchCreateTenant(...args) {
        return this.store.dispatch(new CreateTenant(...args));
    }
    dispatchUpdateTenant(...args) {
        return this.store.dispatch(new UpdateTenant(...args));
    }
    dispatchDeleteTenant(...args) {
        return this.store.dispatch(new DeleteTenant(...args));
    }
}
TenantManagementStateService.ɵfac = function TenantManagementStateService_Factory(t) { return new (t || TenantManagementStateService)(ɵngcc0.ɵɵinject(ɵngcc4.Store)); };
TenantManagementStateService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TenantManagementStateService_Factory() { return new TenantManagementStateService(i0.ɵɵinject(i1$1.Store)); }, token: TenantManagementStateService, providedIn: "root" });
TenantManagementStateService.ctorParameters = () => [
    { type: Store }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TenantManagementStateService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc4.Store }]; }, null); })();

const ɵ0 = {
    requiredPolicy: 'AbpTenantManagement.Tenants',
    replaceableComponent: {
        key: "TenantManagement.TenantsComponent" /* Tenants */,
        defaultComponent: TenantsComponent,
    },
};
const routes = [
    { path: '', redirectTo: 'tenants', pathMatch: 'full' },
    {
        path: '',
        component: DynamicLayoutComponent,
        canActivate: [AuthGuard, PermissionGuard, TenantManagementExtensionsGuard],
        children: [
            {
                path: 'tenants',
                component: ReplaceableRouteContainerComponent,
                data: ɵ0,
            },
        ],
    },
];
class TenantManagementRoutingModule {
}
TenantManagementRoutingModule.ɵfac = function TenantManagementRoutingModule_Factory(t) { return new (t || TenantManagementRoutingModule)(); };
TenantManagementRoutingModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TenantManagementRoutingModule });
TenantManagementRoutingModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[RouterModule.forChild(routes)], RouterModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TenantManagementRoutingModule, [{
        type: NgModule,
        args: [{
                imports: [RouterModule.forChild(routes)],
                exports: [RouterModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TenantManagementRoutingModule, { imports: function () { return [ɵngcc9.RouterModule]; }, exports: function () { return [RouterModule]; } }); })();

class TenantManagementModule {
    static forChild(options = {}) {
        return {
            ngModule: TenantManagementModule,
            providers: [
                {
                    provide: TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS,
                    useValue: options.entityActionContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS,
                    useValue: options.toolbarActionContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS,
                    useValue: options.entityPropContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS,
                    useValue: options.createFormPropContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS,
                    useValue: options.editFormPropContributors,
                },
                TenantManagementExtensionsGuard,
            ],
        };
    }
    static forLazy(options = {}) {
        return new LazyModuleFactory(TenantManagementModule.forChild(options));
    }
}
TenantManagementModule.ɵfac = function TenantManagementModule_Factory(t) { return new (t || TenantManagementModule)(); };
TenantManagementModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TenantManagementModule });
TenantManagementModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            TenantManagementRoutingModule,
            NgxsModule.forFeature([TenantManagementState]),
            NgxValidateCoreModule,
            CoreModule,
            ThemeSharedModule,
            NgbDropdownModule,
            FeatureManagementModule,
            UiExtensionsModule,
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TenantManagementModule, [{
        type: NgModule,
        args: [{
                declarations: [TenantsComponent],
                exports: [TenantsComponent],
                imports: [
                    TenantManagementRoutingModule,
                    NgxsModule.forFeature([TenantManagementState]),
                    NgxValidateCoreModule,
                    CoreModule,
                    ThemeSharedModule,
                    NgbDropdownModule,
                    FeatureManagementModule,
                    UiExtensionsModule,
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TenantManagementModule, { declarations: function () { return [TenantsComponent]; }, imports: function () { return [TenantManagementRoutingModule, ɵngcc4.ɵbc, NgxValidateCoreModule,
        CoreModule,
        ThemeSharedModule,
        NgbDropdownModule,
        FeatureManagementModule,
        UiExtensionsModule]; }, exports: function () { return [TenantsComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { CreateTenant, DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS, DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS, DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS, DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS, DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS, DeleteTenant, GetTenantById, GetTenants, TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, TenantManagementExtensionsGuard, TenantManagementModule, TenantManagementState, TenantManagementStateService, TenantService, TenantsComponent, UpdateTenant, ɵ0$4 as ɵ0, TenantsComponent as ɵa, TenantManagementState as ɵc, TenantService as ɵd, GetTenants as ɵe, GetTenantById as ɵf, CreateTenant as ɵg, UpdateTenant as ɵh, DeleteTenant as ɵi, TenantManagementRoutingModule as ɵl, TenantManagementExtensionsGuard as ɵm, TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS as ɵn, TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS as ɵo, TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS as ɵp, TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS as ɵq, TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS as ɵr, TenantManagementExtensionsGuard as ɵs };

//# sourceMappingURL=abp-ng.tenant-management.js.map