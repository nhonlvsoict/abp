(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@abp/ng.core'), require('@abp/ng.theme.shared'), require('@angular/core'), require('@angular/forms'), require('@ngxs/store'), require('rxjs/operators'), require('@abp/ng.theme.shared/extensions'), require('@abp/ng.feature-management'), require('@ng-bootstrap/ng-bootstrap'), require('@ngx-validate/core'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('@abp/ng.tenant-management', ['exports', '@abp/ng.core', '@abp/ng.theme.shared', '@angular/core', '@angular/forms', '@ngxs/store', 'rxjs/operators', '@abp/ng.theme.shared/extensions', '@abp/ng.feature-management', '@ng-bootstrap/ng-bootstrap', '@ngx-validate/core', '@angular/router'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.abp = global.abp || {}, global.abp.ng = global.abp.ng || {}, global.abp.ng['tenant-management'] = {}), global.i1, global.ng_theme_shared, global.ng.core, global.ng.forms, global.i1$1, global.rxjs.operators, global.extensions, global.ng_featureManagement, global.ngBootstrap, global.core, global.ng.router));
}(this, (function (exports, i1, ng_theme_shared, i0, forms, i1$1, operators, extensions, ng_featureManagement, ngBootstrap, core, router) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);

    var GetTenants = /** @class */ (function () {
        function GetTenants(payload) {
            this.payload = payload;
        }
        return GetTenants;
    }());
    GetTenants.type = '[TenantManagement] Get Tenant';
    var GetTenantById = /** @class */ (function () {
        function GetTenantById(payload) {
            this.payload = payload;
        }
        return GetTenantById;
    }());
    GetTenantById.type = '[TenantManagement] Get Tenant By Id';
    var CreateTenant = /** @class */ (function () {
        function CreateTenant(payload) {
            this.payload = payload;
        }
        return CreateTenant;
    }());
    CreateTenant.type = '[TenantManagement] Create Tenant';
    var UpdateTenant = /** @class */ (function () {
        function UpdateTenant(payload) {
            this.payload = payload;
        }
        return UpdateTenant;
    }());
    UpdateTenant.type = '[TenantManagement] Update Tenant';
    var DeleteTenant = /** @class */ (function () {
        function DeleteTenant(payload) {
            this.payload = payload;
        }
        return DeleteTenant;
    }());
    DeleteTenant.type = '[TenantManagement] Delete Tenant';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var TenantService = /** @class */ (function () {
        function TenantService(restService) {
            var _this = this;
            this.restService = restService;
            this.apiName = 'AbpTenantManagement';
            this.create = function (input) { return _this.restService.request({
                method: 'POST',
                url: '/api/multi-tenancy/tenants',
                body: input,
            }, { apiName: _this.apiName }); };
            this.delete = function (id) { return _this.restService.request({
                method: 'DELETE',
                url: "/api/multi-tenancy/tenants/" + id,
            }, { apiName: _this.apiName }); };
            this.deleteDefaultConnectionString = function (id) { return _this.restService.request({
                method: 'DELETE',
                url: "/api/multi-tenancy/tenants/" + id + "/default-connection-string",
            }, { apiName: _this.apiName }); };
            this.get = function (id) { return _this.restService.request({
                method: 'GET',
                url: "/api/multi-tenancy/tenants/" + id,
            }, { apiName: _this.apiName }); };
            this.getDefaultConnectionString = function (id) { return _this.restService.request({
                method: 'GET',
                responseType: 'text',
                url: "/api/multi-tenancy/tenants/" + id + "/default-connection-string",
            }, { apiName: _this.apiName }); };
            this.getList = function (input) { return _this.restService.request({
                method: 'GET',
                url: '/api/multi-tenancy/tenants',
                params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },
            }, { apiName: _this.apiName }); };
            this.update = function (id, input) { return _this.restService.request({
                method: 'PUT',
                url: "/api/multi-tenancy/tenants/" + id,
                body: input,
            }, { apiName: _this.apiName }); };
            this.updateDefaultConnectionString = function (id, defaultConnectionString) { return _this.restService.request({
                method: 'PUT',
                url: "/api/multi-tenancy/tenants/" + id + "/default-connection-string",
                params: { defaultConnectionString: defaultConnectionString },
            }, { apiName: _this.apiName }); };
        }
        return TenantService;
    }());
    TenantService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function TenantService_Factory() { return new TenantService(i0__namespace.ɵɵinject(i1__namespace.RestService)); }, token: TenantService, providedIn: "root" });
    TenantService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    TenantService.ctorParameters = function () { return [
        { type: i1.RestService }
    ]; };

    exports.ɵc = /** @class */ (function () {
        function TenantManagementState(service) {
            this.service = service;
        }
        TenantManagementState.get = function (_a) {
            var result = _a.result;
            return result.items || [];
        };
        TenantManagementState.getTenantsTotalCount = function (_a) {
            var result = _a.result;
            return result.totalCount;
        };
        TenantManagementState.prototype.get = function (_a, _b) {
            var patchState = _a.patchState;
            var payload = _b.payload;
            return this.service.getList(payload).pipe(operators.tap(function (result) { return patchState({
                result: result,
            }); }));
        };
        TenantManagementState.prototype.getById = function (_a, _b) {
            var patchState = _a.patchState;
            var payload = _b.payload;
            return this.service.get(payload).pipe(operators.tap(function (selectedItem) { return patchState({
                selectedItem: selectedItem,
            }); }));
        };
        TenantManagementState.prototype.delete = function (_, _a) {
            var payload = _a.payload;
            return this.service.delete(payload);
        };
        TenantManagementState.prototype.add = function (_, _a) {
            var payload = _a.payload;
            return this.service.create(payload);
        };
        TenantManagementState.prototype.update = function (_a, _b) {
            var getState = _a.getState;
            var payload = _b.payload;
            return this.service.update(payload.id, Object.assign(Object.assign({}, getState().selectedItem), payload));
        };
        return TenantManagementState;
    }());
    exports.ɵc.decorators = [
        { type: i0.Injectable }
    ];
    exports.ɵc.ctorParameters = function () { return [
        { type: TenantService }
    ]; };
    __decorate([
        i1$1.Action(GetTenants)
    ], exports.ɵc.prototype, "get", null);
    __decorate([
        i1$1.Action(GetTenantById)
    ], exports.ɵc.prototype, "getById", null);
    __decorate([
        i1$1.Action(DeleteTenant)
    ], exports.ɵc.prototype, "delete", null);
    __decorate([
        i1$1.Action(CreateTenant)
    ], exports.ɵc.prototype, "add", null);
    __decorate([
        i1$1.Action(UpdateTenant)
    ], exports.ɵc.prototype, "update", null);
    __decorate([
        i1$1.Selector()
    ], exports.ɵc, "get", null);
    __decorate([
        i1$1.Selector()
    ], exports.ɵc, "getTenantsTotalCount", null);
    exports.ɵc = __decorate([
        i1$1.State({
            name: 'TenantManagementState',
            defaults: { result: {}, selectedItem: {} },
        })
    ], exports.ɵc);

    var ɵ0$4 = "TenantManagement.TenantsComponent" /* Tenants */;
    var TenantsComponent = /** @class */ (function () {
        function TenantsComponent(list, injector, confirmationService, tenantService, fb, store) {
            var _this = this;
            this.list = list;
            this.injector = injector;
            this.confirmationService = confirmationService;
            this.tenantService = tenantService;
            this.fb = fb;
            this.store = store;
            this.selectedModalContent = {};
            this.visibleFeatures = false;
            this.modalBusy = false;
            this.featureManagementKey = "FeatureManagement.FeatureManagementComponent" /* FeatureManagement */;
            this.onVisibleFeaturesChange = function (value) {
                _this.visibleFeatures = value;
            };
        }
        Object.defineProperty(TenantsComponent.prototype, "hasSelectedTenant", {
            get: function () {
                return Boolean(this.selected.id);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TenantsComponent.prototype, "useSharedDatabase", {
            get: function () {
                return this.defaultConnectionStringForm.get('useSharedDatabase').value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TenantsComponent.prototype, "connectionString", {
            get: function () {
                return this.defaultConnectionStringForm.get('defaultConnectionString').value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TenantsComponent.prototype, "isDisabledSaveButton", {
            get: function () {
                if (!this.selectedModalContent)
                    return false;
                if (this.selectedModalContent.type === 'saveConnStr' &&
                    this.defaultConnectionStringForm &&
                    this.defaultConnectionStringForm.invalid) {
                    return true;
                }
                else if (this.selectedModalContent.type === 'saveTenant' &&
                    this.tenantForm &&
                    this.tenantForm.invalid) {
                    return true;
                }
                else {
                    return false;
                }
            },
            enumerable: false,
            configurable: true
        });
        TenantsComponent.prototype.ngOnInit = function () {
            this.hookToQuery();
        };
        TenantsComponent.prototype.createTenantForm = function () {
            var data = new extensions.FormPropData(this.injector, this.selected);
            this.tenantForm = extensions.generateFormFromProps(data);
        };
        TenantsComponent.prototype.createDefaultConnectionStringForm = function () {
            this.defaultConnectionStringForm = this.fb.group({
                useSharedDatabase: this._useSharedDatabase,
                defaultConnectionString: [this.defaultConnectionString || ''],
            });
        };
        TenantsComponent.prototype.openModal = function (title, template, type) {
            this.selectedModalContent = {
                title: title,
                template: template,
                type: type,
            };
            this.isModalVisible = true;
        };
        TenantsComponent.prototype.addTenant = function () {
            this.selected = {};
            this.createTenantForm();
            this.openModal('AbpTenantManagement::NewTenant', this.tenantModalTemplate, 'saveTenant');
        };
        TenantsComponent.prototype.editTenant = function (id) {
            var _this = this;
            this.store
                .dispatch(new GetTenantById(id))
                .pipe(operators.pluck('TenantManagementState', 'selectedItem'))
                .subscribe(function (selected) {
                _this.selected = selected;
                _this.createTenantForm();
                _this.openModal('AbpTenantManagement::Edit', _this.tenantModalTemplate, 'saveTenant');
            });
        };
        TenantsComponent.prototype.save = function () {
            var type = this.selectedModalContent.type;
            if (!type)
                return;
            if (type === 'saveTenant')
                this.saveTenant();
            else if (type === 'saveConnStr')
                this.saveConnectionString();
        };
        TenantsComponent.prototype.saveConnectionString = function () {
            var _this = this;
            if (this.modalBusy)
                return;
            this.modalBusy = true;
            if (this.useSharedDatabase || (!this.useSharedDatabase && !this.connectionString)) {
                this.tenantService
                    .deleteDefaultConnectionString(this.selected.id)
                    .pipe(operators.take(1), operators.finalize(function () { return (_this.modalBusy = false); }))
                    .subscribe(function () {
                    _this.isModalVisible = false;
                });
            }
            else {
                this.tenantService
                    .updateDefaultConnectionString(this.selected.id, this.connectionString)
                    .pipe(operators.take(1), operators.finalize(function () { return (_this.modalBusy = false); }))
                    .subscribe(function () {
                    _this.isModalVisible = false;
                });
            }
        };
        TenantsComponent.prototype.saveTenant = function () {
            var _this = this;
            if (!this.tenantForm.valid || this.modalBusy)
                return;
            this.modalBusy = true;
            this.store
                .dispatch(this.selected.id
                ? new UpdateTenant(Object.assign(Object.assign(Object.assign({}, this.selected), this.tenantForm.value), { id: this.selected.id }))
                : new CreateTenant(this.tenantForm.value))
                .pipe(operators.finalize(function () { return (_this.modalBusy = false); }))
                .subscribe(function () {
                _this.isModalVisible = false;
                _this.list.get();
            });
        };
        TenantsComponent.prototype.delete = function (id, name) {
            var _this = this;
            this.confirmationService
                .warn('AbpTenantManagement::TenantDeletionConfirmationMessage', 'AbpTenantManagement::AreYouSure', {
                messageLocalizationParams: [name],
            })
                .subscribe(function (status) {
                if (status === ng_theme_shared.Confirmation.Status.confirm) {
                    _this.store.dispatch(new DeleteTenant(id)).subscribe(function () { return _this.list.get(); });
                }
            });
        };
        TenantsComponent.prototype.hookToQuery = function () {
            var _this = this;
            this.list.hookToQuery(function (query) { return _this.store.dispatch(new GetTenants(query)); }).subscribe();
        };
        TenantsComponent.prototype.onSharedDatabaseChange = function (value) {
            if (!value) {
                setTimeout(function () {
                    var defaultConnectionString = document.getElementById('defaultConnectionString');
                    if (defaultConnectionString) {
                        defaultConnectionString.focus();
                    }
                }, 0);
            }
        };
        TenantsComponent.prototype.openFeaturesModal = function (providerKey) {
            var _this = this;
            this.providerKey = providerKey;
            setTimeout(function () {
                _this.visibleFeatures = true;
            }, 0);
        };
        TenantsComponent.prototype.sort = function (data) {
            var _a = data.sorts[0], prop = _a.prop, dir = _a.dir;
            this.list.sortKey = prop;
            this.list.sortOrder = dir;
        };
        return TenantsComponent;
    }());
    TenantsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'abp-tenants',
                    template: "<div id=\"wrapper\" class=\"card\">\n  <div class=\"card-header\">\n    <div class=\"row\">\n      <div class=\"col col-md-6\">\n        <h5 class=\"card-title\">{{ 'AbpTenantManagement::Tenants' | abpLocalization }}</h5>\n      </div>\n      <div class=\"text-right col col-md-6\">\n        <abp-page-toolbar [record]=\"data$ | async\"></abp-page-toolbar>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card-body\">\n    <div id=\"data-tables-table-filter\" class=\"data-tables-filter\">\n      <div class=\"input-group\">\n        <input\n          type=\"search\"\n          class=\"form-control\"\n          [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\n          [(ngModel)]=\"list.filter\"\n        />\n      </div>\n    </div>\n\n    <abp-extensible-table\n      [data]=\"data$ | async\"\n      [recordsTotal]=\"totalCount$ | async\"\n      [list]=\"list\"\n    ></abp-extensible-table>\n  </div>\n</div>\n\n<abp-modal size=\"md\" [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\n  <ng-template #abpHeader>\n    <h3>{{ selectedModalContent.title | abpLocalization }}</h3>\n  </ng-template>\n\n  <ng-template #abpBody>\n    <ng-container *ngTemplateOutlet=\"selectedModalContent?.template\"></ng-container>\n  </ng-template>\n\n  <ng-template #abpFooter>\n    <button abpClose type=\"button\" class=\"btn btn-secondary\">\n      {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\n    </button>\n    <abp-button iconClass=\"fa fa-check\" (click)=\"save()\" [disabled]=\"isDisabledSaveButton\">{{\n      'AbpTenantManagement::Save' | abpLocalization\n    }}</abp-button>\n  </ng-template>\n</abp-modal>\n\n<ng-template #tenantModalTemplate>\n  <form [formGroup]=\"tenantForm\" (ngSubmit)=\"save()\" validateOnSubmit>\n    <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\n  </form>\n</ng-template>\n\n<abp-feature-management\n  *abpReplaceableTemplate=\"{\n    inputs: {\n      providerName: { value: 'T' },\n      providerKey: { value: providerKey },\n      visible: { value: visibleFeatures, twoWay: true }\n    },\n    outputs: { visibleChange: onVisibleFeaturesChange },\n    componentKey: featureManagementKey\n  }\"\n  [(visible)]=\"visibleFeatures\"\n  providerName=\"T\"\n  [providerKey]=\"providerKey\"\n>\n</abp-feature-management>\n",
                    providers: [
                        i1.ListService,
                        {
                            provide: extensions.EXTENSIONS_IDENTIFIER,
                            useValue: ɵ0$4,
                        },
                    ]
                },] }
    ];
    TenantsComponent.ctorParameters = function () { return [
        { type: i1.ListService },
        { type: i0.Injector },
        { type: ng_theme_shared.ConfirmationService },
        { type: TenantService },
        { type: forms.FormBuilder },
        { type: i1$1.Store }
    ]; };
    TenantsComponent.propDecorators = {
        tenantModalTemplate: [{ type: i0.ViewChild, args: ['tenantModalTemplate',] }]
    };
    __decorate([
        i1$1.Select(exports.ɵc.get)
    ], TenantsComponent.prototype, "data$", void 0);
    __decorate([
        i1$1.Select(exports.ɵc.getTenantsTotalCount)
    ], TenantsComponent.prototype, "totalCount$", void 0);

    var ɵ0$3 = function (data) {
        var component = data.getInjected(TenantsComponent);
        component.editTenant(data.record.id);
    }, ɵ1$2 = function (data) {
        var component = data.getInjected(TenantsComponent);
        component.openFeaturesModal(data.record.id);
    }, ɵ2$1 = function (data) {
        var component = data.getInjected(TenantsComponent);
        component.delete(data.record.id, data.record.name);
    };
    var DEFAULT_TENANTS_ENTITY_ACTIONS = extensions.EntityAction.createMany([
        {
            text: 'AbpTenantManagement::Edit',
            action: ɵ0$3,
            permission: 'AbpTenantManagement.Tenants.Update',
        },
        {
            text: 'AbpTenantManagement::Permission:ManageFeatures',
            action: ɵ1$2,
            permission: 'AbpTenantManagement.Tenants.ManageFeatures',
        },
        {
            text: 'AbpTenantManagement::Delete',
            action: ɵ2$1,
            permission: 'AbpTenantManagement.Tenants.Delete',
        },
    ]);

    var DEFAULT_TENANTS_ENTITY_PROPS = extensions.EntityProp.createMany([
        {
            type: "string" /* String */,
            name: 'name',
            displayName: 'AbpTenantManagement::TenantName',
            sortable: true,
        },
    ]);

    var ɵ0$2 = function () { return [forms.Validators.required, forms.Validators.maxLength(256)]; }, ɵ1$1 = function () { return [forms.Validators.required, forms.Validators.maxLength(256), forms.Validators.email]; }, ɵ2 = function (data) { return __spread([forms.Validators.required], ng_theme_shared.getPasswordValidators({ get: data.getInjected })); };
    var DEFAULT_TENANTS_CREATE_FORM_PROPS = extensions.FormProp.createMany([
        {
            type: "string" /* String */,
            name: 'name',
            id: 'name',
            displayName: 'AbpTenantManagement::TenantName',
            validators: ɵ0$2,
        },
        {
            type: "email" /* Email */,
            name: 'adminEmailAddress',
            displayName: 'AbpTenantManagement::DisplayName:AdminEmailAddress',
            id: 'admin-email-address',
            validators: ɵ1$1,
        },
        {
            type: "password" /* Password */,
            name: 'adminPassword',
            displayName: 'AbpTenantManagement::DisplayName:AdminPassword',
            id: 'admin-password',
            autocomplete: 'new-password',
            validators: ɵ2,
        },
    ]);
    var DEFAULT_TENANTS_EDIT_FORM_PROPS = DEFAULT_TENANTS_CREATE_FORM_PROPS.slice(0, 1);

    var ɵ0$1 = function (data) {
        var component = data.getInjected(TenantsComponent);
        component.openFeaturesModal(null);
    }, ɵ1 = function (data) {
        var component = data.getInjected(TenantsComponent);
        component.addTenant();
    };
    var DEFAULT_TENANTS_TOOLBAR_ACTIONS = extensions.ToolbarAction.createMany([
        {
            text: 'AbpTenantManagement::ManageHostFeatures',
            action: ɵ0$1,
            permission: 'FeatureManagement.ManageHostFeatures',
            icon: 'fa fa-cog',
        },
        {
            text: 'AbpTenantManagement::NewTenant',
            action: ɵ1,
            permission: 'AbpTenantManagement.Tenants.Create',
            icon: 'fa fa-plus',
        },
    ]);

    var _a, _b, _c, _d, _e;
    var DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS = (_a = {},
        _a["TenantManagement.TenantsComponent" /* Tenants */] = DEFAULT_TENANTS_ENTITY_ACTIONS,
        _a);
    var DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS = (_b = {},
        _b["TenantManagement.TenantsComponent" /* Tenants */] = DEFAULT_TENANTS_TOOLBAR_ACTIONS,
        _b);
    var DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS = (_c = {},
        _c["TenantManagement.TenantsComponent" /* Tenants */] = DEFAULT_TENANTS_ENTITY_PROPS,
        _c);
    var DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS = (_d = {},
        _d["TenantManagement.TenantsComponent" /* Tenants */] = DEFAULT_TENANTS_CREATE_FORM_PROPS,
        _d);
    var DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS = (_e = {},
        _e["TenantManagement.TenantsComponent" /* Tenants */] = DEFAULT_TENANTS_EDIT_FORM_PROPS,
        _e);
    var TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS = new i0.InjectionToken('TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS');
    var TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS = new i0.InjectionToken('TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS');
    var TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS = new i0.InjectionToken('TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS');
    var TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS = new i0.InjectionToken('TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS');
    var TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS = new i0.InjectionToken('TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS');

    var TenantManagementExtensionsGuard = /** @class */ (function () {
        function TenantManagementExtensionsGuard(injector) {
            this.injector = injector;
        }
        TenantManagementExtensionsGuard.prototype.canActivate = function () {
            var extensions$1 = this.injector.get(extensions.ExtensionsService);
            var actionContributors = this.injector.get(TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, null) || {};
            var toolbarContributors = this.injector.get(TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};
            var propContributors = this.injector.get(TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, null) || {};
            var createFormContributors = this.injector.get(TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};
            var editFormContributors = this.injector.get(TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};
            var configState = this.injector.get(i1.ConfigStateService);
            return extensions.getObjectExtensionEntitiesFromStore(configState, 'TenantManagement').pipe(operators.map(function (entities) {
                var _a;
                return (_a = {},
                    _a["TenantManagement.TenantsComponent" /* Tenants */] = entities.Tenant,
                    _a);
            }), extensions.mapEntitiesToContributors(configState, 'TenantManagement'), operators.tap(function (objectExtensionContributors) {
                extensions.mergeWithDefaultActions(extensions$1.entityActions, DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS, actionContributors);
                extensions.mergeWithDefaultActions(extensions$1.toolbarActions, DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS, toolbarContributors);
                extensions.mergeWithDefaultProps(extensions$1.entityProps, DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
                extensions.mergeWithDefaultProps(extensions$1.createFormProps, DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);
                extensions.mergeWithDefaultProps(extensions$1.editFormProps, DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);
            }), operators.mapTo(true));
        };
        return TenantManagementExtensionsGuard;
    }());
    TenantManagementExtensionsGuard.decorators = [
        { type: i0.Injectable }
    ];
    TenantManagementExtensionsGuard.ctorParameters = function () { return [
        { type: i0.Injector }
    ]; };

    var TenantManagementStateService = /** @class */ (function () {
        function TenantManagementStateService(store) {
            this.store = store;
        }
        TenantManagementStateService.prototype.get = function () {
            return this.store.selectSnapshot(exports.ɵc.get);
        };
        TenantManagementStateService.prototype.getTenantsTotalCount = function () {
            return this.store.selectSnapshot(exports.ɵc.getTenantsTotalCount);
        };
        TenantManagementStateService.prototype.dispatchGetTenants = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (GetTenants.bind.apply(GetTenants, __spread([void 0], args)))());
        };
        TenantManagementStateService.prototype.dispatchGetTenantById = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (GetTenantById.bind.apply(GetTenantById, __spread([void 0], args)))());
        };
        TenantManagementStateService.prototype.dispatchCreateTenant = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (CreateTenant.bind.apply(CreateTenant, __spread([void 0], args)))());
        };
        TenantManagementStateService.prototype.dispatchUpdateTenant = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (UpdateTenant.bind.apply(UpdateTenant, __spread([void 0], args)))());
        };
        TenantManagementStateService.prototype.dispatchDeleteTenant = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.store.dispatch(new (DeleteTenant.bind.apply(DeleteTenant, __spread([void 0], args)))());
        };
        return TenantManagementStateService;
    }());
    TenantManagementStateService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function TenantManagementStateService_Factory() { return new TenantManagementStateService(i0__namespace.ɵɵinject(i1__namespace$1.Store)); }, token: TenantManagementStateService, providedIn: "root" });
    TenantManagementStateService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    TenantManagementStateService.ctorParameters = function () { return [
        { type: i1$1.Store }
    ]; };

    var ɵ0 = {
        requiredPolicy: 'AbpTenantManagement.Tenants',
        replaceableComponent: {
            key: "TenantManagement.TenantsComponent" /* Tenants */,
            defaultComponent: TenantsComponent,
        },
    };
    var routes = [
        { path: '', redirectTo: 'tenants', pathMatch: 'full' },
        {
            path: '',
            component: i1.DynamicLayoutComponent,
            canActivate: [i1.AuthGuard, i1.PermissionGuard, TenantManagementExtensionsGuard],
            children: [
                {
                    path: 'tenants',
                    component: i1.ReplaceableRouteContainerComponent,
                    data: ɵ0,
                },
            ],
        },
    ];
    var TenantManagementRoutingModule = /** @class */ (function () {
        function TenantManagementRoutingModule() {
        }
        return TenantManagementRoutingModule;
    }());
    TenantManagementRoutingModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [router.RouterModule.forChild(routes)],
                    exports: [router.RouterModule],
                },] }
    ];

    var TenantManagementModule = /** @class */ (function () {
        function TenantManagementModule() {
        }
        TenantManagementModule.forChild = function (options) {
            if (options === void 0) { options = {}; }
            return {
                ngModule: TenantManagementModule,
                providers: [
                    {
                        provide: TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS,
                        useValue: options.entityActionContributors,
                    },
                    {
                        provide: TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS,
                        useValue: options.toolbarActionContributors,
                    },
                    {
                        provide: TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS,
                        useValue: options.entityPropContributors,
                    },
                    {
                        provide: TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS,
                        useValue: options.createFormPropContributors,
                    },
                    {
                        provide: TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS,
                        useValue: options.editFormPropContributors,
                    },
                    TenantManagementExtensionsGuard,
                ],
            };
        };
        TenantManagementModule.forLazy = function (options) {
            if (options === void 0) { options = {}; }
            return new i1.LazyModuleFactory(TenantManagementModule.forChild(options));
        };
        return TenantManagementModule;
    }());
    TenantManagementModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [TenantsComponent],
                    exports: [TenantsComponent],
                    imports: [
                        TenantManagementRoutingModule,
                        i1$1.NgxsModule.forFeature([exports.ɵc]),
                        core.NgxValidateCoreModule,
                        i1.CoreModule,
                        ng_theme_shared.ThemeSharedModule,
                        ngBootstrap.NgbDropdownModule,
                        ng_featureManagement.FeatureManagementModule,
                        extensions.UiExtensionsModule,
                    ],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CreateTenant = CreateTenant;
    exports.DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS = DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS;
    exports.DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS = DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS;
    exports.DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS = DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS;
    exports.DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS = DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS;
    exports.DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS = DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS;
    exports.DeleteTenant = DeleteTenant;
    exports.GetTenantById = GetTenantById;
    exports.GetTenants = GetTenants;
    exports.TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS = TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS;
    exports.TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS = TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS;
    exports.TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS = TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS;
    exports.TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS = TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS;
    exports.TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS = TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS;
    exports.TenantManagementExtensionsGuard = TenantManagementExtensionsGuard;
    exports.TenantManagementModule = TenantManagementModule;
    exports.TenantManagementState = exports.ɵc;
    exports.TenantManagementStateService = TenantManagementStateService;
    exports.TenantService = TenantService;
    exports.TenantsComponent = TenantsComponent;
    exports.UpdateTenant = UpdateTenant;
    exports.ɵ0 = ɵ0$4;
    exports.ɵa = TenantsComponent;
    exports.ɵd = TenantService;
    exports.ɵe = GetTenants;
    exports.ɵf = GetTenantById;
    exports.ɵg = CreateTenant;
    exports.ɵh = UpdateTenant;
    exports.ɵi = DeleteTenant;
    exports.ɵl = TenantManagementRoutingModule;
    exports.ɵm = TenantManagementExtensionsGuard;
    exports.ɵn = TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS;
    exports.ɵo = TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS;
    exports.ɵp = TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS;
    exports.ɵq = TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS;
    exports.ɵr = TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS;
    exports.ɵs = TenantManagementExtensionsGuard;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=abp-ng.tenant-management.umd.js.map
